{{Multiple issues|cleanup = May 2009|more footnotes = May 2009|refimprove = January 2009}}

'''Templates''' are a feature of the [[C++]] programming language that allow functions and classes to operate with [[Generic programming|generic types]].  This allows a function or class to work on many different [[datatype|data types]] without being rewritten for each one. This is effectively a [[Turing-complete]] language.

Templates are of great utility to programmers in C++, especially when combined with [[multiple inheritance]] and [[operator overloading]]. The [[C++ Standard Library]] provides many useful functions within a framework of connected templates.

Major inspirations for C++ templates were the parametrized modules provided by [[CLU (programming language)|CLU]] and the generics provided by [[Ada (programming language)|Ada]].<ref name="Stroustrup">{{cite web | first=Bjarne | last=Stroustrup | title=The C++ Programming Language (Third Edition and Special Edition) | url=http://www2.research.att.com/~bs/3rd.html | work=Bjarne Stroustrup's homepage | date=2004-09-08}}</ref>

==Technical overview==
There are two kinds of templates: ''function templates'' and ''class templates''.

===Function templates===
A ''function template'' behaves like a function except that the template can have arguments of many different types (see example). In other words, a function template represents a family of functions.
The format for declaring function templates with type parameters is
<source lang="cpp">
template <class identifier> function_declaration;
template <typename identifier> function_declaration;
</source>
Both expressions have exactly the same meaning and behave exactly the same way. The latter form was introduced to avoid confusion because a type parameter does not need to be a ''class'', it may also be a basic type like ''int'' or ''double''.

For example, the C++ Standard Library contains the function template <code>max(x, y)</code> which returns either ''x'' or ''y'', whichever is larger.  <code>max()</code> could be defined like this, using the following template:

<source lang="cpp">
template <typename Type>
Type max(Type a, Type b) {
    return a > b ? a : b;
}
</source>
This single function definition works with different kinds of data types. A function template does not occupy space in memory. The actual definitions of a function template are generated at compile-time, when the compiler has determined what types the function will be called for. The function template does not save memory.
<source lang="cpp">
#include <iostream>

int main()
{
  // This will call max <int> (by argument deduction)
  std::cout << max(3, 7) << std::endl;
  // This will call max<double> (by argument deduction)
  std::cout << max(3.0, 7.0) << std::endl;
  // This type is ambiguous, so explicitly instantiate max<double>
  std::cout << max<double>(3, 7.0) << std::endl;
  return 0;
}
</source>

In the first two cases, the template argument T is automatically deduced by the compiler to be <code>int</code> and <code>double</code>, respectively. In the third case deduction fails because the type of the parameters must in general match the template arguments  exactly. This function template can be instantiated with any [[copy constructor|copy-constructible]] type for which the expression (y < x) is valid. For user-defined types, this implies that the less-than operator must be [[operator overloading|overloaded]].

===Class templates===
A class template provides a specification for generating classes based on parameters. Class templates are commonly used to implement [[container (data structure)|container]]s. A class template is instantiated by passing a given set of types to it as template arguments.<ref name="cpptemplates">{{cite book
  | last1 = Vandevoorde
  | first1 = Daveed
  | last2 = Josuttis
  | first2 = Nicolai
  | title = C++ Templates: The Complete Guide
  | publisher = [[Addison Wesley]]
  | year = 2002
  | isbn = 0-201-73484-2
}}
</ref> The [[C++ Standard Library]] contains many class templates, in particular the containers adapted from the [[Standard Template Library]], such as <code>[[Vector (C++)|vector]]</code>.

===Explicit template specialization===

When a function or class is instantiated from a template, a specialization of that template is created by the compiler for the set of arguments used (and the specialization is referred to as being a generated specialization). However, the programmer may decide to implement a special version of a function (or class) for a given set of template arguments which is called an explicit specialization. If a class template is specialized by a subset of its parameters it is called [[partial template specialization]]. If all of the parameters are specialized it is a ''full specialization''. Function templates cannot be partially specialized.

Explicit specialization is used when the behavior of a function or class for particular choices of the template parameters must deviate from the generic behavior: that is, from the code generated by the main template, or templates. For example:
<source lang="cpp">
template <>
bool max(bool a, bool b) {
    return a||b;
}
</source>

== Advantages and disadvantages ==
{{procon|date=November 2012}}

Some uses of templates, such as the <code>maximum()</code> function, were previously fulfilled by function-like [[preprocessor]] [[Macro (computer science)|macros]]. For example, the following is a C++ <code>maximum()</code> macro:

<source lang="cpp">
  #define maximum(a,b) ((a) < (b) ? (b) : (a))
</source>

Both macros and templates are expanded at compile time. Macros are always expanded inline, while templates are only expanded inline when the compiler deems it appropriate. When expanded inline, macro functions and function templates have no extraneous runtime overhead. Template functions with many lines of code will incur runtime overhead when they are not expanded inline, but the reduction in code size may help the code to load from disk more quickly or fit within RAM caches.

Templates are considered [[Type safety|type-safe]]; that is, they require type-checking at compile time. Hence, the compiler can determine at compile time whether the type associated with a template definition can perform all of the functions required by that template definition.

By design, templates can be utilized in very complex problem spaces, whereas macros are substantially more limited.

There are fundamental drawbacks to the use of templates:
#Historically, some compilers exhibited poor support for templates. So, the use of templates could decrease code portability.
#Many compilers lack clear instructions when they detect a template definition error. This can increase the effort of developing templates, and has prompted the development of [[Concepts (C++)|Concepts]] for possible inclusion in a future C++ standard.
#Since the compiler generates additional code for each template type, indiscriminate use of templates can lead to [[code bloat]], resulting in larger executables.
#Because a template by its nature exposes its implementation, injudicious use in large systems can lead to longer build times.
#It can be difficult to debug code that is developed using templates. Since the compiler replaces the templates, it becomes difficult for the debugger to locate the code at runtime.
#Templates of Templates (nesting) are not supported by all compilers, or might have a max nesting level.
#Templates are in the headers, which require a complete rebuild of all project pieces when changes are made.
#No information hiding. All code is exposed in the header file. No one library can solely contain the code.

Additionally, the use of the "less than" and "greater than" signs as delimiters is problematic for tools (such as [[text editor]]s) which analyze source code syntactically. It is difficult, or sometimes impossible{{fact|date=May 2012}}, for such tools to determine whether a use of these tokens is as comparison operators or template delimiters. For example, this line of code:

<source lang="cpp">
  foo (a < b, c > d) ;
</source>

may be a function call with two parameters, each the result of a comparison expression. Alternatively, it could be a declaration of a constructor for class <code>foo</code> taking a parameter <code>d</code> whose type is the parameterized <code>a < b, c ></code>.

==Generic programming features in other languages==
Initially, the concept of templates was not included in some languages, such as [[Java (programming language)|Java]] and [[C Sharp (programming language)|C#]] 1.0. [[Generics in Java|Java's adoption of generics]] mimics the behaviour of templates, but is technically different. C# added generics (parameterized types) in .NET 2.0. The generics in [[Ada (programming language)|Ada]] predate C++ templates.

Although C++ templates, Java generics, and [[.Net framework|.NET]] generics are often considered similar, generics only mimic the basic behavior of C++ templates.<ref>[http://msdn2.microsoft.com/en-us/library/c6cyy67b.aspx Differences Between C++ Templates and C# Generics (C# Programming Guide)]</ref> Some of the advanced template features utilized by libraries such as [[Boost C++ Libraries|Boost]] and [[STLSoft C++ Libraries|STLSoft]], and implementations of the [[Standard Template Library|STL]] itself, for [[template metaprogramming]] (explicit or partial specialization, default template arguments, template non-type arguments, template template arguments, ...) are not available with generics.

The [[D programming language]] attempts to build on C++ redesigning a better template system.<ref>[http://www.digitalmars.com/d/2.0/templates-revisited.html (D) Templates Revisited]</ref>  A significant addition is the inclusion of the <code>static if</code> statement, which allows conditional compilation of code based on any information known at compile time.  For example:

<source lang="D">
template factorial(ulong n)
{
    static if( n <= 1 )
        const factorial = 1;
    else
        const factorial = n * factorial!(n-1);
};
</source>

D's [[Compile time function execution|CTFE (Compile time function execution)]] feature allows to do the same thing :
<source lang="D">
ulong factorial(ulong n)
{
	if(n <= 1)
		return 1;
	else
		return n * factorial(n - 1);
}

void main()
{
	ulong foo = factorial(4); // known at run-time
        static foo2 = factorial(4); // known at compile-time
}
</source>
Also note that the <code>!()</code> delimiters are used rather than the <code><></code> delimiters.  This prevents ambiguity in the parsing of templates.

Other significant features include typesafe [[Variadic Templates|variadic template]] functions.

<source lang="D">// Simple example, assumes all arguments are of the same type.
T[0] max(T...)(T args) {
    static assert(args.length > 1, "Insufficient arguments.");
    // T[0] is the type of the first argument,
    // args[0] is the first argument.
    T[0] max = args[0];
    // Tuple can be iterated over and sliced like an array.
    foreach (arg; args[1 .. $])
        if (arg > max)
            max = arg;
    return max;
}</source>

This function will work for any number of arguments, with the <code>foreach</code> iteration over the tuple of arguments expanded at compile time.

D templates allow a simple form of Constraints too. They can be expressed as an arbitrarily complex predicate that must evaluate at compile time. If it's true the template is a match for the arguments, otherwise the template is ignored during overload matching.<ref>[http://www.digitalmars.com/d/2.0/concepts.html (D) Template Constraints]</ref>

<source lang="D">
template Foo(int N) if (N & 1)    {...} // A
template Foo(int N) if (!(N & 1)) {...} // B

Foo!(3)    // Instantiates A
Foo!(64)   // Instantiates B

template Bar(T) if (isFloatingPoint!T) {...}

Bar!(3.5) // Instantiates Bar
Bar!(3)   // Fails</source>

Something similar can be done in C++ with Boost enable_if.<ref>[http://www.boost.org/doc/libs/1_42_0/libs/utility/enable_if.html Boost enable_if templates]</ref>

In C++ templates, the compile-time cases are performed by pattern matching over the template arguments, so the Factorial template's base case is implemented by matching 0 rather than with an inequality test, which is unavailable:

<source lang="cpp">

// Induction 

template <int N> 
struct Factorial {
  static const int value = N * Factorial<N - 1>::value;
};

// Base case via template specialization:

template <>
struct Factorial<0> {
  static const int value = 1;
};

</source>

With these definitions, one can compute, say 6! at compile time using the expression <code>Factorial<6>::value</code>.

== See also ==
* [[Template metaprogramming]]
* [[Metaprogramming]]
* [[Generic programming]]

==References==
{{Reflist}}

== External links ==
*[http://matt.might.net/articles/c++-template-meta-programming-with-lambda-calculus/ Demonstration of the Turing-completeness of C++ templates] (Lambda calculus implementation)

{{Data types}}

{{DEFAULTSORT:Template (Programming)}}
[[Category:Generic programming]]
[[Category:Metaprogramming]]
[[Category:C++]]

[[de:Template (Programmierung)]]
[[fr:Template (programmation)]]
[[it:Template]]
[[ko:<U+D15C><U+D50C><U+B9BF> (C++)]]
[[pl:Szablon (C++)]]
[[ru:<U+0428><U+0430><U+0431><U+043B><U+043E><U+043D><U+044B> C++]]
[[zh:<U+6A21><U+677F> (C++)]]
