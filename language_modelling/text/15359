In [[computer science]], more specifically in [[automata theory|automata]] and [[formal language]] theory, '''nested words''' are a concept proposed by [[Rajeev Alur|Alur]] and Madhusudan as a joint generalization of a [[String (computer science)|words]], as traditionally used for modeling [[linearly ordered]] structures, and of ordered unranked [[Tree (data structure)|trees]], as traditionally used for modeling hierarchical structures. Finite-state acceptors for nested words,
so-called '''nested word automata''', then give a more expressive generalization of [[nondeterministic finite automaton|finite automata]] on words. The linear encodings of languages accepted by finite nested word automata gives the class of '''visibly pushdown languages'''. The latter language class lies properly between the [[regular language]]s and the [[deterministic context-free language]]s. Since their introduction in 2004, these concepts have triggered a lot of research in that area.<ref>[http://scholar.google.com/scholar?as_q=&as_oq=%22nested+words%22+%22visibly+pushdown%22 Google Scholar search results] for "nested words" OR "visibly pushdown"</ref>

==Formal definition==
Nested words are defined with the aid of a matching relation, to be defined first. As usual, for a [[nonnegative integer]] <math>\ell</math>, we use the notation <math>[\ell]</math> to denote the set <math>\{1,2,\ldots,\ell-1,\ell\}</math>, with the special case <math>[0]=\emptyset</math>.  
A ''matching relation'' <U+219D> of length <math>\ell\ge 0</math> is a subset of <math>(\{-\infty\} \cup [\ell])\times([\ell] \cup \{\infty\})</math> such that: <br />
(i) only forward nesting edges, that is, if i <U+219D> j then i<j; <br />
(ii) nesting edges never have a position in common, that is, for <math>-\infty < i < \infty </math>, there is at most one position h such that h <U+219D> i, and there is at most one position j such that i <U+219D> j; and <br />
(iii) nesting edges never cross, that is, there are no four positions h<i<j<k such that both h <U+219D> j and i <U+219D> k.<br />
A ''nested word'' over an [[alphabet (computer science)]] <U+03A3> is a pair (w,<U+219D>), where w is a word over <U+03A3> (in the usual sense) and <U+219D> is a matching relation whose length is equal to the length of the word w. For a nested word (w,<U+219D>), a position 
<math>i</math> is referred to as a ''call position'', if i <U+219D> j for some j, and i is referred to as a ''return position'', if h <U+219D> i for some h.  

==Encoding nested words into ordinary words==
Nested words over the alphabet <math>\Sigma=\{a_1,a_2,\ldots,a_n\}</math> can be encoded into "ordinary" words over the <em>tagged alphabet</em> <math> \hat{\Sigma}</math>, in which each symbol ''a'' from <U+03A3> has three tagged counterparts: the 
symbol '''<U+27E8>a''' for encoding a call position in a nested word labeled with ''a'', the symbol '''a<U+27E9>''' for encoding a return position labeled with ''a'', and finally the symbol '''a''' itself for representing an internal position labeled with ''a''. More precisely, let <U+03C6> be the function mapping nested words over <U+03A3> to words over <math>\hat{\Sigma}</math> such that each nested word (<math>w_1w_2\cdots w_\ell</math>,<U+219D>) is mapped to the word <math>x_1x_2...x_\ell</math>, where the letter <math>x_i</math> equals '''<U+27E8>a''', '''a''', or '''a<U+27E9>''', respectively, if <math>w_i=a</math> and ''i'' is a call position, an internal position, or a return position, respectively.

===Example===
For illustration, let ''n=(w,<U+219D>)'' be the nested word over an unary alphabet with ''w=abaabccca'' and matching relation ''<U+219D> = {(-<U+221E>,1),(2,<U+221E>),(3,4),(5,7),(8,<U+221E>)}''. Then its encoding as word reads as ''<U+03C6>(n) = a<U+27E9><U+27E8>b<U+27E8>aa<U+27E9><U+27E8>bcc<U+27E9><U+27E8>ca''.

==Automata==
===Nested word automaton===
A ''nested word automaton'' has a finite number of states, and operates in almost the same way as a [[deterministic finite automaton]] on classical strings: A classical finite automaton reads the input word <math>w = w_1\cdots w_\ell</math> 
from left to right, and the state of the automaton after reading the ''j''th letter <math>w_j</math> depends on the state in which the automaton was before reading <math>w_j</math>. In a nested word automaton, the position <math>j</math> in the nested word (w,<U+219D>) might be a return position; if so, the state after reading <math>w_j</math> will not only depend on the ''linear state'' in which the automaton was before reading <math>w_j</math>, but also on a ''hierarchical state'' propagated by the automaton at the time it was in the corresponding call position. In analogy to [[regular language]]s of words, a set  ''L'' of nested words is called ''regular'' if it is accepted by some (finite-state) nested word automaton.   

===Visibly pushdown automaton===
Nested word automata are an automaton model accepting nested words. There is an equivalent automaton model operating on (ordinary) words. Namely, the notion of a '''visibly pushdown automaton''' is a restriction of the notion of a [[pushdown automaton]].     

Following Alur and Madhusudan<ref>Alur and Madhusudan (2004)</ref>, a deterministic visibly pushdown automaton is formally defined as a 7-tuple <math>M=(Q,\  \hat{\Sigma},\  \Gamma,\  \delta, \ q_{0},\ Z, \ F)</math>
where
*<math>\, Q </math> is a finite set of <em>states</em>
*<math>\,\hat{\Sigma}</math> is a finite set which is called the <em>tagged input alphabet</em>. In addition to the definition of ordinary pushdown automata, we require that <math>\hat{\Sigma}</math> is partitioned into three equal-sized sets <U+27E8><U+03A3>, <U+03A3>, and <U+03A3><U+27E9>, such that the set <U+27E8><U+03A3> contains the ''call symbols'', the set <U+03A3> contains the ''internal symbols'', and the set <U+03A3><U+27E9> contains the ''return symbols''.
*<math>\,\Gamma</math> is a finite set which is called the <em>stack alphabet</em>
*<math>\,\delta = \delta_c \cup \delta_i \cup \delta_r</math> is the <em>transition function</em>, which is partitioned into three parts corresponding to call transitions, internal transitions and return transitions, namely 
**<math>\delta_c:Q \times \left\langle\Sigma\right. \to Q \times \Gamma</math>, the <em>call transition function</em>
**<math>\delta_i:Q \times \Sigma \to Q </math>, the <em>internal transition function</em>, and
**<math>\delta_r:Q \times \left.\Sigma\right\rangle \to Q \times \Gamma</math>, the <em>return transition</em> function  
*<math>\,q_{0}\in\, Q </math> is the <em>start state</em>
*<math>\ Z \in \Gamma</math> is the <em>initial stack symbol</em>
*<math>F\subseteq Q</math> is the set of <em>accepting states</em>

If a [[formal language|language]] ''L'' over a tagged alphabet <math>\,\hat{\Sigma}</math> is accepted by a deterministic visibly pushdown automaton, then ''L'' is called a ''visibly pushdown language''. 
==Languages==
As the definition of visibly pushdown automata shows, deterministic visibly pushdown automata can be seen as a special case of [[deterministic pushdown automata]]; thus the set '''VPL''' of visibly pushdown languages over <math>\,\hat{\Sigma}</math> forms a subset of the set '''DCFL''' of [[deterministic context-free language]]s over the set of symbols in <math>\,\hat{\Sigma}</math>.

===Closure properties===
The set of visibly pushdown languages is closed under the set operations union, intersection, and complement, thus giving rise to a [[boolean algebra]].<ref>{{harvtxt|Alur|Madhusudan|2004}}, pp. 205f.</ref>

For the intersection operation, one can construct a VPA <math>M</math> simulating two VPAs <math>M_1</math> and <math>M_2</math> by a simple product construction: For <math>i=1,2</math>, assume <math>M_i</math> is given as <math>(Q_i,\  \hat{\Sigma},\  \Gamma_i,\  \delta_i, \ q_{0}^{i},\ Z_i, \ F_i)</math>. Then for <math>M</math>, the set of states is <math>\, Q_1\times Q_2</math>, the initial state is <math>q_0^{(1)} \times q_0^{(2)}</math>, the set of final states is <math>F_1 \times F_2</math>, the stack alphabet is given by <math>\,\Gamma_1\times\Gamma_2</math>, and the initial stack symbol is <math>(Z_1,Z_2)</math>. If <math>M</math> is in state <math>(p_1,p_2)</math> on reading a ''call symbol'' <math>\left\langle a\right.</math>, then 
<math>M</math> pushes the stack symbol <math>(\gamma_1,\gamma_2)</math> 
and goes to state <math>(q_1,q_2)</math>, where <math>\gamma_i</math> is the stack symbol pushed by <math>M_i</math>
when transitioning from state <math>p_i</math> to <math>q_i</math> on reading input <math>\left\langle a\right.</math>.
If <math>M</math> is in state <math>(p_1,p_2)</math> on reading an ''internal symbol'' <math>a</math>, then <math>M</math> 
goes to state <math>(q_1,q_2)</math>, whenever <math>M_i</math>
transitions from state <math>p_i</math> to <math>q_i</math> on reading <math>a</math>. 
If <math>M</math> is in state <math>(p_1,p_2)</math> on reading a ''return symbol'' <math>\left. a\right\rangle</math>, then <math>M</math> 
pops the symbol <math>(\gamma_1,\gamma_2)</math> from the stack and 
goes to state <math>(q_1,q_2)</math>, where <math>\gamma_i</math> is the stack symbol popped by <math>M_i</math>
when transitioning from state <math>p_i</math> to <math>q_i</math> on reading <math>\left. a\right\rangle</math>.
    
Correctness of the above construction crucially relies on the fact that the push and pop actions of the simulated 
machines <math>M_1</math> and <math>M_2</math> are synchronized along the input symbols read. In fact, a similar simulation is no longer possible for [[deterministic pushdown automaton|deterministic pushdown automata]], as the larger class of deterministic context-free languages is no longer closed under intersection. In contrast, the complementation construction for visibly pushdown automata parallels the standard construction<ref>{{harvtxt|Hopcroft|Ullman|1979}}, p. 238 f.</ref> for deterministic pushdown automata. Furthermore, the visibly pushdown languages are closed under [[Concatenation#Concatenation_of_sets_of_strings|concatenation]], and [[Kleene star]].<ref>{{harvtxt|Alur|Madhusudan|2004}}, pp. 205f.</ref>

===Relation to other language classes===
{{harvtxt|Alur|Madhusudan|2004}} point out that the visibly pushdown languages are more general than the parenthesis languages suggested in {{harvtxt|McNaughton|1967}}. As shown by {{harvtxt|Reghizzi|Mandrioli|2009}}, the VPL in turn are strictly contained in the class of languages described by [[operator-precedence grammar]]s, which in turn were introduced by {{harvtxt|Floyd|1963}}. In comparison to [[conjunctive grammars]], a generalization of context-free grammars, {{harvtxt|Okhotin|2011}} shows that already the linear conjunctive languages form a superclass of the visibly pushdown languages. The following table puts the family of visibly pushdown languages in relation to other language families in the [[Chomsky hierarchy]].

{{Formal languages and grammars}}

==Notes==
<references/>
==References==
*{{cite doi|10.1145/321172.321179}}
*{{cite doi|10.1145/321406.321411}}
*Rajeev Alur, P. Madhusudan: Visibly pushdown languages. [[STOC]] 2004:202-211
*Rajeev Alur, Marcelo Arenas, Pablo Barcel<U+00F3>, Kousha Etessami, [[Neil Immerman]], Leonid Libkin: First-Order and Temporal Logics for Nested Words. [[Logical Methods in Computer Science]] 4(4): (2008)
*Rajeev Alur, P. Madhusudan: Adding nesting structure to words. [[Journal of the ACM]] 56(3) (2009)
*Stefano Crespi Reghizzi, Dino Mandrioli: Algebraic properties of structured context-free languages: old approaches and novel developments, 7th International Conference on Words (WORDS 2009), {{arxiv|0907.2130}}.
*Okhotin, Alexander: [http://users.utu.fi/aleokh/papers/linconj_vs_dcfl.pdf Comparing linear conjunctive languages to subfamilies of the context-free languages], 37th International Conference on Current Trends in Theory and Practice of Computer Science (SOFSEM 2011).

==See also==
[[Model checking]]

==External links==
* [http://www.cis.upenn.edu/~alur/nw.html Nested words and visibly pushdown languages]
* [http://www.cs.uiuc.edu/~madhu/vpa/ Visibly pushdown automata - Automata on nested words]

{{comp-sci-theory-stub}}

[[Category:Words]]
[[Category:Formal languages]]
[[Category:Automata theory]]
