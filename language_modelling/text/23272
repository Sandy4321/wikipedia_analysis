{{otheruses4|the typesetting system|displaying mathematical formulae in Wikipedia|Wikipedia:Editing Math}}
{{Infobox Software
| name = TeX
| logo = [[Image:TeX_logo.svg|200px]]
| developer = [[Donald Knuth]]
| latest_release_version = 3.141592
| latest_release_date = December, [[2002]]
| operating_system = [[Cross-platform]]
| genre = [[Typesetting]]
| license = freely modifiable, as long as the resulting program is not called TeX 
| website = http://www.tug.org/
}}
'''TeX''' ([[International Phonetic Alphabet|IPA]]: {{IPA|/t<U+025B>x/}} as in [[Modern Greek|Greek]], often {{IPA|/t<U+025B>k/}} in [[English language|English]]; written with a lowercase 'e' in imitation of the logo) is a [[typesetting]] system [[Computer programming|created]] by [[Donald Knuth]]. Together with the [[METAFONT]] language for font description and the [[Computer Modern]] [[typeface]], it was designed with two main goals in mind: first, to allow anybody to produce high-quality books using a reasonable amount of effort, and, second, to provide a system that would give the exact same results on all computers, now and in the future.  TeX is [[free software]] and is popular in [[academia]], especially in the [[mathematics]], [[physics]], [[computer science]], economics{{Fact|date=February 2007}}, political science{{Fact|date=February 2007}}, and [[engineering]] [[Community|communities]].  It has largely displaced [[Unix]] [[troff]], the other favored formatter, in many Unix installations, which use both for different purposes.

TeX is considered by most to be the best way to typeset complex mathematical formulae.<ref>Claudio Beccari. [http://www.tug.org/TUGboat/Articles/tb18-1/tb54becc.pdf Typesetting mathematics for science and technology according to ISO31XI]. ''TUGboat'', vol. 18 (1), 1997.</ref> It is now also being used for many other typesetting tasks, especially in the form of [[LaTeX]] and other template packages.

==History==
When the first volume of Knuth's [[The Art of Computer Programming]] was published in [[1969]], it was typeset using [[Monotyping|Monotype]], a technology from the [[19th century]] which produced a <U+201C>''good classic style''<U+201D> appreciated by Knuth. When the second edition of the second volume was published, in [[1976]], the whole book had to be typeset again because the Monotype technology had been largely replaced by photographic techniques, and the original fonts were not available any more.<ref>Donald E. Knuth. ''Digital Typography''. Commemorative lecture for the [[Kyoto Prize]], [[Kyoto]], [[1996]]. Reprinted as chapter 1 of the book ''Digital Typography''.</ref> However, when Knuth received the [[galley proof]]s of the new book on [[30 March]] [[1977]], he found them awful.<ref>''Digital Typography'', p. 5. <U+201C>''I had spent 15 years writing those books, but if they were going to look awful I didn't want to write any more.''<U+201D></ref> Around that time, Knuth saw for the first time the output of a high-quality digital typesetting system, and became interested in digital typography. The disappointing galley proofs gave him the final motivation to solve the problem at hand once and for all by designing his own typesetting system. On [[May 13]], [[1977]], he wrote a memo to himself describing the basic features of TeX.<ref>Donald E. Knuth. ''<tt>TEXDR.AFT</tt>'', chapter 24 of the book ''Digital Typography''.</ref>

He planned to finish it on his [[Sabbatical year|sabbatical]] in [[1978]], but as it happened the language was frozen only in [[1989]], more than ten years later. [[Guy Steele]] happened to be at [[Stanford University|Stanford]] during the summer of [[1978]], when Knuth was developing his first version of TeX.  When Steele returned to [[Massachusetts Institute of Technology|MIT]] that fall, he rewrote TeX's I/O to run under the [[Incompatible Timesharing System|ITS]] operating system. The first version of TeX was written in the [[SAIL programming language]] to run on a [[PDP-10]] under Stanford's [[WAITS]] operating system. For later versions of TeX, Knuth invented the concept of [[literate programming]], a way of producing compilable [[source code]] and high quality cross-linked documentation (typeset in TeX, of course) from the same original file. The language used is called [[WEB]] and produces programs in [[Pascal programming language|Pascal]].

A new version of TeX, rewritten from scratch and called TeX82, was published in [[1982]]. Among other changes, the original [[hyphenation]] algorithm was replaced by a new algorithm written by [[Frank Liang]]. TeX82 also uses [[fixed-point arithmetic]] instead of [[floating-point arithmetic|floating-point]], to ensure reproducibility of the results across different computer hardware,<ref>Knuth and Plass, p. 144</ref> and includes a real, [[Turing completeness|Turing-complete]] programming language, following intense lobbying by [[Guy L. Steele, Jr.|Guy Steele]].<ref>Donald E. Knuth, ''Questions and Answers, III'', NTG: MAPS. '''16''' (1996), 38&ndash;49. Reprinted as chapter 33 of ''Digital Typography'', p. 648.</ref>

In [[1989]], Donald Knuth released new versions of TeX and [[METAFONT]].<ref>Donald E. Knuth. [http://www.tug.org/TUGboat/Articles/tb10-3/tb25knut.pdf ''The New Versions of TeX and METAFONT''], TUGboat '''10''' (1989), 325&ndash;328; '''11''' (1990), 12. Reprinted as chapter 29 of ''Digital Typography''.</ref> Despite his desire to keep the program stable, Knuth realised that 128 different characters for the text input were not enough to accommodate foreign languages; the main change in version 3.0 of TeX is thus the ability to work with 8-bits inputs, allowing 256 different characters in the text input.

Since version 3, TeX has used an idiosyncratic [[Software versioning|version numbering system]], where updates have been indicated by adding an extra digit at the end of the decimal, so that the version number [[Asymptote|asymptotically]] approaches [[Pi|<U+03C0>]]. This is a reflection of the fact that TeX is now very stable, and only minor updates are anticipated. The current version of TeX is 3.141592; it was last updated in December [[2002]]. The design has been frozen after version 3.0, and no new feature or fundamental change will be added after that, so that all newer versions shall contain only [[Software bug|bug]] fixes. Even though Donald Knuth himself has suggested a few areas in which TeX could have been improved, he indicated that he firmly believes that having an unchanged system that will produce the same output now and in the future is more important than introducing new features. For this reason, he has stated that the <U+201C>''absolutely final change (to be made after my death)''<U+201D> will be to change the version number to <U+03C0>, at which point all remaining bugs will become features.<ref>Donald E. Knuth. [http://www.ntg.nl/maps/pdf/5_34.pdf ''The future of TeX and METAFONT''], NTG journal MAPS (1990), 489. Reprinted as chapter 30 of ''Digital Typography'', p. 571.</ref> 
Likewise, versions of METAFONT after 2.0 asymptotically approach [[E (mathematical constant)|e]], and a similar change will be applied after Knuth's death.
<!-- see TeX's bug list for reference -->

However, since the source code of TeX is essentially in the [[public domain]] (see below), other programmers are allowed (and explicitly encouraged) to improve the system, but are required to use another name to distribute the modified TeX, meaning that the source code can still evolve. For example, the [[Omega (TeX)|Omega]] project was developed after [[1991]], primarily to enhance TeX's multilingual typesetting abilities. Donald Knuth himself created <U+201C>unofficial<U+201D> modified versions, such as [[TeX-XeT]], which allows a user to mix texts written in left-to-right and right-to-left [[writing system]]s in the same document.<ref name="tex-xet">Donald E. Knuth and Pierre MacKay. [http://www.tug.org/TUGboat/Articles/tb08-1/tb17knutmix.pdf ''Mixing Right-to-Left Texts with Left-to-Right Texts''], TUGboat '''8''' (1987), 14&ndash;25. Reprinted as chapter 4 of ''Digital Typography''.</ref>

==The typesetting system==
TeX commands commonly start with a [[backslash]] and are grouped with [[Bracket|curly braces]].  However, almost all of TeX's syntactic properties can be changed on the fly which makes TeX input hard to parse by anything but TeX itself. TeX is a [[macro]]- and [[token (parser)|token]]-based language: many commands, including most user-defined ones, are expanded on the fly until only unexpandable tokens remain which get executed.  Expansion itself is practically side-effect free. [[Tail recursion]] of macros takes no memory, and if-then-else constructs are available.  This makes TeX a [[Turing completeness|Turing-complete]] language even at expansion level.

The system can be divided into four levels: in the first, characters are read from the input file and assigned a category code (sometimes called <U+201C>catcode<U+201D>, for short). Combinations of a backslash (really: any character of category zero) followed by letters (characters of category 11) or a single other character are replaced by a control sequence token. In this sense this stage is like lexical analysis, although it does not form numbers from digits. In the next stage, expandable control sequences (such as conditionals or defined macros) are replaced by their replacement text. The input for the third stage is then a stream of characters (including ones with special meaning) and unexpandable control sequences (typically assignments and visual commands). Here characters get assembled into a paragraph.  TeX's paragraph breaking algorithm works by optimizing breakpoints over the whole paragraph. The fourth stage breaks the vertical list of lines and other material into pages.

The TeX system has precise knowledge of the sizes of all characters and symbols, and using this information, it computes the optimal arrangement of letters per line and lines per page. It then produces a [[DVI file format|DVI]] file (<U+201C>DeVice Independent<U+201D>) containing the final locations of all characters. This dvi file can be printed directly given an appropriate printer driver, or it can be converted to other formats.  Nowadays, [[pdfTeX|PDFTeX]] is often used which bypasses DVI generation altogether.

The base TeX system understands about 300 commands, called ''primitives''.<ref>''The TeXbook'', p. 9.</ref> However, these low-level commands are rarely used directly by users, and most functionality is provided by format files (predumped memory images of TeX after large macro collections have been loaded). Knuth's original default format, which adds about 600 commands, is [[Plain TeX]] ([ftp://tug.ctan.org/pub/tex-archive/systems/knuth/lib/plain.tex available from CTAN]). The most widely used format is [[LaTeX]], originally developed by [[Leslie Lamport]], which incorporates document styles for books, letters, slides, etc, and adds support for referencing and automatic numbering of sections and equations. Another widely used format, [[AMS-TeX]], is produced by the [[American Mathematical Society]], and provides many more user-friendly commands, which can be altered by journals to fit with their house style.  Most of the features of AMS-TeX can be used in LaTeX by using the AMS <U+201C>packages<U+201D>.  This is then referred to as [[AMS-LaTeX]]. Other formats include [[ConTeXt]], used primarily for desktop publishing and written mostly by [[Hans Hagen]] at [[PRAGMA Advanced Document Engineering|Pragma]].

===Examples of TeX===

[[Image:LaTeX sample.png|thumb|A sample page produced using TeX with the [[LaTeX]] macros.]]
To write the traditional [[Hello world program]] in plain TeX, create a file ''myfile.tex'' with the following content:
 Hello, World
 \bye          % marks the end of the file; not shown in the final output

By default, everything that follows a percent sign on a line is a comment, ignored by TeX. Running TeX on this file (for example, by typing <code>tex myfile.tex</code> in a [[command line interpreter]], or by calling it from a [[graphical user interface]]) will create an output file called ''myfile.dvi'', representing the content of the page in a '''d'''e'''v'''ice '''i'''ndependent format ([[DVI file format|DVI]]).  The results can either be printed directly from a DVI viewer or converted to a more common format such as [[PostScript]] using the <tt>[[dvips]]</tt> program. This was because TeX natively uses [[bitmap font]]s, which are only designed to display well at one particular size, whereas PostScript typically uses scalable [[PostScript|Type 1 font]]s. It is now possible to make <tt>dvips</tt> output scalable fonts with a bit of tweaking (newer versions of Ghostscript support it). TeX variants such as [[PDFTeX]] produce PDF files directly.

To see TeX further in action, look at its formatting of mathematical formula. For example, to write the well-known [[Quadratic equation#Quadratic formula|quadratic formula]], try entering
 <nowiki>The quadratic formula is $-b \pm \sqrt{b^2 - 4ac} \over 2a$</nowiki>
 \bye

Use TeX as above, and you should get something that looks like
:The quadratic formula is <math>\textstyle{-b \pm \sqrt{b^2 - 4ac} \over 2a}</math>

Notice how the formula is printed in a way a person would write by hand, or typeset the equation. In a document, entering ''mathematics mode'' is done by starting with a $, then entering a formula in TeX semantics and closing again with another $. Knuth explained in a jest that he chose the dollar sign to indicate the beginning and end of mathematical mode in plain TeX because typesetting mathematics was traditionally supposed to be expensive.<ref>Donald E. Knuth, ''The TeXbook'', Ch. 16: Typing Math Formulas, p. 127.</ref> Display mathematics, or mathematics presented centered on a new line is done by using $$. For example, the above with the quadratic formula in display math:

 <nowiki>The quadratic formula is $$-b \pm \sqrt{b^2 - 4ac} \over 2a$$</nowiki>
 \bye

renders as
:The quadratic formula is
<center><math>-b \pm \sqrt{b^2 - 4ac} \over 2a</math></center>

==Novel aspects of TeX==
The TeX software incorporates several aspects that were not available, or were of lower quality, in other typesetting programs at the time when TeX was released. Some of the innovations are based on interesting algorithms, and have led to a number of theses for Knuth's students. While some of these discoveries have now been incorporated into other typesetting programs, others, such as the rules for mathematical spacing, are still unique. 

===Mathematical spacing===
[[Image:AMS Euler sample.png|thumb|280px|right|Mathematical text typeset using TeX and the [[AMS Euler]] font.]]
Since the primary goal of TeX was the high-quality typesetting of his book ''The Art of Computer Programming'', Knuth gave a lot of attention to the choice of proper spacing rules for mathematical formulae. He took three bodies of work that he considered as standards of excellence for mathematical typography: the books typeset by [[Addison-Wesley]], the publisher of ''The Art of Computer Programming'', in particular the work done by [[Hans Wolf]]; editions of the mathematical journal ''[[Acta Mathematica]]'' dating from around [[1910]]; and a copy of ''[[Indagationes Mathematicae]]'', a [[Netherlands|Dutch]] mathematics journal. Knuth looked closely at these examples to derive a set of spacing rules for TeX.<ref>Donald E. Knuth. ''Questions and Answers II'', TUGboat '''17''' (1996), 355&ndash;367. Reprinted as chapter 32 of ''Digital Typography'', p. 620.</ref> While TeX provides some basic rules and the tools needed to specify proper spacing, the exact parameters depend on the font used to typeset the formula. For example, the spacing for Knuth's [[Computer Modern]] fonts has been precisely fine-tuned over the years and is now frozen, but when other fonts, such as [[AMS Euler]], were used by Knuth for the first time, new spacing parameters had to be defined.<ref>Donald E. Knuth. [http://www.tug.org/TUGboat/Articles/tb10-1/tb23knut.pdf ''Typesetting Concrete Mathematics''], TUGboat '''10''' (1989), 31&ndash;36, 342. Reprinted as chapter 18 of ''Digital Typography''.</ref>

===Hyphenation and justification===
In comparison with manual typesetting, the problem of [[Justification (typesetting)|justification]] is easy to solve with a digital system such as TeX, which, provided that good points for line breaking have been defined, can automatically spread the spaces between words to fill in the line. The problem is thus to find the set of breakpoints that will give the most pleasing result. Many line breaking algorithms use a ''first-fit'' approach, where the breakpoints for each line are determined one after the other, and no breakpoint is changed after it has been chosen.<ref>Michael P. Barnett. ''Computer Typesetting: Experiments and Prospects''. [[Cambridge]], [[Massachusetts]]: [[MIT Press]], [[1965]].</ref> Such a system is not able to define a breakpoint depending on the effect that it will have on the following lines. In comparison, the ''total-fit'' line breaking algorithm used by TeX and developed by Donald Knuth and [[Michael Plass]] considers ''all'' the possible breakpoints in a paragraph, and finds the combination of line breaks that will produce the most globally pleasing arrangement. 

Formally, the algorithm defines a value called ''badness'' associated with each possible line break; the badness is increased if the spaces on the line must stretch or shrink too much to make the line the correct width. Penalties are added if a breakpoint is particularly undesirable: for example, if a word must be hyphenated, if two lines in a row are hyphenated, or if a very loose line is immediately followed by a very tight line. The algorithm will then find the breakpoints that will minimize the sum of squares of the badness (including penalties) of the resulting lines. If the paragraph contains <math>n</math> possible breakpoints, the number of situations that must be evaluated naively is <math>2^n</math>. However, by using the method of [[dynamic programming]], the complexity of the algorithm can be brought down to <math>O(n^2)</math>. Further simplifications (for example, not testing extremely unlikely breakpoints such as a hyphenation in the first word of a paragraph) lead to an efficient algorithm whose running time is almost always order of <math>n</math>. However, in general, a thesis by [[Michael Plass]] shows how the page breaking problem can be [[NP-complete]] because of the added complication of placing figures.<ref>Knuth and Plass</ref> A similar algorithm is used to determine the best way to break paragraphs across two pages, in order to avoid [[Widow (typesetting)|widows]] or [[Orphan (typesetting)|orphans]] (lines that appear alone on a page while the rest of the paragraph is on the following or preceding page). 

TeX's line breaking algorithm has been adopted by several other programs, such as [[Adobe InDesign]] [[desktop publishing]] [[Computer application|application]]<ref>[[Advogato]]. [http://www.advogato.org/article/28.html Interview of Donald E. Knuth] (PDF file, also available in [[HTML]] at [http://www.advogato.org/article/28.html]), TUGboat '''21''' (2000), 103&ndash;110.</ref>, and the [[GNU]] [[fmt]] [[Unix]] [[command line]] utility.<ref>GNU Project, ''[http://www.gnu.org/software/textutils/manual/textutils/html_node/textutils_9.html#SEC9 GNU text utilities manual, 4.1 fmt: Reformat paragraph text]''. 2000.</ref>

If no suitable line break can be found for a line, the system will try to [[hyphen|hyphenate]] a word. The original version of TeX used a [[hyphenation algorithm]] based on a set of rules for the removal of prefixes and suffixes of words, and for deciding if it should insert a break between the two consonants in a pattern of the form [[vowel]]&ndash;[[consonant]]&ndash;[[consonant]]&ndash;[[vowel]] (which is possible most of the time).<ref>Liang, p. 3</ref> TeX82 uses a new hyphenation algorithm, designed by [[Frank Liang]] in [[1983]], to assign priorities to breakpoints in letter groups. A list of hyphenation patterns is first generated automatically from a corpus of hyphenated words (a list of 50,000 words). If TeX must find the acceptable hyphenation positions in the word ''encyclopedia'', for example, it will consider all the subwords of the extended word ''.encyclopedia.'', where ''.'' is a special marker to indicate the beginning or end of the word. The list of subwords include all the subwords of length 1 (''.'', ''e'', ''n'', ''c'', ''y'', etc), of length 2 (''.e'', ''en'', ''nc'', etc), etc, up to the subword of length 14, which is the word itself, including the markers. TeX will then look into its list of hyphenation patterns, and find subwords for which it has calculated the desirability of hyphenation at each position. In the case of our word, 11 such patterns can be matched, namely 
<sub>1</sub>c<sub>4</sub>l<sub>4</sub>, <sub>1</sub>cy, <sub>1</sub>d<sub>4</sub>i<sub>3</sub>a, <sub>4</sub>edi, e<sub>3</sub>dia, <sub>2</sub>i<sub>1</sub>a, ope<sub>5</sub>d, <sub>2</sub>p<sub>2</sub>ed, <sub>3</sub>pedi, pedia<sub>4</sub>, y<sub>1</sub>c. For each position in the word, TeX will calculate the ''maximum value'' obtained among all matching pattern, yielding en<sub>1</sub>cy<sub>1</sub>c<sub>4</sub>l<sub>4</sub>o<sub>3</sub>p<sub>4</sub>e<sub>5</sub>d<sub>4</sub>i<sub>3</sub>a<sub>4</sub>. Finally, the acceptable positions are those indicated by an [[even and odd numbers|odd]] number, yielding the acceptable hyphenations ''en-cy-clo-pe-di-a''. This system based on subwords allows the definition of very general patterns (such as <sub>2</sub>i<sub>1</sub>a), with low indicative numbers (either odd or even), which can then be superseded by more specific patterns (such as <sub>1</sub>d<sub>4</sub>i<sub>3</sub>a) if necessary. These patterns find about 90% of the hyphens in the original dictionary; more importantly, they do not insert any spurious hyphen. In addition, a list of exceptions (words for which the patterns do not predict the correct hyphenation) are included with the plain TeX format; additional ones can be specified by the user.<ref>Liang, PhD thesis</ref><ref>''The TeXbook'', Appendix H: Hyphenation, pp. 449&ndash;455.</ref>

===METAFONT===
{{main|METAFONT}}
METAFONT, not strictly part of TeX, is a font description system which allows the designer to describe characters algorithmically. It uses [[Bezier curve]]s in a fairly standard way to generate the actual characters to be displayed, but Knuth devotes lots of attention to the [[font rasterization|rasterizing]] problem on [[Raster graphics|bitmap]]ped displays. Another thesis, by [[John Hobby]], further explores this problem of digitizing <U+201C>brush trajectories<U+201D>. This term derives from the fact that METAFONT describes characters as having been drawn by abstract brushes (and erasers).

It is possible to use TeX and LaTeX without METAFONT. Adobe PostScript (<U+201C>Type 1<U+201D>) fonts may be used instead. (La)TeX expects fonts to be supplied as bitmaps at specific point sizes, while PostScript is a vector (outline) description scalable over a wide range, so this does introduce some minor complications. Nonetheless, with the help of some prewritten packages, (La)TeX can be made to use PostScript fonts. Further note that <U+201C>Type 1<U+201D> or <U+201C>T1<U+201D> can refer in documentation to two very different things: the TeX T1 character encoding scheme to map byte values to glyphs, and Adobe PostScript fonts.

=== TeX macro language ===

TeX provides an unusual [[macro|macro language]]; the definition of a macro not only includes a list of commands but also the syntax of the call. Macros are completely integrated with a full-scale interpreted compile-time language that also guides processing. 

TeX's macro level of operation is lexical, but it is a built-in facility of TeX, that make use of syntax interpretation. Comparing with most widely used [[preprocessor#Lexical pre-processors|lexical preprocessor]] like [[M4 (computer language)]], it differs slightly, as the body of a macro gets tokenized at definition time, that is, it is not completely raw text. Except for a few very special cases, this gives the same behaviour. 

The TeX macro language has been successfully used to extend TeX to, for instance, [[LaTeX]].

==Software==
The original source code for the current TeX software is written in [[WEB]], a mixture of documentation written in TeX and a quite restricted [[Pascal programming language|Pascal]] subset in order to ensure portability. For example, TeX does all of its dynamic allocation itself from fixed-size arrays and uses only [[fixed-point arithmetic]] for its internal calculations.  As a result, TeX has been ported to almost all [[operating system]]s, usually by using the [[web2c]] program to convert the source code into [[C (programming language)|C]] instead of directly compiling the Pascal code. TeX is usually provided in the form of a [[Software distribution|distribution]], an easy-to-install bundle of TeX itself along with [[METAFONT]] and all the necessary fonts, documents formats, and utilities needed to use the typesetting system. On [[Unix|UNIX]]-compatible systems, including [[Linux|GNU/Linux]] and [[Mac OS X]], TeX is distributed in the form of the [[teTeX]] distribution. On [[Microsoft Windows|Windows]], there is the [[MiKTeX]] distribution (enhanced by [http://www.tug.org/protext ProTeX] ) and the [https://xemtex.groups.foundry.supelec.fr/xemtex-web-gb-2-5.html fpTeX] distribution.

Several document processing systems are based on TeX, notably [[jadeTeX]], which uses TeX as a backend for printing from [[James Clark (XML expert)|James Clark]]'s [[DSSSL Engine]], and [[Texinfo]], the [[GNU]] documentation processing system. TeX has been the official typesetting package for the [[GNU|GNU operating system]] since 1984.

[[XeTeX]] is a new TeX engine that supports [[Unicode]]. Originally making use of advanced [[Mac OS X]]-specific font technologies, it now supports [[OpenType]] and is available on Linux and Microsoft Windows.

Numerous extensions and companion programs for TeX exist, among them [[BibTeX]] for bibliographies (distributed with LaTeX), [[pdfTeX|PDFTeX]], which bypasses dvi and produces output in [[Adobe Systems]]' [[Portable Document Format]], and [[Omega (TeX)|Omega]], which allows TeX to use the [[Unicode]] character set. Most TeX extensions are available for free from [[CTAN]], the Comprehensive TeX Archive Network. The [[GNU TeXmacs|TeXmacs]] text editor is a [[WYSIWYG]] scientific text editor that is intended to be compatible with TeX and [[Emacs]]. It uses Knuth's fonts, and can generate TeX output. [[LyX]] is a <U+201C>What You See is What You Mean<U+201D> document processor which runs on a variety of platforms including Linux, Windows (newer versions require Windows 2000 or later) or Mac OS X (using a non-native Qt front-end). [[TeXShop]] for [[Mac OS X]], and [[WinShell]] for [[Microsoft Windows|Windows]] are similar tools and provide integrated development environment (IDE) for working with LaTeX or TeX. [[GNU Emacs]] has various built-in and third party packages with support for TeX, the major one being [[AUCTeX]].  For [[Vim (text editor)|Vim]] there is [http://vim-latex.sourceforge.net/ Vim-LaTeX Suite].

Knuth has kept a very detailed log of all the bugs he has corrected and changes he has made in the program since [[1982]]; as of [[as of 2005|2005]], the list contains 419 entries, not including the version modification that should be done after his death as the final change in TeX.<ref>Donald E. Knuth, [ftp://tug.ctan.org/pub/tex-archive/systems/knuth/errata/tex82.bug List of updates to the TeX82 listing published in September 1982], available on [[CTAN]].</ref><ref>Donald E. Knuth, [ftp://tug.ctan.org/pub/tex-archive/systems/knuth/errata/errorlog.tex Appendix to the ''Errors of TeX'' paper], available on CTAN, last modified in January 2003.</ref> Donald Knuth offers [[Knuth reward check|monetary awards]] to people who find and report a [[Computer bug|bug]] in TeX. The award per bug started at $2.56 (one "hexadecimal dollar"<ref>[http://sunburn.stanford.edu/~knuth/faq.html Frequently Asked Questions] on [http://sunburn.stanford.edu/~knuth/ Don Knuth's webpage]</ref>) and doubled every year until it was frozen at its current value of $327.68. This has not made Knuth poor, however, as there have been very few bugs claimed. In addition, people have been known to frame a check proving they found a bug in TeX instead of cashing it.<ref name="stanfordmag">Kara Platoni, [http://www.stanfordalumni.org/news/magazine/2006/mayjun/features/knuth.html Love at First Byte]. Stanford Magazine, May-June 2006</ref><ref>The [http://www.tug.org/whatis.html History of TeX]</ref>

===License===
Donald Knuth has indicated several times<ref>''The future of TeX and METAFONT'', p. 572 of the book ''Digital Typography''.</ref><ref>Donald E. Knuth. ''Computers and Typesettings'' (available online split into 2 files: [http://www.tug.org/TUGboat/Articles/tb07-2/tb15gordon.pdf] [http://www.tug.org/TUGboat/Articles/tb07-2/tb15knut.pdf]), TUGboat '''7''' (1986), 95<U+2013>98. Reprinted as chapter 28 of ''Digital Typography'', p. 560.</ref> that the source code of TeX has been placed into the public domain, and he strongly encourages modifications or experimentations with this source code. However, since he highly values the reproducibility of the output of all versions of TeX, any changed version must not be called T<sub><big>E</big></sub>X, TeX, or anything confusingly similar. To enforce this rule, any implementation of the system must pass a test suite called the [[TRIP test]] ([ftp://tug.ctan.org/pub/tex-archive/systems/knuth/tex/trip.tex available on CTAN]) before being allowed to be called TeX. The question of license is somewhat confused by the statements included at the beginning of the TeX source code<ref>Donald E. Knuth, ''TeX: The Program''.</ref>, which indicate that <U+201C>''all rights are reserved. Copying of this file is authorized only if (...) you make absolutely no changes to your copy''<U+201D>. However, this restriction should be interpreted as a prohibition to change the source code ''as long as the file is called tex.web''. This interpretation is confirmed later in the source code when the TRIP test is mentioned (<U+201C>''If this program is changed, the resulting system should not be called <U+2018>\TeX<U+2019>''<U+201D>).

[[Richard Stallman]] has a different interpretation of what the license of TeX is, but he agrees that it is a [[free software licence]].<ref>{{cite web|url=http://www.fsfeurope.org/projects/gplv3/tokyo-rms-transcript.en.html#q10|title=Richard Stallman discusses TeX's licence while answering a question about licence compatibility|}}</ref>

The [[American Mathematical Society]] has also claimed a [[trademark]] for TeX, which was rejected, because at the time this was tried (early 1980s), <U+201C>TEX<U+201D> (all caps) was registered by [[Honeywell]] for the <U+201C>Text EXecutive<U+201D> text processing system.<ref>''The TeXbook'', p. 1.</ref>

==Use of TeX==

In several technical fields, in particular computer science, mathematics and physics, TeX has become a de facto standard. Many thousands of books have been published using TeX, including books published by [[Addison-Wesley]], [[Cambridge University Press]], [[Elsevier]], [[Oxford University Press]] or [[Springer Science+Business Media|Springer]]. Numerous journals in these fields are produced using TeX or LaTeX, allowing authors to submit their raw manuscript written in TeX.<ref>Beebe, p.10</ref>

While many publications in other fields, including dictionaries and legal publications, have been produced using TeX, it has not been as successful as in more technical fields, in particular because TeX was primarily designed for mathematics. When he designed TeX, Donald Knuth did not believe that a single typesetting system would fit everyone's needs; instead, he designed many hooks inside the program so that it would be possible to write extensions, and released the source code, hoping that publishers would design versions tailored to their needs. While such extensions have been created (including some by Knuth himself<ref name="tex-xet">Donald E. Knuth and Pierre MacKay. [http://www.tug.org/TUGboat/Articles/tb08-1/tb17knutmix.pdf ''Mixing Right-to-Left Texts with Left-to-Right Texts''], TUGboat '''8''' (1987), 14<U+2013>25. Reprinted as chapter 4 of ''Digital Typography''.</ref>), most people have extended TeX only using macros and it has remained a system associated with technical typesetting.<ref>Donald E. Knuth. ''Questions and Answers I'', TUGboat '''17''' (1996), 7<U+2013>22. Reprinted as chapter 31 of ''Digital Typography'', p. 598.</ref><ref>Donald E. Knuth. ''Questions and Answers II'', TUGboat '''17''' (1996), 355<U+2013>367. Reprinted as chapter 32 of ''Digital Typography'', p. 616<U+2013>617.</ref>

==Pronouncing and writing TeX==
The name TeX is intended to be pronounced <U+201C>tekh<U+201D> ([[International Phonetic Alphabet|IPA]]: {{IPA|/t<U+025B>x/}}), where <U+201C>kh<U+201D> represents European [[Spanish language|Spanish]] ''j'', the sound at the end of [[Scottish English|Scottish]] ''[[loch]]'', or the name of the German composer ''[[Johann Sebastian Bach|Bach]]'' or [[Polish language|Polish]] ''ch'' or [[Arabic language|Arabic]] ''<U+062E>''. The X is meant to represent the [[Greek alphabet|Greek]] letter <U+03C7> ([[chi (letter)|chi]]). TeX is the abbreviation of <U+03C4><U+03AD><U+03C7><U+03BD><U+03B7> (<U+03A4><U+0395><U+03A7><U+039D><U+0397> <U+2013> techn<U+0113>), Greek for both <U+201C>art<U+201D> and <U+201C>craft<U+201D>, which is also the source word of ''technical''.  English speakers often pronounce it <U+201C>tek<U+201D>, like the first syllable of ''technology''.

The name is properly typeset with the <U+201C>E<U+201D> below the baseline and reduced spacing between the letters<ref>Donald E. Knuth. [http://www.tug.org/TUGboat/Articles/tb07-2/tb15knutlogo.pdf ''The TeX Logo in Various Fonts''], [[TUGboat]] '''7''' (1986), 101. Reprinted as chapter 6 of ''Digital Typography''.</ref> (this is done, as Donald Knuth mentions in his TeXBook, to distinguish <U+03A4><sub><big><U+0395></big></sub><U+03A7> from other system names such as TEX, the Text EXecutive processor developed by Honeywell Information Systems); systems that do not support subscript layout and backspacing use the approximation <U+201C><nowiki>TeX</nowiki><U+201D>. Fans like to proliferate names from the word <U+201C>TeX<U+201D> &mdash; such as <nowiki>TeXnician</nowiki> (user of TeX software), <nowiki>TeXpert</nowiki>, <nowiki>TeXhacker</nowiki> (TeX programmer), <nowiki>TeXmaster</nowiki> (competent TeX programmer), <nowiki>TeXhax</nowiki>, and <nowiki>TeXnique</nowiki>.

== References ==

{{refbegin|2}}
* {{FOLDOC}}
* Donald E. Knuth. ''The TeXbook'' ([[Computers and Typesetting]], Volume A). Reading, Massachusetts: Addison-Wesley, 1984. ISBN 0-201-13448-9. The [http://www.ctan.org/tex-archive/systems/knuth/tex/texbook.tex source code of the book in TeX] (and a needed set of macros [ftp://tug.ctan.org/pub/tex-archive/systems/knuth/lib/manmac.tex]) is available online on [[CTAN]]. It is provided only as an example and its use to prepare a book like The TeXbook is not allowed.
* Donald E. Knuth. ''TeX: The Program'' (Computers and Typesetting, Volume B). Reading, Massachusetts: Addison-Wesley, 1986. ISBN 0-201-13437-3. The full source code of TeX; also available on [[CTAN]] at [ftp://tug.ctan.org/pub/tex-archive/systems/knuth/tex/tex.web]. Being written using [[literate programming]], it contains plenty of human-readable documentation.
* Donald E. Knuth. ''Digital Typography'' (CSLI lecture notes, no 78). Center for the Study of Language and Information, 1999. ISBN 1-57586-010-4.
* Donald E. Knuth and Michael F. Plass. ''Breaking Paragraphs Into Lines'', Software &mdash; Practice and Experience '''11''' (1981), 1119&ndash;1184. Reprinted as chapter 3 of ''Digital Typography'', p. 67&ndash;155.
* [[Leslie Lamport]]. ''[[LaTeX]]: A Document Preparation System''. Addison-Wesley, Reading, Massachusetts: Addison-Wesley, 2nd. ed., 1994. ISBN 0-201-52983-1.
* Franklin Mark Liang. ''[http://www.tug.org/docs/liang/ Word Hy-phen-a-tion by Com-put-er]'', [[PhD]] thesis, Department of Computer Science, [[Stanford University]], August [[1983]].
* M.D. Spivak. ''The Joy of TeX'' (2nd edition). American Mathematical Society, 1990. ISBN 0-8218-2997-1. ''Reference on AMS-TeX''.
* Nelson H.F. Beebe. ''[http://www.tug.org/TUGboat/Articles/tb25-1/beebe-2003keynote.pdf 25 Years of TeX and METAFONT: Looking Back and Looking Forward]'', TUGboat '''25''' (2004), 7&ndash;30.
* Michael Vulis, ''Modern TeX and Its Applications'', CRC Press, 1992. ISBN 0-8493-4431-X
{{refend}}

== Notes ==

{{reflist|2}}

== See also ==
{{portalpar|free software}}

* [[List of document markup languages]]
* [[Comparison of document markup languages]]
* [[MathML]]
* [[Formula editor]]
* [[TeX Users Group]]
* [[Texvc]]
* [[PSTricks]]
* [[The PracTeX Journal]]
* [[TUGboat]]
* [[Deutschsprachige Anwendervereinigung TeX]]

== External links ==
{{sisterlinks}}

* [http://refcards.com/docs/silvermanj/tex/tex-refcard-letter.pdf Plain TeX Quick Reference (PDF)]
* [http://www.tex.ac.uk/cgi-bin/texfaq2html?introduction=yes UK TeX Users' Group FAQ]
* Simon Eveson. [http://www.york.ac.uk/depts/maths/tex/texnotes.ps ''An Introduction to Mathematical Document Production Using AmSLaTeX''] ([[PostScript]] file).
*[http://www.tug.org/texshowcase/ The TeX showcase] gallery of typesetting examples
*Eijkhout, Victor. [http://www.eijkhout.net/tbt/ ''TeX by Topic'']
*[ftp://ftp.gwdg.de/pub/dante/info/impatient/book.pdf ''TeX for the Impatient'']
*Walsh, Norman. [http://makingtexwork.sourceforge.net/mtw/ ''Making TeX Work'']

[[Category:Digital typography]]
[[Category:Free TeX software]]
[[Category:Macro programming languages]]
[[Category:Typesetting]]
[[Category:TeX]]
[[Category:Donald Knuth]]

[[ar:<U+062A><U+062E>]]
[[bs:TeX]]
[[bg:TeX]]
[[ca:TeX]]
[[cs:TeX]]
[[da:TeX]]
[[de:TeX]]
[[es:TeX]]
[[eo:TeX]]
[[eu:TeX]]
[[fa:<U+062A><U+06A9>]]
[[fr:TeX]]
[[ko:TeX]]
[[id:TeX]]
[[it:TeX]]
[[lt:Tex]]
[[hu:TeX]]
[[nl:TeX]]
[[ja:TeX]]
[[pl:TeX]]
[[pt:TeX]]
[[ro:TeX]]
[[ru:TeX]]
[[sk:TeX]]
[[sl:TeX]]
[[sr:TeX]]
[[fi:TeX]]
[[sv:TeX]]
[[vi:TeX]]
[[uk:TeX]]
[[vec:TeX]]
[[zh:TeX]]
