The '''IEEE Standard for Floating-Point Arithmetic''' ('''IEEE 754''') is a [[technical standard]] established by the [[Institute of Electrical and Electronics Engineers]] (IEEE) and the most widely used standard for [[floating point|floating-point]] computation, followed by many hardware ([[Central processing unit|CPU]] and [[floating point unit|FPU]]) and software implementations.  Many computer languages allow or require that some or all arithmetic be carried out using IEEE 754 formats and operations. The current version is IEEE 754-2008, which was published in August 2008; it includes nearly all of the original [[IEEE 754-1985]] (which was published in 1985) and the IEEE Standard for [[Radix]]-Independent Floating-Point Arithmetic ([[IEEE 854-1987]]). The international standard ISO/IEC/IEEE 60559:2011 has been approved for adoption through [[ISO/IEC JTC1|JTC1]]/SC 25 under the ISO/IEEE PSDO Agreement<ref>http://grouper.ieee.org/groups/754/email/msg04167.html</ref> and published.<ref>http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=57469</ref>

The standard defines
* ''arithmetic formats:'' sets of [[Binary code|binary]] and [[decimal]] floating-point data, which consist of finite numbers (including [[signed zero]]s and [[subnormal number]]s), [[infinity|infinities]], and special "not a number" values ([[NaN]]s)
* ''interchange formats:'' encodings (bit strings) that may be used to exchange floating-point data in an efficient and compact form
* ''rounding algorithms:'' methods to be used for rounding numbers during arithmetic and conversions
* ''operations:'' arithmetic and other operations on arithmetic formats
* ''[[exception handling]]:'' indications of exceptional conditions (such as [[division by zero]], overflow, ''etc.'')

The standard also includes extensive recommendations for advanced exception handling, additional operations (such as [[trigonometric functions]]), expression evaluation, and for achieving reproducible results.

The standard is derived from and replaces [[IEEE 754-1985]], the previous version, following a seven-year [[IEEE 754 revision|revision process]], chaired by [[Dan Zuras]] and edited by [[Mike Cowlishaw]].  The binary formats in the original standard are included in the new standard along with three new basic formats (one binary and two decimal).  To conform to the current standard, an implementation must implement at least one of the basic formats as both an arithmetic format and an interchange format.

== Formats ==
''Formats'' in IEEE 754 describe sets of floating-point data and encodings for interchanging them.

A given format comprises:

* Finite numbers, which may be either base 2 (binary) or base 10 (decimal).  Each finite number is most simply described by three integers: s= a ''sign'' (zero or one), c= a ''[[significand]]'' (or 'coefficient'), q= an ''exponent''.  The numerical value of a finite number is <br>&nbsp; (&minus;1)<sup>''s''</sup> &times; ''c'' &times; ''b''<sup>''q''</sup> <br>where ''b'' is the base (2 or 10).  For example, if the sign is 1 (indicating negative), the significand is 12345, the exponent is &minus;3, and the base is 10, then the value of the number is &minus;12.345.

* Two infinities: +<U+221E> and &minus;<U+221E>.

* Two kinds of [[NaN]] (quiet and signaling).  A NaN may also carry a ''payload'', intended for diagnostic information indicating the source of the NaN.  The sign of a NaN has no meaning, but it may be predictable in some circumstances.

The possible finite values that can be represented in a given format are determined by the base (''b''), the number of digits in the significand (precision, ''p''), and the exponent parameter ''emax'':
* ''c'' must be an integer in the range zero through ''b''<sup>''p''</sup>&minus;1 (''e.g.'', if ''b''=10 and ''p''=7 then c is 0 through 9999999)
* ''q'' must be an integer such that 1&minus;''emax'' <U+2264> ''q''+''p''&minus;1 <U+2264> ''emax'' (''e.g.'', if ''p''=7 and ''emax''=96 then q is &minus;101 through 90).

Hence (for the example parameters) the smallest non-zero positive number that can be represented is 1&times;10<sup>&minus;101</sup> and the largest is 9999999&times;10<sup>90</sup> (9.999999&times;10<sup>96</sup>), and the full range of numbers is &minus;9.999999&times;10<sup>96</sup> through 9.999999&times;10<sup>96</sup>.  The numbers &minus;''b''<sup>1&minus;''emax''</sup> and ''b''<sup>1&minus;''emax''</sup> (here, &minus;1&times;10<sup>&minus;95</sup> and 1&times;10<sup>&minus;95</sup>) are the smallest (in magnitude) ''normal numbers''; non-zero numbers between these smallest numbers are called [[subnormal number]]s.

Zero values are finite values with significand 0. These are [[signed zero]]s, the sign bit specifies if a zero is +0 (positive zero) or <U+2212>0 (negative zero).

=== Basic formats ===

The standard defines five basic formats, named using their base and the number of bits used to encode them.  A conforming implementation must fully implement at least one of the basic formats.  There are three binary floating-point basic formats (which can be encoded using 32, 64 or 128 bits) and two decimal floating-point basic formats (which can be encoded using 64 or 128 bits).  The [[binary32]] and [[binary64]] formats are the ''single'' and ''double'' formats of [[IEEE 754-1985]].

The precision of the binary formats is one greater than the width of its significand, because there is an implied (hidden) ''1'' bit.

{|class="wikitable"
! Name !! Common name !! Base !! Digits !! E min !! E max !! Notes !! Decimal<br>digits !! Decimal<br>E max
|-
|[[Half precision floating-point format|binary16]]||Half precision||align="right"|2||align="right"|10+1||align="right"|<U+2212>14||align="right"|+15||storage, not basic||align="right"|3.31||align="right"|4.51
|-
|[[Single precision floating-point format|binary32]]||Single precision||align="right"|2||align="right"|23+1||align="right"|<U+2212>126||align="right"|+127|| ||align="right"|7.22||align="right"|38.23
|-
|[[Double precision floating-point format|binary64]]||Double precision||align="right"|2||align="right"|52+1||align="right"|<U+2212>1022||align="right"|+1023|| ||align="right"|15.95||align="right"|307.95
|-
|[[Quadruple precision floating-point format|binary128]]||Quadruple precision||align="right"|2||align="right"|112+1||align="right"|<U+2212>16382||align="right"|+16383|| ||align="right"|34.02||align="right"|4931.77
|-
|[[Decimal32 floating-point format|decimal32]]||||align="right"|10||align="right"|7||align="right"|<U+2212>95||align="right"|+96||storage, not basic||align="right"|7||align="right"|96
|-
|[[Decimal64 floating-point format|decimal64]]||||align="right"|10||align="right"|16||align="right"|<U+2212>383||align="right"|+384|| ||align="right"|16||align="right"|384
|-
|[[Decimal128 floating-point format|decimal128]]||||align="right"|10||align="right"|34||align="right"|<U+2212>6143||align="right"|+6144|| ||align="right"|34||align="right"|6144
|}

Decimal digits is ''digits'' <U+00D7> log<sub>10</sub> ''base'', this gives the precision in decimal.

Decimal E max is ''Emax'' <U+00D7> log<sub>10</sub> ''base'', this gives the maximum exponent in decimal.

All the basic formats are available in both hardware and software implementations.

=== Arithmetic formats ===
A format that is just to be used for arithmetic and other operations need not have an encoding associated with it (that is, an implementation can use whatever internal representation it chooses); all that needs to be defined are its parameters (''b'', ''p'', and ''emax'').  These parameters uniquely describe the set of finite numbers (combinations of sign, significand, and exponent) that it can represent.

=== Interchange formats ===
Interchange formats are intended for the exchange of floating-point data using a fixed-length bit-string for a given format.

For the exchange of binary floating-point numbers, interchange formats of length 16 bits, 32 bits, 64 bits, and any multiple of 32 bits <U+2265>128 are defined.  The 16-bit format is intended for the exchange or storage of small numbers (''e.g.'', for graphics).

The encoding scheme for these binary interchange formats is the same as that of [[IEEE 754-1985]]: a sign bit, followed by ''w'' exponent bits that describe the exponent offset by a ''bias'', and ''p''&minus;1 bits that describe the significand.  The width of the exponent field for a ''k''-bit format is computed as ''w''&nbsp;=&nbsp;floor(4&nbsp;log2(''k''))<U+2212>13.  The existing 64- and 128-bit formats follow this rule, but the 16- and 32-bit formats have more exponent bits (5 and 8) than this formula would provide (3 and 7, respectively).

As with IEEE 754-1985, there is some flexibility in the encoding of signaling NaNs.

For the exchange of decimal floating-point numbers, interchange formats of any multiple of 32 bits are defined.

The encoding scheme for the decimal interchange formats similarly encodes the sign, exponent, and significand, but uses a more complex approach to allow the significand to be encoded as a compressed sequence of decimal digits (using [[Densely Packed Decimal]]) or as a binary integer.  In either case the set of numbers (combinations of sign, significand, and exponent) that may be encoded is identical, and signaling NaNs have a unique encoding (and the same set of possible payloads).

== Rounding algorithms ==
The standard defines five rounding algorithms.  The first two round to a nearest value; the others are called ''[[directed rounding]]s'':

=== Roundings to nearest ===
* '''[[Rounding#Round_half_to_even|Round to nearest, ties to even]]''' &ndash; rounds to the nearest value; if the number falls midway it is rounded to the nearest value with an even (zero) least significant bit, which occurs 50% of the time; this is the default algorithm for binary floating-point and the recommended default for decimal
* '''[[Rounding#Round_half_away_from_zero|Round to nearest, ties away from zero]]''' &ndash; rounds to the nearest value; if the number falls midway it is rounded to the nearest value above (for positive numbers) or below (for negative numbers)

=== Directed roundings ===
* '''Round toward 0''' &ndash; directed rounding towards zero (also known as ''truncation'').
* '''Round toward +<U+221E>''' &ndash; directed rounding towards positive infinity (also known as ''rounding up'' or ''ceiling'').
* '''Round toward &minus;<U+221E>''' &ndash; directed rounding towards negative infinity (also known as ''rounding down'' or ''floor'').

== Operations ==

Required operations for a supported arithmetic format (including the basic formats) include:

* Arithmetic operations (add, subtract, multiply, divide, square root, [[fused multiply<U+2013>add]], remainder, ''etc.'')
* Conversions (between formats, to and from strings, ''etc.'')
* Scaling and (for decimal) quantizing
* Copying and manipulating the sign (abs, negate, ''etc.'')
* Comparisons and total ordering
* Classification and testing for NaNs, ''etc.''
* Testing and setting flags
* Miscellaneous operations.

=== Total-ordering predicate ===

The standard provides a predicate ''totalOrder'' which defines a total ordering for all floating numbers for each format. The predicate agrees with the normal comparison operations when they say one floating point number is less than another. The normal comparison operations however treat NaNs as unordered and compare <U+2212>0 and +0 as equal. The totalOrder predicate will order these cases, and it also distinguishes between different representations of NaNs and between the same decimal floating point number encoded in different ways.

== Exception handling ==
The standard defines five exceptions, each of which has a corresponding status flag that (except in certain cases of underflow) is raised when the exception occurs.  No other action is required, but alternatives are recommended (see below).

The five possible exceptions are:
* Invalid operation (''e.g.'', square root of a negative number)
* Division by zero
* Overflow (a result is too large to be represented correctly)
* Underflow (a result is very small (outside the normal range) and is inexact)
* Inexact.

These are the same five exceptions as were defined in IEEE 754-1985.

== Recommendations ==
=== Alternate exception handling ===
The standard recommends optional exception handling in various forms, including traps (exceptions that change the flow of control in some way) and other exception handling models which interrupt the flow, such as try/catch.  The traps and other exception mechanisms remain optional, as they were in IEEE 754-1985.

=== Recommended operations ===
A new clause in the standard recommends fifty operations, including log, power, and trigonometric functions, that language standards should define.  These are all optional (none are required in order to conform to the standard).  The operations include some on dynamic modes for attributes, and also a set of reduction operations (sum, scaled product, ''etc.'').  All are required to supply a correctly rounded result, but they do not have to detect or report inexactness.

=== Expression evaluation ===
The standard recommends how language standards should specify the semantics of sequences of operations, and points out the subtleties of literal meanings and optimizations that change the value of a result.

=== Reproducibility ===
The IEEE 754-1985 allowed many variations in implementations (such as the encoding of some values and the detection of certain exceptions).  IEEE 754-2008 has tightened up many of these, but a few variations still remain (especially for binary formats).  The reproducibility clause recommends that language standards should provide a means to write reproducible programs (''i.e.'', programs that will produce the same result in all implementations of a language), and describes what needs to be done to achieve reproducible results.

== Character representation ==
The standard requires operations to convert between basic formats and ''external character sequence'' formats. Conversions to and from a decimal character format are required for all formats. Conversion to an external character sequence must be such that conversion back using round to even will recover the original number. There is no requirement to preserve the payload of a NaN or signaling NaN, and conversion from the external character sequence may turn a signaling NaN into a quiet NaN.

The original binary value will be preserved by converting to decimal and back again using:
:5 decimal digits for binary16
:9 decimal digits for binary32
:17 decimal digits for binary64
:36 decimal digits for binary128

For other binary formats the required number of decimal digits is

:1 + ceiling(''p''<U+00D7>log<sub>10</sub>2)

where ''p'' is the number of significant bits in the binary format, e.g. 24 bits for binary32.

Correct rounding is only guaranteed for the number of decimal digits above plus 3 for the largest binary format supported. For instance if binary32 is the largest supported binary format supported, then a conversion from a decimal external sequence with 12 decimal digits is guaranteed to be correctly rounded when converted to binary32; but conversion of a sequence of 13 decimal digits is not.

When using a decimal floating point format the decimal representation will be preserved using:

:7 decimal digits for decimal32
:16 decimal digits for decimal64
:34 decimal digits for decimal128

== See also ==
* [[IEEE 754-1985]]
* [[Minifloat]], low-precision binary floating-point formats following IEEE 754 principles
* [[Half precision]] &ndash; [[Single precision]] &ndash; [[Double precision]] &ndash; [[Quadruple precision]]
* [[IBM System z9]], the first CPU to implement IEEE 754-2008 (using hardware microcode)
* [[IBM z10 (microprocessor)|z10]], a CPU that implements IEEE 754-2008 fully in hardware
* [[POWER6]], a CPU that implements IEEE 754-2008 fully in hardware
*[[Coprocessor]]
*[[strictfp]], a keyword in the [[Java (programming language)]] that ensures IEEE 754 implementation.

==References==
{{Reflist}}

===Standard===
* [http://ieeexplore.ieee.org/servlet/opac?punumber=4610933 IEEE 754-2008 Standard for Floating-Point Arithmetic]
* [http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=57469 ISO/IEC/IEEE 60559:2011]

===Secondary references===
* [http://speleotrove.com/decimal Decimal floating-point] arithmetic, FAQs, bibliography, and links
* [http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm Comparing binary floats]
* [http://babbage.cs.qc.cuny.edu/IEEE-754/References.xhtml IEEE 754 Reference Material]
* [http://speleotrove.com/decimal/854mins.html IEEE 854-1987] &ndash; History and minutes

==Further reading==
* {{cite journal
 |     author = David Goldberg
 |      title = What Every Computer Scientist Should Know About Floating-Point Arithmetic
 |    journal = [[ACM Computing Surveys]]
 |       year = 1991
 |      month = March
 |     volume = 23
 |      issue = 1
 |      pages = 5<U+2013>48
 |        doi = 10.1145/103162.103163
 |        url = http://www.validlab.com/goldberg/paper.pdf
 | accessdate = 2008-04-28
 |      quote =
 }}
* {{cite journal
 |     author = [[Chris Hecker]]
 |      title = Let's Get To The (Floating) Point
 |    journal = Game Developer Magazine
 |       year = 1996
 |      month = February
 |      pages = 19<U+2013>24
 |       issn = 1073-922X
 |        url = http://www.d6.com/users/checker/pdfs/gdmfp.pdf
 | accessdate =
 |      quote =
 }}
*{{cite journal
 |     author = Charles Severance
 |      title = IEEE 754: An Interview with William Kahan
 |    journal = [[IEEE Computer]]
 |       year = 1998
 |      month = March
 |     volume = 31
 |      issue = 3
 |      pages = 114<U+2013>115
 |        doi = 10.1109/MC.1998.660194
 |        url = http://www.freecollab.com/dr-chuck/papers/columns/r3114.pdf
 | accessdate = 2008-04-28
 |      quote =
 }}
* {{cite journal
 |     author = [[Mike Cowlishaw]]
 |      title = Decimal Floating-Point: Algorism for Computers
 |    journal = Proceedings 16th IEEE Symposium on Computer Arithmetic
 |       year = 2003
 |      month = June
 |      pages = 104<U+2013>111
 |       isbn = 0-7695-1894-X
 |        url = http://www.ece.ucdavis.edu/acsel/arithmetic/arith16/papers/ARITH16_Cowlishaw.pdf
 | accessdate = 2008-12-31
 |      quote =
 |     publisher = IEEE Computer Society
 |     location = Los Alamitos, Calif.
 }}.  (Note: ''Algorism'' is not a misspelling of the title; see also [[algorism]].)
* {{cite journal
 |     author = David Monniaux
 |      title = The pitfalls of verifying floating-point computations
 |    journal = [[ACM Transactions on Programming Languages and Systems]]
 |       year = 2008
 |      month = May
 |      pages = article #12
 |     volume = 30
 |      issue = 3
 |        doi = 10.1145/1353445.1353446
 |       issn = 0164-0925
 |        url = http://hal.archives-ouvertes.fr/hal-00128124/en/}}: A compendium of non-intuitive behaviours of floating-point on popular architectures, with implications for program verification and testing.

==External links==
*[http://babbage.cs.qc.cuny.edu/IEEE-754/ Online IEEE 754 binary calculators]
*[http://user.cs.tu-berlin.de/~lordmaik/projects/IEEE754Converter/ieee754.htm IEEE 754 Conversion Applet]

{{IEEE standards}}

[[Category:Computer arithmetic]]
[[Category:IEEE standards]]

[[ar:IEEE 754-2008]]
[[ca:IEEE 754]]
[[cs:IEEE 754]]
[[de:IEEE 754-2008]]
[[es:IEEE coma flotante]]
[[fr:IEEE 754]]
[[ko:IEEE 754]]
[[it:IEEE 754]]
[[hu:IEEE lebeg<U+0151>pontos sz<U+00E1>mform<U+00E1>tum]]
[[nl:IEEE 754]]
[[ja:IEEE 754]]
[[pl:IEEE 754]]
[[ru:IEEE 754-2008]]
[[sr:IEEE 754]]
[[sv:IEEE 754-2008]]
[[tr:IEEE 754]]
[[uk:IEEE 754]]
[[zh:IEEE 754]]
