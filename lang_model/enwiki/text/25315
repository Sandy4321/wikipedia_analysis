{{Infobox Software
| name                   = Microsoft Visual Studio
| logo                   = <!--  Commented out because image was deleted: [[Image:VisualStudio2008Logo.png|The Microsoft Visual Studio 2008 logo.]] -->
| screenshot             = [[Image:VisualStudio2008.png|250px]]
| caption                = Visual Studio 2008 editing a [[C Sharp (programming language)|C#]] program
| developer              = [[Microsoft]]
| released               = 
| frequently_updated     = yes<!-- Release version update? Don't edit this page, just click on the version number! -->
| programming language   = 
| operating system       = [[Microsoft Windows]]
| language               = English, Italian
| genre                  = [[Integrated Development Environment]]
| license                = [[Microsoft]] [[Software license agreement|EULA]]
| website                = [http://msdn.microsoft.com/vstudio/ msdn.microsoft.com/vstudio]
}}
'''Microsoft Visual Studio''' is the main [[Integrated Development Environment]] (IDE) from [[Microsoft]]. It can be used to develop [[Console application|console]] and [[GUI]] applications along with [[Windows Forms]] applications, [[web site]]s, [[web application]]s, and [[web service]]s in both [[native code]] as well as [[managed code]] for all platforms supported by [[Microsoft Windows]], [[Windows Mobile]], [[.NET Framework]], [[.NET Compact Framework]] and [[Microsoft Silverlight]].

Visual Studio includes a [[code editor]] supporting [[IntelliSense]] as well as [[code refactoring]]. The integrated [[Microsoft Visual Studio Debugger|debugger]] works both as a source-level debugger and a machine-level debugger. Other built-in tools include a forms designer for building [[GUI]] applications, web designer, [[class (computing)|class]] designer, and [[database schema]] designer. It allows plug-ins to be added that enhance the functionality at almost every level - including adding support for [[source control]] systems (like [[Subversion (software)|Subversion]] and [[Visual SourceSafe]]) to adding new toolsets like editors and visual designers for [[domain-specific language]]s or toolsets for other aspects of the [[software development lifecycle]] (like the [[Team Foundation Server]] client: Team Explorer).

Visual Studio supports languages by means of language services, which allow any [[programming language]] to be supported (to varying degrees) by the code editor and debugger, provided a language-specific service has been authored. Built-in languages include [[C (programming language)|C]]/[[C++]] (via [[Visual C++]]), [[VB.NET]] (via [[Visual Basic .NET]]), and [[C Sharp (programming language)|C#]] (via [[Visual C Sharp|Visual C#]]). Support for other languages such as [[F Sharp (programming language)|F#]], [[Python (programming language)|Python]], and [[Ruby (programming language)|Ruby]] among others has been made available via language services which are to be installed separately. It also supports [[XML]]/[[XSLT]], [[HTML]]/[[XHTML]], [[JavaScript]] and [[Cascading Style Sheets|CSS]]. Language-specific versions of Visual Studio also exist which provide more limited language services to the user. These individual packages are called Microsoft Visual Basic, Visual J#, Visual C#, and Visual C++.

Currently, Visual Studio 2008 and 2005 Professional Editions, along with language-specific versions (Visual Basic, C++, C#, J#) of Visual Studio 2005 are available to students as downloads free of charge via Microsoft's [[DreamSpark]] program.

==Architecture==
Visual Studio does not support any programming language, solution or tool intrinsically. Instead, it allows various functionality to be plugged in. Specific functionality is coded as a <code>VSPackage</code>. When installed, the functionality is available as a ''Service''. The IDE provides three services: <code>SVsSolution</code> that provides the ability to enumerate projects and solutions, <code>SVsUIShell</code> that provides windowing and UI functionality (including tabs, toolbars and tool windows), and <code>SVsShell</code> that deals with registration of VSPackages. In addition, the IDE is also responsible for co-ordinating and enabling communication between services.<ref name="vsenviron">{{cite web | url = http://msdn2.microsoft.com/en-us/library/bb165114(VS.80).aspx | title = Visual Studio Development Environment Model | publisher = [[Microsoft]] | author = Visual Studio 2005 SDK | accessdate = 2008-01-01}}</ref> All editors, designers, project types and other tools are implemented as VSPackages. Visual Studio uses [[Component Object Model|COM]] to access the VSPackages. The [[Visual Studio SDK]] also includes the ''Managed Package Framework'' (''MPF''), which is a set of [[managed code|managed]] wrappers around the COM-interfaces that allow the Packages to be written in [[.NET languages]].<ref>{{cite web | url = http://msdn2.microsoft.com/en-us/library/bb166554(VS.80).aspx | title = VSPackages and Managed Package Framework (MPF) | publisher = [[Microsoft]] | author = Visual Studio 2005 SDK | accessdate = 2008-01-01}}</ref> However, MPF does not provide all the functionality exposed by the Visual Studio COM interfaces.<ref name="extpage1"/> The services can then be consumed for creation of other packages, which add functionality to the Visual Studio IDE. 

Support for programming languages is added by using a specific VSPackage called a ''Language Service''. A language service defines various interfaces which the VSPackage implementation can implement to add support for various functionality.<ref name = "langserv">{{cite web | url = http://msdn2.microsoft.com/en-us/library/bb166391(VS.80).aspx | title = Language Service Essentials | accessdate = 2008-01-01 | publisher = [[Microsoft]] | author = Visual Studio 2005 SDK}}</ref> Functionality that can be added this way includes syntax coloring, statement completion, brace matching, parameter information tooltips, member lists and error markers for background compilation.<ref name="langserv"/> If the interface is implemented, the functionality will be available for the language. Language services are to be implemented on a per-language basis. The implementations can reuse code from the parser or the compiler for the language.<ref name="langserv"/> Language services can be implemented either in [[native code]] or [[managed code]]. For native code, either the native COM interfaces can be used, or the Babel Framework (part of Visual Studio SDK) be used.<ref>{{cite web | url = http://msdn2.microsoft.com/en-us/library/bb165670(VS.80).aspx | title = Babel Package Overview | publisher = [[Microsoft]] | author = Visual Studio SDK | accessdate = 2008-01-01}}</ref> For managed code, the MPF includes wrappers for writing managed language services.<ref>{{cite web | url = http://msdn2.microsoft.com/en-us/library/bb166360(VS.80).aspx | title = Managed Language Services overview | publisher = [[Microsoft]] | author = Visual Studio SDK | accessdate = 2008-01-01}}</ref>

Visual Studio does not include any [[source control]] support built in but it defines the ''MSSCCI'' (Microsoft Source Code Control Interface) by implementing which source control systems can integrate with the IDE.<ref name="alan">{{cite web | url = http://alinconstantin.dtdns.net/webdocs/scc/MSSCCI.htm | title = Microsoft Source Code Control Interface | author = Alin Constantin | accessdate = 2008-01-03}}</ref> MSSCCI defines a set of functions that are used to implement various source control functionality.<ref>{{cite web | url = http://msdn2.microsoft.com/en-us/library/bb166170(VS.80).aspx | title = Source Control Plug-ins | publisher = [[MSDN]] | author = Visual Studio SDK | accessdate = 2008-01-03}}</ref> MSSCCI was first used to integrate [[Visual SourceSafe]] with Visual Studio 6.0 but was later opened up via the Visual Studio SDK. Visual Studio .NET 2002 used MSSCCI 1.1 and MSSCCI 1.2 was used by Visual Studio .NET 2003. Version 1.3, which adds support for rename and delete propagation as well as asynchronous open, is used by both Visual Studio 2005 and 2008.<ref name="alan"/>

Visual Studio supports running multiple instances of the environment (each with its own set of VSPackages). The instances use different [[Windows Registry|registry hive]]s to store their configuration state are differentiated by their AppId (Application ID). The instances are launched by an AppId-specific <code>.exe</code> that selects the AppId, sets the root hive and launches the IDE. VSPackages registered for one AppId are integrated with other VSPackages for that AppId. The various product editions of Visual Studio are created using the different AppIds. The [[Visual Studio Express]] edition products are installed with their own AppIDs, but the Standard, Professional and [[Visual Studio Team System|Team Suite]] products share the same AppId. Consequently, the Express editions can be installed side-by-side with other editions, unlike the other editions which update the same installation. The professional edition includes a superset of the VSPackages in the standard edition and the team suite includes a superset of the VSPackages in both other editions. The AppId system is leveraged by the [[#Extensibility|Visual Studio Shell]] in Visual Studio 2008.<ref name="codefocus">{{cite web | url = http://www.code-magazine.com/focus/vsx/ | title = Visual Studio Extensibility | publisher = CoDe Magazine | accessdate = 2008-01-01}}</ref>

==Features==
===Code editor===
[[Image:VSIntelliSense.PNG|thumb|The Visual Studio code editor showing [[IntelliSense]] suggestions and a docked ''Task List'' window]]
Visual Studio, like any other [[Integrated Development Environment|IDE]], includes a [[code editor]] that supports [[syntax highlighting]] and [[autocomplete|code completion]] using [[IntelliSense]] for not only [[variable]]s, [[subroutine|function]]s and [[method (computer science)|method]]s but also language constructs like [[loop]]s and [[LINQ|queries]].<ref name="vs2008editor"/> IntelliSense is supported for the included languages, as well as for [[XML]] and for [[Cascading Style Sheets]] and [[JavaScript]] when developing [[web site]]s and [[web application]]s.<ref name="vs2008js">{{cite web | url = http://weblogs.asp.net/scottgu/archive/2007/06/21/vs-2008-javascript-intellisense.aspx | title = VS 2008 JavaScript IntelliSense | author = [[Scott Guthrie]] | accessdate = 2007-12-31}}</ref><ref name="vs2008css">{{cite web | url = http://weblogs.asp.net/scottgu/archive/2007/07/25/vs-2008-web-designer-and-css-support.aspx | title = VS 2008 Web Designer and CSS Support | author = Scott Guthrie | accessdate = 2007-12-31}}</ref> Autocomplete suggestions are popped up in a modeless list box, overlayed on top of the code editor. Visual Studio 2008 onwards, it can be made temporarily semi-transparent to see the code obstructed by it.<ref name="vs2008editor">{{cite web | url = http://weblogs.asp.net/scottgu/archive/2007/07/28/nice-vs-2008-code-editing-improvements.aspx | title = Nice VS 2008 Code Editing Improvements | author = Scott Guthrie | accessdate = 2007-12-31}}</ref> The code editor is used for all supported languages.

The Visual Studio code editor also supports setting bookmarks in code for quick navigation. Other navigational aids include collapsing code blocks and [[incremental search]], in addition to normal text search and [[regular expression|regex]] search.<ref name="feat">{{cite web | url = http://msdn.microsoft.com/msdntv/transcripts/20030327VSNETABTranscript.aspx | title = Visual Studio .NET - Top 10 Code Editor Tips and Tricks | publisher = [[MSDN]] TV | accessdate = 2007-12-31}}</ref> The code editor also includes a multi-item [[clipboard]] and a task list.<ref name="feat"/> The code editor supports code snippets, which are saved templates for repetitive code, that can be inserted into code and customized for the project being worked on. A management tool for code snippets is built in as well. These tools are surfaced as floating windows which can be set to automatically hide when unused or docked to the side of the screen. The Visual Studio code editor also supports [[code refactoring]] including parameter reordering, variable and method renaming, [[interface (computing)|interface]] extraction and encapsulation of class members inside properties, among others.

Visual Studio features background compilation (also called incremental compilation).<ref name="bgcompile">{{cite web | url = http://www.panopticoncentral.net/archive/2004/02/25/276.aspx | title = Background compilation, part 1 | accessdate = 2007-12-31}}</ref><ref name="advbasics">{{cite web | url = http://msdn.microsoft.com/msdnmag/issues/05/06/AdvancedBasics/ | title = Scaling Up: The Very Busy Background Compiler | author = Matthew Gertz | publisher = [[MSDN]] Magazine | accessdate = 2007-12-31}}</ref> As code is being written, Visual Studio compiles it in the background with a view to pointing out compilation errors and warnings on-the-fly. Errors are flagged with a red wavy underline and warnings with a green underline. Background compilation does not generate executable code, and needs a different compiler than the one used to generate executable code.<ref>{{cite web | url = http://blogs.digineer.com/blogs/tabraham/archive/2005/12/09/14.aspx | title = Background Compilation in Visual Studio 2002, 2003 and 2005 | author = Thomas F. Abraham | accessdate = 2007-12-31}}</ref>. Background compilation was initially introduced with [[Microsoft Visual Basic]] but has now been expanded for all included languages.<ref name="advbasics"/>

===Debugger===
{{main|Microsoft Visual Studio Debugger}}
Visual Studio includes a [[debugger]] that works both as a source-level debugger as well as machine-level debugger. It works with both [[managed code]] as well as [[native code]] and can be used for debugging applications written in any language supported by Visual Studio. In addition, it can also attach to running processes and monitor and debug those processes.<ref>{{cite web | title = Attaching to Running Processes | url = http://msdn2.microsoft.com/en-us/library/3s68z0b3(VS.80).aspx | publisher = [[MSDN]] | accessdate = 2007-12-31}}</ref> If source code for the running process is available, it displays the code as it is being run. If source code is not available, it can show the [[disassembly]]. The Visual Studio debugger can also create [[memory dump]]s as well as load them later for debugging.<ref>{{cite web | url = http://msdn2.microsoft.com/en-us/library/d5zhxt22(VS.80).aspx | title = Dumps | publisher = [[MSDN]] | accessdate = 2007-12-31}}</ref> Multi-threaded programs are also supported. The debugger can be configured to be launched when an application running outside the Visual Studio environment, crashes.

[[Image:DataTips.PNG|thumb|Data tooltips in Visual Studio]]
The debugger allows setting breakpoints (which allow execution to be stopped temporarily at a certain position) and watches (which monitor the values of variables as the execution progresses).<ref>{{cite web | url = http://msdn2.microsoft.com/en-us/library/5557y8b4(VS.80).aspx | title = Breakpoint Overview| publisher = [[MSDN]] | accessdate = 2007-12-31}}</ref> Breakpoints can be conditional, that is they get triggered when the condition is met. Code can be stepped over, i.e., run one line (of source code) at a time.<ref name="step">{{cite web | url = http://msdn2.microsoft.com/en-us/library/ek13f001(VS.80).aspx | title = Code Stepping Overview| publisher = [[MSDN]] | accessdate = 2007-12-31}}</ref> It can either ''step into'' functions to debug inside it, or ''step over'' it, i.e., the execution of the function body isn't available for manual inspection.<ref name="step"/> The debugger supports ''Edit and Continue'', i.e., it allows code to be edited as it is being debugged.<ref>{{cite web | url = http://msdn2.microsoft.com/en-us/library/bcew296c(VS.80).aspx | title = Edit and Continue| publisher = [[MSDN]] | accessdate = 2007-12-31}}</ref> When debugging, if any variable is hovered over by the mouse pointer, its current value is displayed in a tooltip ("data tooltips"), where it can also be modified if desired. During coding, the Visual Studio debugger lets certain functions be invoked manually from the <code>Immediate</code> tool window. The parameters to the method are supplied at the Immediate window.<ref>{{cite web | url = http://msdn2.microsoft.com/en-us/library/83hd8f1e(VS.80).aspx | title =  Debugging at Design Time| publisher = [[MSDN]] | accessdate = 2007-12-31}}</ref>

===Designer===
Visual Studio includes a host of visual designers to aid in the development of applications. These tools include:

[[Image:AppDesigner.PNG|thumb|right|Visual Studio 2005 in Designer view]]
[[Image:XAMLDesigner.PNG|thumb|right|The WPF Designer in Visual Studio 2008]]
[[Image:VSWebDes.PNG|thumb|Visual Studio Web Designer in code editor view]]
[[Image:ClassDiagram.PNG|thumb|right|Visual Studio 2005 in Class Designer view]]
;WinForms Designer: The WinForms designer is used to build [[GUI]] applications using [[WinForms]]. It includes a palette of UI [[widget]]s and controls (including buttons, progress bars, labels, layout containers and other controls) that can be dragged and dropped on a form surface. Layout can be controlled by housing the controls inside other containers or locking them to the side of the form. Controls that display data (like textbox, list box, grid view, etc.) can be [[databinding|data bound]] to data sources like [[database]]s or [[LINQ|queries]]. The UI is linked with code using an [[event-driven programming]] model. The designer generates either [[C Sharp (programming language)|C#]] or [[VB.NET]] code for the application.

;WPF Designer: The WPF designer, codenamed ''Cider'',<ref>{{cite web | url = http://www.microsoft.com/downloads/details.aspx?FamilyId=950D1EEC-5D4F-4A15-8250-D26E24B80A5D | title = MSDN TV: Introducing "Cider" - The Visual Studio Designer for WPF ("Avalon") | publisher = [[MSDN]] TV | accessdate = [[2008-01-01]]}}</ref> was introduced with Visual Studio 2008. Like the WinForms designer it supports uses the drag and drop metaphor. It is used to author [[user interface]]s targeting [[Windows Presentation Foundation]]. It supports all WPF functionality including databinding and automatic layout management. It generates [[XAML]] code for the UI. The generated [[XAML]] file is compatible with [[Microsoft Expression Design]], the designer-oriented product. The XAML code is linked with code using a [[code-behind]] model.

;Web designer: Visual Studio also includes a [[web site]] editor and designer that allows web pages to be authored by dragging and dropping widgets. It is used for developing [[ASP.NET]] applications, and supports [[HTML]], [[CSS]] and [[JavaScript]]. It uses a [[code-behind]] model to link with [[ASP.NET]] code. Visual Studio 2008 onwards, the layout engine used by the web designer is shared with [[Microsoft Expression Web]].

;Class designer: The Class Designer is used to author and edit the classes (including its members and their access) using [[Unified_Modeling_Language|UML]] modeling. The Class Designer can generate [[C Sharp (programming language)|C#]] and [[VB.NET]] code outlines for the classes and methods. It can also generate class diagrams from hand-written classes.

;Data designer: The data designer can be used to graphically edit [[database schema]]s, including typed tables, primary and foreign keys and constraints. It can also be used to design queries from the graphical view.

;Mapping designer: Visual Studio 2008 onwards, the mapping designer is used by [[Language Integrated Query|LINQ to SQL]] to design the [[Object-Relational mapping|mapping]] between  [[database schema]]s and [[class (computing)|class]]es that encapsulate the data.

===Other tools===
;Open Tabs Browser: The open tabs browser is used to list all open tabs and switch between them. It is invoked using <code>CTRL+TAB</code>.

;Properties Editor: The ''Properties Editor'' tool is used to edit properties in a GUI pane inside Visual Studio. It lists all available properties (both read-only and those which can be set) for all objects including [[class (computing)|class]]es, forms, web pages and other items.
[[Image:WinExpl.PNG|thumb|Open Tab Browser and Properties Editor]]

;Object Browser: The ''Object Browser'' is a [[namespace]] and [[class library]] browser for [[Microsoft .NET]]. It can be used to browse the namespaces (which are arranged hierarchically) in [[managed code|managed]] [[.NET assembly|assemblies]]. The hierarchy may or may not reflect the organization in the file system.

;Solution Explorer: In Visual Studio parlance, a solution is a set of code files and other resources that are used to build an application. The files in a solution are arranged hierarchically, which might or might not reflect the organization in the file system. The ''Solution Explorer'' is used to manage and browse the files in a solution.

;Team Explorer: ''Team Explorer'' is used to integrate the capabilities of [[Team Foundation Server]], the [[Revision Control System]] into the IDE (and the basis for Microsoft's [[CodePlex]] hosting environment for open source projects). In addition to source control it provides the ability to view and manage individual work items (including bugs, tasks and other documents) and to browse [[Team Foundation Server|TFS]] statistics. It is included as part of a TFS install and is also available as a download for Visual Studio 2005<ref>{{cite web | url = http://download.microsoft.com/download/2/a/d/2ad44873-8ccb-4a1b-9c0d-23224b3ba34c/VSTFClient.img | title = Team Explorer 2005 (.img file)| publisher = [[Microsoft]] | accessdate = 2007-03-05}}</ref> and 2008.<ref>{{cite web | url = http://www.microsoft.com/downloads/details.aspx?familyid=0ed12659-3d41-4420-bbb0-a46e51bfca86&displaylang=en | title = Visual Studio Team System 2008 Team Explorer | publisher = [[Microsoft]] | accessdate = 2007-03-05}}</ref>. Team Explorer is also available as a stand-alone environment solely to access TFS services. 

;Data Explorer: ''Data Explorer'' is used to manage databases on [[Microsoft SQL Server]] instances. It allows creation and alteration of database tables (either by issuing [[T-SQL]] commands or using the Data designer). It can also be used to create [[database query|queries]] and [[stored procedure]]s, with the latter in either [[T-SQL]] or in [[managed code]] via [[SQL CLR]]. Debugging and [[IntelliSense]] support is available as well.

;Server Explorer: The ''Server Explorer'' tool is used to manage database connections on an accessible computer. It is also used to browse running [[Windows Service]]s, performance counters, [[Windows Event Log]] and [[message queue]]s and use them as datasource.<ref>{{cite web | url = http://support.microsoft.com/kb/316649 | title = How to use the Server Explorer in Visual Studio .NET and Visual Studio 2005 | accessdate = 2008-01-01 | publisher = [[Microsoft]]}}</ref>

===Extensibility===
:{{See also|List of Microsoft Visual Studio Add-ins}}
Visual Studio allows developers to write extensions for Visual Studio to extend its capabilities. These extensions "plug into" Visual Studio and extend its functionality. Extensions come in the form of ''macros'', [[List of Microsoft Visual Studio Add-ins|''add-ins'']], and ''packages''. Macros represent repeatable tasks and actions that developers can record programmatically for saving, replaying, and distributing. Macros, however, cannot be used to implement new commands or create tool windows. They are written using [[Visual Basic]] and are not compiled.<ref name="extpage1">{{cite web | url = http://www.codeguru.com/csharp/.net/net_vs_addins/visualstudioadd-ins/article.php/c11835/ | title = Extending Visual Studio 2005 | author = Vijay Mehta | publisher = CodeGuru | accessdate = 2008-01-01}}</ref> Add-Ins provide access to the Visual Studio object model and can interact with the IDE tools. Add-Ins can be used to implement new functionality and can add new tool windows. Add-Ins are plugged in to the IDE via [[Component Object Model|COM]] and can be created in any COM-compliant languages.<ref name="extpage1"/> Packages are created using the Visual Studio [[Software Development Kit|SDK]] and provide the highest level of extensibility. It is used to create designers and other tools, as well as to integrate other programming languages. The Visual Studio SDK provides both unmanaged as well as a managed [[API]] to accomplish these tasks. However, the managed API isn't as comprehensive as the unmanaged one.<ref name="extpage1"/> Extensions are supported in the Standard (and higher) versions of Visual Studio 2005. [[Visual Studio Express|Express Edition]]s do not support hosting extensions.

Visual Studio 2008 introduced the '''Visual Studio Shell''' that allows for development of a customized version of the IDE. The Visual Studio Shell defines a set of VSPackages that provide the functionality required in any IDE. On top of that, other packages can be added to customize the installation. The Isolated mode of the shell creates a new AppId where the packages are installed. These are to be started with a different executable. It is aimed for development of custom development environments, either for a specific language or a specific scenario. The Integrated mode installs the packages into the AppId of the Professional/Standard/Team System editions, so that the tools integrate into these editions.<ref name="codefocus"/> The Visual Studio Shell is available as a free download.

==Supported products==
===Included products===
;[[Visual C++|Microsoft Visual C++]]: Microsoft Visual C++ is [[Microsoft]]'s implementation of the [[C (programming language)|C]] and [[C++]] [[compiler]] and associated languages services and specific tools for integration with the Visual Studio IDE. It can compile either in C mode or C++ mode. For C, it follows the [[C (programming language)#ANSI C and ISO C|ISO C]] standard with parts of [[C99]] spec<ref>{{cite web | url = http://blogs.msdn.com/vcblog/archive/2007/11/05/iso-c-standard-update.aspx | title = ISO C Standard Update | publisher = [[MSDN]] Blogs | author = Visual C++ Team | accessdate = 2008-01-02}}</ref> along with MS-specific additions in the form of libraries. For C++, it follows the [[ANSI C++]] spec along with a few [[C++0x]] features.<ref>{{cite web | url = http://blogs.msdn.com/vcblog/archive/2007/06/04/update-on-the-c-0x-language-standard.aspx | title = Update On The C++-0x Language Standard | publisher = [[MSDN]] Blogs | author = Visual C++ team}}</ref> It also supports the [[C++/CLI]] spec to write [[managed code]], as well as mixed mode code (a mix of [[native code|native]] and [[managed code]]). Microsoft positions Visual C++ for development in native code or code that needs contains both native as well as managed components. Visual C++ supports [[Component Object Model|COM]] as well as the [[Microsoft Foundation Classes|MFC]] library. For MFC development, it provides a set of wizards for creating and customizing MFC boilerplate code, and creating GUI applications using MFC. Visual C++ can also use the Visual Studio forms designer to design UI graphically. Visual C++ can also be used with the [[Windows API]]. It also supports the use of ''intrinsic functions'',<ref>{{cite web | url = http://msdn2.microsoft.com/en-us/library/26td21ds(VS.80).aspx | title = Compiler Intrinsics | publisher = [[MSDN]] | accessdate = 2008-01-02}}</ref> which are functions recognized by the compiler itself and not implemented as a library. Intrinsic functions are used to expose the [[SSE]] instruction set of modern CPUs. Visual C++ also includes the [[OpenMP]] (version 2.0) spec.<ref>{{cite web | url = http://msdn2.microsoft.com/en-us/library/tt15eb9t(VS.80).aspx | title = OpenMP in Visual C++ | publisher = [[MSDN]] | accessdate = 2008-01-02}}</ref> 

;[[Visual C Sharp|Microsoft Visual C#]]: Microsoft Visual C# is [[Microsoft]]'s implementation of the [[C Sharp (programming language)|C#]] language, that targets the [[.NET Framework]], along with the language services that lets the Visual Studio IDE support C# projects. While the language services are a part of Visual Studio, the compiler is available separately as a part of the [[.NET Framework]]. The Visual C# 2008 compiler supports version 3.0 of the C# language specifications. Visual C# supports the Visual Studio Class designer, Forms designer, and Data designer among others.

;[[Visual Basic .NET|Microsoft Visual Basic]]: Microsoft Visual Basic is [[Microsoft]]'s implementation of the [[VB.NET]] language and associated tools and language services. It was introduced with Visual Studio .NET (2002). Microsoft has positioned Visual Basic for [[Rapid Application Development]]. Visual Basic can be used to author both console applications as well as GUI applications. Like Visual C#, Visual Basic also supports the Visual Studio Class designer, Forms designer, and Data designer among others. Like C#, the VB.NET compiler also is available as a part of [[.NET Framework]] but the language services, that let VB.NET projects be developed with Visual Studio, are available as a part of the latter.

;Microsoft Visual Web Developer: Microsoft Visual Web Developer is used to create [[web site]]s, [[web application]] and [[web service]]s using [[ASP.NET]]. Either [[C Sharp (programming language)|C#]] or [[VB.NET]] languages can be used. Visual Web Developer can use the Visual Studio Web Designer to graphically design web page layouts.

;[[Team Foundation Server]]: Included only with [[Visual Studio Team System]], Team Foundation Server acts as the server side backend providing [[source control]], data collection, [[reporting]], and project tracking functionality. intended for collaborative [[software development]] projects. It also includes the ''Team Explorer'', the client tool for TFS services, which is integrated inside Visual Studio Team System.

===Previous products===
;[[Visual FoxPro]]: Visual FoxPro is a data-centric [[object-oriented]] and [[Procedural programming|procedural]] [[programming language]] produced by [[Microsoft]]. It is derived from [[FoxPro 2|FoxPro]] (originally known as '''FoxBASE''') which was developed by Fox Software beginning in 1984. Visual FoxPro is tightly integrated with its own relational database engine, which extends FoxPro's xBase capabilities to support [[SQL]] query and data manipulation. Unlike most [[database management systems]], Visual FoxPro is a full-featured, [[dynamic programming language]] that does not require the use of an additional general-purpose programming environment. Microsoft has stated that Visual FoxPro has been discontinued after version 9.<ref>{{cite web | url = http://msdn2.microsoft.com/en-us/vfoxpro/bb308952.aspx | title = A Message to the Community | publisher = [[MSDN]] | accessdate = 2008-01-02}}</ref>

;[[Visual SourceSafe]]: Microsoft Visual SourceSafe is a [[source control]] [[software]] package oriented towards small software development projects. SourceSafe was initially not a client/server [[Source Code Management|SCM]]; version 6.0 could only be used locally in a single user system. With Visual SourceSafe 2005, a [[client-server]] mode was added, whereby a SourceSafe repository can be shared using [[Server Message Block|SMB]] shared. Visual SourceSafe 6.0 was included with Visual Studio 6.0, whereas Visual SourceSafe 2005 was available as a stand-alone product and included with the 2005 Team Suite. [[Visual Studio Team System]] included [[Team Foundation Server]] for [[source control]].

;[[Visual J++|Microsoft Visual J++]]/[[Visual J Sharp|Microsoft Visual J#]]: Microsoft Visual J++ was [[Microsoft]]'s implementation of the [[Java (programming language)|Java]] language (with Microsoft-specific extensions) and associated language services. It was discontinued as a result of a litigation from [[Sun Microsystems]], and the technology was recycled into Visual J#, Microsoft's Java compiler for [[.NET Framework]]. J# was available with Visual Studio 2005 but with version 2008, it has been discontinued.

;[[Visual InterDev]]: Visual InterDev is used to create web applications using Microsoft Active Server Pages ([[Active Server Pages|ASP]]) technologies. It supports code completion and includes [[database]] server management tools. It has been replaced with Microsoft Visual Web Developer.

===Other products===
;[[F Sharp (programming language)|F#]]: F# is a [[multi-paradigm programming language|multi-paradigm]] [[programming language]], targeting the [[.NET Framework]], that encompasses [[functional programming]] as well as [[imperative programming|imperative]] [[object-oriented programming]] disciplines. It is a variant of [[ML (programming language)|ML]] and is largely compatible with the [[OCaml]] implementation. F# was intially developed by [[Don Syme]] at [[Microsoft Research]] but is now being developed at [[Microsoft]] Developer Division and will be productized as a fully supported language in the [[.NET Framework]] and [[Microsoft Visual Studio|Visual Studio]] ecosystem.<ref>{{cite web | url = http://blogs.msdn.com/somasegar/archive/2007/10/17/f-a-functional-programming-language.aspx | title = F# - A functional Programming Language | author = S. Somasegar | accessdate = 2007-10-18}}</ref>.

;[[IronPython]]: IronPython is [[Microsoft]]'s implementation of the [[Python (programming language)|Python]] compiler for the [[.NET Framework]]. While the IronPython distribution does not include any language services to integrate with the Visual Studio IDE, the Visual Studio SDK includes the language services to do so.<ref>{{cite web | url = http://blogs.msdn.com/aaronmar/archive/2006/02/16/a-bit-more-on-ironpython.aspx | title = A bit more on IronPython| author = Aaron Marten | publisher = [[MSDN]] Blogs | accessdate = 2008-01-02}}</ref> With Visual Studio 2008, IronPython language services are implemented on top of the Visual Studio Shell as '''IronPython Studio'''.<ref>{{cite web | url = http://blogs.msdn.com/vsxteam/archive/2007/12/14/IronPython-Studio-for-VS-2008-Shell-released.aspx | title = IronPython Studio for VS 2008 Shell Released | author = VSX Team | publisher = [[MSDN]] blog | accessdate = 2008-01-02}}</ref> It can be installed in either integrated mode or isolated mode.

;[[IronRuby]]: IronRuby is [[Microsoft]]'s implementation of the [[Ruby (programming language)|Ruby]] [[programming language]] for the [[.NET Framework]], built on top of the [[Dynamic Language Runtime]]. While the official distributions do not include any language services to integrate it into Visual Studio IDE, language services - to integrate with Visual Studio's code editing, syntax highlighting and debugging support - are available from third parties.<ref>{{cite web | url = http://www.wilcob.com/wilco/News/IronRuby-integration-with-VisualStudio.aspx | author = Wilco Bauwer | title = IronRuby integration with Visual Studio | accessdate = 2008-03-24}}</ref>

==Editions==
[[Image:Visual Studio Editions.svg|thumb|right|225px|Diagram showing the relationship of various Visual Studio Editions]]
Microsoft Visual Studio is available in the following editions:<ref>{{cite web | url = http://technet.microsoft.com/en-us/library/zcbsd3cz(VS.80).aspx | title = Visual Studio Editions | publisher = TechNet | accessdate = 2008-01-03}}</ref>

;[[Visual Studio Express]]: Visual Studio Express Editions are a set of free lightweight individual IDEs which are provided as stripped-down versions of the Visual Studio IDE on a per-language basis, i.e., it installs the language services for the supported languages onto individual Visual Studio Shell AppIds. It includes only a small set of tools as compared to the other systems - devoid of remote database support for data designer, class designer and several other tools and features as well as support for plug-ins. [[x64]] compilers are not available for the Visual Studio Express edition IDEs. Microsoft targets the Express IDEs at students and hobbyists. Express editions also do not use the full [[MSDN Library]] but use the MSDN Express Library. The languages available as part of the Express IDEs are:
::*'''Visual Basic Express'''
::*'''Visual C++ Express'''
::*'''Visual C# Express'''
::*'''Visual Web Developer Express'''

;Visual Studio Standard: Visual Studio Standard Edition provides an integrated IDE for all supported products and can support the entire [[MSDN]] library. It supports [[XML]] and [[XSLT]] editing, [[object (computing)|object]] [[test bench]]es, and can create deployment packages that only use [[ClickOnce]]. However, it does not include tools like Server Explorer or include integration with [[Microsoft SQL Server]]. Visual Studio Standard can only consume Add-Ins for extensibility. Mobile development support was included in Visual Studio 2005 Standard, however, with Visual Studio 2008, it is only available in Professional and higher editions.  Remote debugging support is included in Visual Studio 2008 Standard Edition.

;Visual Studio Professional: Visual Studio Professional Edition includes the tools in Visual Studio Standard and augments it with other functionality such as [[Microsoft SQL Server]] integration (which lets databases to be created from within Visual Studio) and a remote debugger (for 2005 Editions) (that allows debugging a remote system from within Visual Studio debugger provided a debugging server is running on the remote system). Visual Studio Professional accepts all three extensibility mechanisms.

;[[VSTO|Visual Studio Tools for Office]]: Visual Studio Tools for Office is an SDK and an add-in for Visual Studio that includes tools for developing for the [[Microsoft Office]] platform. Previously, that is, for Visual Studio .NET 2003 and Visual Studio 2005, it was a separate SKU that supported only [[Visual C Sharp|Visual C#]] and [[Visual Basic .NET|Visual Basic]] languages or was included in the Team Suite. With Visual Studio 2008, it is no longer a separate SKU but is included with Professional and higher editions. A separate runtime is required when deploying VSTO solutions.

;[[Visual Studio Team System]]: Visual Studio Team System provides a set of software development, collaboration, metrics, and reporting tools in addition to the features provided by Visual Studio Professional. VSTS offers different toolsets based on the software development role it is being used for. The role-specific flavors are:<ref>{{cite web |url = http://msdn2.microsoft.com/en-us/vsts2008/products/bb933734.aspx | title = Visual Studio Team System | publisher = TechNet | accessdate = 2008-01-03}}</ref> <ref> [http://blogs.msdn.com/robcaron/archive/2007/07/26/4069573.aspx Name changes for Team System products] </ref>
::*'''Team Explorer''' (basic TFS client)
::*'''Architecture Edition'''
::*'''Database Edition'''
::*'''Development Edition'''
::*'''Test Edition'''

:The combined functionality of the four Team System Editions is provided in a '''Team Suite''' Edition.

:Along with the client SKUs, Visual Studio Team System also includes [[Team Foundation Server]] for source code control, work-item tracking, reporting and team management. Team Explorer is the TFS client, which is integrated into the VSTS IDE, with other application development functionality. 

;Editions feature grid<ref>
{{cite web 
| url = http://msdn2.microsoft.com/en-us/vs2008/products/cc149003.aspx 
| title =  Visual Studio 2008 Product Comparison 
| accessdate = 2008-02-07}}</ref> 

{| class="wikitable" style="font-size: smaller; text-align: center"
!Product
!Extensions
!External Tools
!Setup Projects
!MSDN Integration
!Class Designer
!Refactoring
!Debugging
!Target Native 64 bit
!Visual Studio Tools for Office
|-
! style="width: 20em; text-align: left" | [[Visual Studio Express]]
|{{no}}
|{{depends|minimal}}
|{{depends|reduced functionality}}
|{{depends|MSDN Express}}
|{{no}}
|{{depends|reduced functionality}}
|{{depends|reduced functionality}}
|{{no}}
|{{no}}
|-
! style="width: 20em; text-align: left" | Visual Studio Standard
|{{yes}}
|{{yes}}
|{{depends|reduced functionality}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{no}}
|-
! style="width: 20em; text-align: left" | Visual Studio Professional
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|-
! style="width: 20em; text-align: left" | [[Visual Studio Team System|Visual Studio Team System for Software Developers]]
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|-
! style="width: 20em; text-align: left" | [[Visual Studio Team System|Visual Studio Team System for Software Testers]]
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|-
! style="width: 20em; text-align: left" | [[Visual Studio Team System|Visual Studio Team System for Database Professionals]]
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|-
! style="width: 20em; text-align: left" | [[Visual Studio Team System|Visual Studio Team System for Software Architects]]
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|-
! style="width: 20em; text-align: left" | [[Visual Studio Team System|Visual Studio Team Suite]]
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|}

==Version history==
===Visual Studio 97===
Microsoft first released Visual Studio in 1997, bundling together many of its programming tools for the first time. Visual Studio 97 was released in two editions, Professional and Enterprise. It included Visual Basic 5.0 and Visual C++ 5.0, primarily for Windows programming; Visual J++ 1.1 for Java and Windows programming; and Visual FoxPro 5.0 for database, specifically xBase programming. It introduced Visual InterDev for creating dynamically generated web sites using [[Active Server Pages]]. A snapshot of the [[Microsoft Developer Network]] [[MSDN Library|library]] was also included.

Visual Studio 97 was Microsoft's first attempt at using the same development environment for multiple languages. Visual C++, Visual J++, InterDev, and the [[MSDN Library]] all used one environment, called Developer Studio. Visual Basic and Visual FoxPro used separate environments.<ref name="codefocus"/>

===Visual Studio 6.0===
The next version, version 6.0, was released in June 1998 and is the last version to run on the [[Win9x]] platform.<ref>{{cite web | url = http://msdn2.microsoft.com/en-us/vstudio/aa700918.aspx | title = System Requirements (Visual Studio 6.0) | publisher = [[MSDN]] | accessdate = 2008-01-02}}</ref> The version numbers of all of its constituent parts also moved to 6.0, including Visual J++ which jumped from 1.1, and Visual InterDev which was at 1.0. This version was the basis of Microsoft's development system for the next four years, as Microsoft transitioned their development focus to the [[.NET Framework]].

Visual Studio 6.0 was the last version to include Visual Basic as most of its programmers knew it; subsequent versions would include a quite different version of the language based on .NET. It was also the last version to include Visual J++, which included deeper ties to Windows and proprietary extensions to the Java language that were incompatible with Sun's version. This caused Sun to sue Microsoft. As part of the settlement, Microsoft would no longer sell programming tools that targeted the Java Virtual Machine.

Visual Basic, Visual C++, and Visual FoxPro had their own IDE environments, while Visual J++ and Visual InterDev shared a common new environment. This new IDE environment was designed with extensibility in mind and would go on to become the integrated IDE for all languages with the release of Visual Studio .NET.<ref name="codefocus"/> Visual Studio 6.0 was also the last version to include Visual FoxPro.

===Visual Studio .NET (2002)===
[[Image:MSVisual_Studio.png|thumb|right|The Microsoft Visual Studio .NET logo.]]

Microsoft released Visual Studio .NET, codenamed ''Rainier'' (for [[Washington|Washington's]] [[Mount Rainier]]), in [[February 2002]] (the [[Development stage#Beta|beta version]] was released on the [[MSDN|Microsoft developer network]] in 2001). The biggest change was the introduction of a [[managed code]] development environment using the [[.NET Framework]]. Programs developed using .NET are not compiled to [[machine language]] (like C++ is, for example) but instead to a format called [[Microsoft Intermediate Language]] (MSIL) or [[Common Intermediate Language]] (CIL). When an MSIL application is executed, it is [[Just-in-time compilation|compiled while being executed]] into the appropriate machine language for the platform it is being executed on, thereby making code portable across several platforms. Programs compiled into MSIL can be executed only on platforms which have an implementation of [[Common Language Infrastructure]]. It is possible to run MSIL programs in [[Linux]] or [[Mac OS X]] using non-Microsoft .NET implementations like [[Mono (software)|Mono]] and [[DotGNU]].

This was the first version of Visual Studio to require an [[Windows NT|NT]]-based Windows platform.<ref>{{cite web | url = http://msdn2.microsoft.com/en-us/vstudio/aa700866.aspx | title = System Requirements (Visual Studio .NET)| publisher = [[MSDN]] | accessdate = 2008-01-02}}</ref> The installer enforces this requirement.

Microsoft introduced [[C Sharp (programming language)|C#]] (C-sharp), a new programming language, that targets .NET. It also introduced the successor to Visual J++ called Visual J#. Visual J# programs use Java's language syntax. However, unlike Visual J++ programs, Visual J# programs can only target the .NET Framework, not the [[Java Virtual Machine]] that all other Java tools target.

Visual Basic was drastically changed to fit the new framework, and the new version was called Visual Basic .NET. Microsoft also added extensions to C++, called [[Managed Extensions for C++]], so that C++ programmers could create .NET programs.

Visual Studio .NET can be used to make applications targeting Windows (using [[Windows Forms]], part of the .NET Framework), Web (using [[ASP.NET]] and [[Web Services]]) and, with an add-in, portable devices (using the [[.NET Compact Framework]]).

The Visual Studio .NET environment was rewritten to partially use .NET. All languages are unified under one environment. Compared to previous versions of Visual Studio, it has a cleaner interface and greater cohesiveness. It is also more customizable with tool windows that automatically hide when not in use. While Visual FoxPro 7 started out as part of Visual Studio 7, and early VS betas allowed debugging inside VFP-based DLLs, it was removed before release to follow its own development track.

The internal version number of Visual Studio .NET is version 7.0. Microsoft released Service Pack 1 for Visual Studio .NET 2002 in [[March]], [[2005]].<ref>{{cite web | url = http://www.microsoft.com/downloads/details.aspx?FamilyID=c41d8159-b42f-4d06-a797-e510494976ee&displaylang=en | title = Visual Studio .NET 2002 SP1 | publisher = [[Microsoft]] | accessdate = 2008-01-02}}</ref>.

===Visual Studio .NET 2003===
In [[April 2003]], Microsoft introduced a minor upgrade to Visual Studio .NET in 2003 called Visual Studio .NET 2003, codenamed ''Everett'' (for the [[Everett, Washington|city of the same name]]). At that point, it referred to the previous version as Visual Studio .NET 2002. It included an upgrade to the .NET Framework, version 1.1. It also came with built-in support for developing programs for mobile devices, using either ASP.NET or the .NET Compact Framework. As well, the Visual C++ compiler was improved to be more standards-compliant, especially in the area of [[partial template specialization]]. Visual C++ Toolkit 2003, a free version of the same C++ compiler shipped with Visual Studio .NET 2003 without the IDE, though it is no longer available and now superseded by the Express Editions. The internal version number of Visual Studio .NET 2003 is version 7.1 while the file format version is 8.0.<ref name="hacks"/>

Microsoft released Service Pack 1 for Visual Studio 2003 on [[September 13]], [[2006]].<ref>{{cite web | url = http://www.microsoft.com/downloads/details.aspx?familyid=69D2219F-CE82-46A5-8AEC-072BD4BB955E&displaylang=en | title = Microsoft Visual Studio .NET 2003 Service Pack 1 | publisher = [[Microsoft]] | accessdate = 2008-01-02}}</ref>

Visual Studio .NET 2002 and 2003 shipped in four editions: Academic, Professional, Enterprise Developer, and Enterprise Architect. The Visual Studio .NET 2003 Enterprise Architect edition included an implementation of [[Microsoft Visio]] 2002's modeling technologies, which focused on creating [[Unified Modeling Language]]-based visual representations of an application's architecture. "Enterprise Templates" were also introduced, to help larger development teams standardize coding styles and enforce policies around component usage and property settings. Visual Studio 2005 Team Suite included Visio for Enterprise Architects 2005 (VEA 2005) based on Visio 2003.

===Visual Studio 2005===
Visual Studio 2005, codenamed ''Whidbey'' (a reference to [[Whidbey Island]] in [[Puget Sound]]), was released online in October 2005 and hit the stores a few weeks later. Microsoft removed the ".NET" moniker from Visual Studio 2005 (as well as every other product with .NET in its name), but it still primarily targets the .NET Framework, which was upgraded to version 2.0. It is the last version available for [[Windows 2000]]. Visual Studio 2005's internal version number is 8.0 while the file format version is 9.0.<ref name="hacks">{{cite web | url = http://www.ondotnet.com/pub/a/dotnet/excerpt/vshacks_chap1/index.html?page=4 | title = Hacking Visual Studio | accessdate = 2008-01-01}}</ref> Microsoft released Service Pack 1 for Visual Studio 2005 on [[14 December]] [[2006]].<ref>{{cite web | url = http://www.microsoft.com/downloads/details.aspx?FamilyID=BB4A75AB-E2D4-4C96-B39D-37BAF6B5B1DC&displaylang=en | title = Visual Studio 2005 Service Pack 1 | publisher = [[Microsoft]] | accessdate = 2008-01-01}}</ref>. An additional update for Service Pack 1 that offers Windows Vista compatibility was made available on [[3 June]] [[2007]].<ref>{{cite web | url = http://www.microsoft.com/downloads/details.aspx?FamilyID=90e2942d-3ad1-4873-a2ee-4acc0aace5b6&displaylang=en |title = Visual Studio Service Pack 1 Update | accessdate = 2008-01-01}}</ref>

Visual Studio 2005 was upgraded to support all the new features introduced in .NET Framework 2.0, including generics and ASP.NET 2.0. The [[IntelliSense]] feature in Visual Studio was upgraded for generics and new project types were added to support ASP.NET web services. Visual Studio 2005 also includes a local web server, separate from [[IIS]], that can be used to host ASP.NET applications during development and testing. It also supports all [[Microsoft SQL Server|SQL Server]] 2005 databases. Database designers were upgraded to support the [[ADO.NET|ADO.NET 2.0]], which is included with .NET Framework 2.0. C++ also got a similar upgrade with the addition of [[C++/CLI]] which is slated to replace the use of [[Managed Extensions for C++|Managed C++]].<ref>{{cite web
|url=http://msdn2.microsoft.com/en-us/library/xey702bw(VS.80).aspx
|title=New Language Features in Visual C++  
|work=Visual Studio 2005 Visual C++ Language Reference  
|publisher=MSDN
|accessdate=2006-12-28
}}</ref> Other new features of Visual Studio 2005 include the "Deployment Designer" which allows application designs to be validated before deployments, an improved environment for web publishing when combined with ASP.NET 2.0 and load testing to see application performance under various sorts of user loads. Visual Studio 2005 also added extensive 64-bit support. While the development environment itself is only available as a 32-bit application, Visual C++ 2005 supports compiling for [[x86-64]] (AMD64 and Intel 64) as well as [[IA-64]] ([[Itanium]]).<ref>{{cite web
|url=http://blogs.msdn.com/deeptanshuv/archive/2006/04/11/573795.aspx
|title=64-bit and Visual Studio 2005 
|date=[[April 11]] [[2006]]
|accessdate=2006-12-28
}}</ref> The [[Windows SDK|Platform SDK]] included 64-bit compilers and 64-bit versions of the libraries.

Microsoft also announced '''Visual Studio Tools for Applications''' as the successor to [[Visual Basic for Applications]] (VBA) and VSA (Visual Studio for Applications). VSTA 1.0 was released to manufacturing along with [[Office 2007]]. It is included with Office 2007 and is also part of the Visual Studio 2005 SDK. VSTA consists of a customized IDE, based on the Visual Studio 2005 IDE, and a runtime that can be embedded in applications to expose its features via the .NET object model. Office 2007 applications continue to integrate with VBA, except for InfoPath 2007 which integrates with VSTA. The next version of VSTA (based on Visual Studio 2008) will be released in February 2008. It will be significantly different than the first version, including features such as dynamic programing and support for [[Windows Presentation Foundation|WPF]], [[Windows Communication Foundation|WCF]], [[Windows Workflow Foundation|WF]], [[Language Integrated Query|LINQ]], and [[.NET Framework|.NET]] 3.5.

===Visual Studio 2008===
Visual Studio 2008,<ref>{{cite web | url = http://www.earthtimes.org/articles/show/news_press_release,115898.shtml | title = Microsoft Details Dynamic IT Strategy at Tech-Ed 2007 | accessdate=2007-06-04}}</ref> codenamed ''Orcas'', is the successor to Visual Studio 2005. It was released to MSDN subscribers on [[19 November]], [[2007]] alongside [[.NET Framework]] 3.5. The codename ''Orcas'' is, like Whidbey, a reference to an island in [[Puget Sound]], [[Orcas Island]]. The source code for the Visual Studio 2008 IDE will be available under a [[shared source]] license to some of [[Microsoft]]'s partners and [[Independent software vendor|ISV]]s.<ref>{{cite web | url = http://www.eweek.com/article2/0,1895,2212505,00.asp | title = Microsoft to Give Partners More Access to Orcas IDE Code | accessdate = 2007-11-06}}</ref>

Visual Studio 2008 is focused on development of [[Windows Vista]], 2007 Office system, and Web applications. Among other things, it brings a new language feature, [[Language Integrated Query|LINQ]], new versions of [[C Sharp (programming language)|C#]] and [[Visual Basic]] languages, a [[Windows Presentation Foundation]] visual designer, and improvements to the .NET Framework. It also features a new [[HTML]]/[[CSS]] editor influenced by [[Microsoft Expression Web]].<ref>{{cite web | url = http://channel9.msdn.com/ShowPost.aspx?PostID=278335 | title = Visual Studio Orcas | publisher = Channek9 | accessdate = 2008-01-01}}</ref> [[J Sharp|J#]] is not included.<ref>{{cite web
|url=http://download.microsoft.com/download/2/0/d/20d107fd-4719-4236-8e5b-ef6bfdb69c81/OrcasMarchCTP_ReadMe.htm
|title=Visual Studio Code Name <U+201C>Orcas<U+201D> Release Notes - March 2007 Community Technology Preview
|accessdate=2007-03-03
|date=March 2007
|publisher=Microsoft
}}</ref> Visual Studio 2008 requires [[.NET Framework 3.5]] and by default configures compiled assemblies to run on .NET Framework 3.5; but it also supports multi-targeting which lets the developers choose which version of the .NET Framework (out of 2.0, 3.0, 3.5, [[Silverlight|Silverlight CoreCLR]] or [[.NET Compact Framework]]) the assembly runs on. Visual Studio 2008 also includes new [[code analysis]] tools, including the new [[Code Metrics]] tool.<ref>{{cite web | publisher = [[eWeek]] | accessdate = 2007-10-06 | title = Microsoft Pushes Secure, Quality Code | author = Darryl K. Taft | url = http://www.eweek.com/article2/0,1759,2192515,00.asp?kc=EWRSS03119TX1K0000594 }}</ref> For  [[Visual C++]], Visual Studio adds a new version of [[Microsoft Foundation Classes]] (MFC 9.0) that adds support for the visual styles and UI controls introduced with [[Windows Vista]].<ref>{{cite web | url = http://www.codeguru.com/cpp/controls/buttonctrl/advancedbuttons/article.php/c14407/ | title = Whats New in MFC 9.0 (Orcas) | author = Kirants | publisher = CodeGuru | accessdate = 2008-01-02}}</ref> For native and managed code interoperability, Visual C++ introduces the STL/CLR, which is a port of the [[C++]] [[Standard Template Library]] (STL) containers and algorithms to [[managed code]]. STL/CLR defines STL-like containers, [[iterator]]s and algorithms that work on [[C++/CLI]] [[managed code|managed]] objects.<ref>{{cite web | url = http://blogs.msdn.com/nikolad/archive/2006/06/16/STLCLR-Intro.aspx | title = What Is STL/CLR? | author = Nikola Dudla | publisher = [[MSDN]] Blogs | accessdate = 2008-01-02}}</ref><ref>{{cite web | url = http://blogs.msdn.com/vcblog/archive/2006/08/02/686894.aspx | title = Libraries Work In Orcas | author = Visual C++ Team | publisher = [[MSDN]] Blogs | accessdate = 2008-01-02}}</ref>

Visual Studio 2008 features a [[XAML]] based designer (codenamed ''Cider''), [[Workflow Foundation|workflow designer]], [[Language Integrated Query|LINQ]] to [[SQL]] designer (for defining the type mappings and object encapsulation for SQL Server data), [[XSLT]] debugger, [[JavaScript]] [[Intellisense]] support, JavaScript Debugging support, support for [[User Account Control|UAC]] [[Manifest (.NET Framework)|manifests]], a [[Concurrent programming|concurrent]] build system, among others.<ref>{{cite web | url = http://blog.csharp-online.net/?p=108 | title = Download Visual Studio 03/07 CTP | accessdate = 2007-06-14}}</ref> It ships with an enhanced set of UI widgets, both for [[WinForms]] and [[Windows Presentation Foundation|WPF]]. It also includes a multithreaded build engine (MSBuild) to compile multiple source files (and build the executable file) in a project across multiple [[thread (computing)|threads]] simultaneously. It also includes support for compiling [[Portable Network Graphics|PNG]] compressed [[Icon (computing)|icon]] [[Resource (Windows)|resources]] introduced in Windows Vista. An updated [[XML Schema (W3C)|XML Schema]] designer will ship separately some time after the release of Visual Studio 2008. <ref>{{cite web | url = http://www.msdner.com/dev-archive/204/153-1021-2046403.shtm | title = XSD Designer in Visual Studio | accessdate = 2008-01-01}}</ref>

The [[Microsoft Visual Studio Debugger|Visual Studio debugger]] includes features targeting easier debugging of multi-threaded applications. In debugging mode, in the ''Threads'' window, which lists all the threads, hovering over a thread will display the stack trace of that thread in tooltips.<ref>{{cite web | url = http://blogs.msdn.com/somasegar/archive/2007/09/14/debugging-and-profiling-features-in-vs-2008.aspx | title = Debugging and Profiling Features in VS 2008 | author = S. Somasegar | publisher = MSDN Blogs | accessdate = 2007-07-24}}</ref>. The threads can directly be named and flagged for easier identification from that window itself.<ref name="johnrobbin">{{cite web | url = http://www.wintellect.com/cs/blogs/jrobbins/archive/2007/08/01/neat-new-multithreaded-debugging-features-in-vs-2008.aspx | title = Neat New Multithreaded Debugging Features in VS 2008 | author = John Robbin | accessdate = 2007-09-24}}</ref> In addition, in the code window, along with indicating the location of the currently executing instruction in the current thread, the currently executing instructions in other threads are also pointed out.<ref name="johnrobbin"/><ref>{{cite web | url = http://www.hanselman.com/blog/MultithreadedDebuggingInVisualStudio2008.aspx | title = Multi-threaded Debugging in Visual Studio 2008 | author = Scott Hanselman | accessdate = 2007-09-24}}</ref> The [[Microsoft Visual Studio Debugger|Visual Studio debugger]] supports integrated debugging of the [[.NET Framework 3.5]] [[Base Class Library|BCL]]. It can dynamically download the BCL source code and [[debug symbol]]s and allow stepping into the BCL source during debugging.<ref>{{cite web | url = http://weblogs.asp.net/scottgu/archive/2007/10/03/releasing-the-source-code-for-the-net-framework-libraries.aspx | title = Releasing the Source Code for the .NET Framework Libraries  | author = [[Scott Guthrie]] | accessdate = 2007-10-04}}</ref>. Currently a limited subset of the BCL source is available, with more library support planned for later in the year.

== Pre-Installed Virtual Machines ==
Microsoft is offering [[virtual machines]] (in the documented [[Virtual Hard Disk]] format) with Visual Studio Team System 2008 pre-installed for trial use<ref>{{cite web | url = http://msdn2.microsoft.com/en-us/vsts2008/products/cc268311.aspx | title = Visual Studio VMs | accessdate = 2008-04-05}}</ref>. The current offerings include '''Visual Studio Team System 2008 Team Suite with Visual Studio Team System 2008 Team Foundation Server''' and '''Visual Studio Team System 2008 Team Foundation Server with Team Explorer'''. They come installed on Windows Server 2003 SP1 and include all available updates and patches. Both expire on December 31, 2008.

== Future development ==
{{future software}}
A future iteration of Visual Studio, codenamed ''Visual Studio 10'' or ''VS 10'',<ref name = "cpp10"/> (previously codenamed ''Hawaii''<ref name="dsource">{{cite web | url = http://www.devsource.com/c/a/Using-VS/Hawaii-A-Visual-Studio-Paradise-for-Developers/ | title = 'Hawaii': A Visual Studio Paradise for Developers? | accessdate = 2008-03-12}}</ref>) is under development. Even though the feature set has not been finalized,<ref name="callhierarchy"/> some features that the teams are considering have been made public. The [[Visual C++]] team is considering using a [[SQL Server Compact]] database to store information about the source code, including [[IntelliSense]] information, for better IntelliSense and code-completion support.<ref name="cpp10">{{cite web | title = IntelliSense, part 2: The Future | url = http://blogs.msdn.com/vcblog/archive/2008/02/29/intellisense-part-2-the-future.aspx | author = Visual C++ Team Blog | accessdate = 2008-03-12}}</ref> For managed code, a ''Call Hierarchy'' feature, which will show all the code-paths from any method at design time, is being designed.<ref name="callhierarchy">{{cite web | url = http://code.msdn.microsoft.com/vslangfutures/Wiki/View.aspx?title=Call%20Hierarchy&referringTitle=Home | title = Call Hierarchy | author = Charlie Calvert | accessdate = 2008-03-12}}</ref> The Visual Studio 10 IDE is also slated to be redesigned to be more modular and with more extensibility points than the current version.<ref name="Mjfoley">{{cite web | url = http://blogs.zdnet.com/microsoft/?p=152 | title = A (Microsoft) codename a day: Hawaii | author = Mary Jo Foley | accessdate = 2008-03-12}}</ref>

Visual Studio Rosario is the next version of Visual Studio Team System and is being touted as an <U+201C>integrated Application Life-cycle Management (ALM)<U+201D> tool.<ref>{{cite web | url = http://msdn2.microsoft.com/en-us/vstudio/bb725993.aspx | title = 'Visual Studio Team System Rosario' | accessdate = 2008-04-05}}</ref> It is intended to enable and enhance development at every step of an application<U+2019>s life-cycle from conceptualization to release and maintenance. Microsoft is currently soliciting comments and feedback from developers for Rosario.<ref>{{cite web | url = http://msdn2.microsoft.com/en-us/vstudio/bb936702.aspx | title = ''Rosario'' Specifications | accessdate = 2008-04-05}}</ref>.

==References==
{{reflist|2}}

==External links==
* [http://msdn.microsoft.com/vstudio/ Microsoft Visual Studio Official Website]
* [http://forums.microsoft.com/MSDN/default.aspx?ForumGroupID=6&SiteID=1 Microsoft Visual Studio Official Forums]
* [http://msdn.microsoft.com/vstudio/products/compare/ Visual Studio Product Line Feature Comparisons]
* [http://msdn.microsoft.com/vstudio/express/support/install/ Visual Studio Express Editions download]
* [http://www.microsoft.com/downloads/details.aspx?FamilyID=6ff3bc60-32c8-4c22-8591-a20bf8dff1a2&DisplayLang=en MSDN Library for Visual Studio 2008]
* [http://msdn.microsoft.com/vstudio/teamsystem/ Microsoft Visual Studio Team System page]
* [http://forums.microsoft.com/MSDN/default.aspx?ForumGroupID=5&SiteID=1 Microsoft Visual Studio Team System Official Forums]
* [http://msdn.microsoft.com/vstudio/extend Microsoft Visual Studio SDK]
* [http://support.microsoft.com/default.aspx?scid=kb;en-us;918007 Visual Studio 2003 SP1]
* [http://www.microsoft.com/downloads/details.aspx?FamilyID=BB4A75AB-E2D4-4C96-B39D-37BAF6B5B1DC&displaylang=en Visual Studio 2005 SP1]
* [http://www.visualstudiogallery.com/ Microsoft Visual Studio Products and Extensions Gallery]

{{MS DevTools|state=open}}
{{Microsoft|state=collapsed}}

{{DEFAULTSORT:Visual Studio}}

[[Category:Microsoft development tools|Visual Studio]]
[[Category:Microsoft Visual Studio| ]]
[[Category:Integrated development environments]]
[[Category:User interface builders]]

[[ar:<U+0645><U+0627><U+064A><U+0643><U+0631><U+0648><U+0633><U+0648><U+0641><U+062A> <U+0641><U+064A><U+062C><U+064A><U+0648><U+0627><U+0644> <U+0633><U+062A><U+0648><U+062F><U+064A><U+0648>]]
[[cs:Microsoft Visual Studio]]
[[de:Microsoft Visual Studio]]
[[es:Microsoft Visual Studio]]
[[fa:<U+0648><U+06CC><U+0698><U+0648><U+0627><U+0644> <U+0627><U+0633><U+062A><U+0648><U+062F><U+06CC><U+0648>]]
[[fr:Microsoft Visual Studio]]
[[ko:<U+BE44><U+C8FC><U+C5BC> <U+C2A4><U+D29C><U+B514><U+C624>]]
[[id:Microsoft Visual Studio]]
[[it:Visual Studio]]
[[he:<U+05D5><U+05D9><U+05D6>'<U+05D5><U+05D0><U+05DC> <U+05E1><U+05D8><U+05D5><U+05D3><U+05D9><U+05D5>]]
[[hu:Microsoft Visual Studio]]
[[ms:Microsoft Visual Studio]]
[[nl:Visual Studio]]
[[ja:Microsoft Visual Studio]]
[[no:Visual Studio]]
[[pl:Microsoft Visual Studio]]
[[pt:Microsoft Visual Studio]]
[[ro:Visual Studio]]
[[ru:Microsoft Visual Studio]]
[[fi:Visual Studio]]
[[sv:Microsoft Visual Studio]]
[[th:<U+0E44><U+0E21><U+0E42><U+0E04><U+0E23><U+0E0B><U+0E2D><U+0E1F><U+0E17><U+0E4C> <U+0E27><U+0E34><U+0E0A><U+0E27><U+0E25><U+0E2A><U+0E15><U+0E39><U+0E14><U+0E34><U+0E42><U+0E2D>]]
[[uk:Microsoft Visual Studio]]
[[zh:Microsoft Visual Studio]]
