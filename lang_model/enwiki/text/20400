{{Mergefrom|ActiveMovie|date=November 2011}}
[[File:Dxmlogomsmall.png|thumb|upright|Logo of the DirectX Media SDK <U+2013> the first time DirectShow was distributed under its current name.{{Citation needed|date=August 2010}}]]
<!-- Note that the <nowiki>{{fact|date=November 2010}}</nowiki> tags in this are generally true, just difficult to source due to the technical nature; don't remove unless 100% sure. -->
'''DirectShow''' (sometimes abbreviated as '''DS''' or '''DShow'''), codename '''Quartz''', is a [[multimedia framework]] and [[application programming interface|API]] produced by [[Microsoft]] for [[software developer]]s to perform various operations with media files or streams. It is the replacement for Microsoft's earlier [[Video for Windows]] technology.<ref name="QuartzIntro">{{cite news|url=http://msdn.microsoft.com/en-us/magazine/cc301631.aspx |title=Core Media Technology in Windows XP Empowers You to Create Custom Audio/Video Processing Components|author=Blome, Michael; Wasson, Mike|work=MSDN Magazine|publisher=Microsoft|month=July|year=2002|accessdate=2007-04-02}}</ref>  Based on the [[Microsoft Windows]] [[Component Object Model]] (COM) framework, DirectShow provides a common interface for media across various [[programming language]]s, and is an extensible, [[Filter (software)|filter]]-based framework that can render or record media files on demand at the request of the user or developer. The DirectShow development tools and documentation were originally distributed as part of the [[DirectX]] [[SDK]].{{Citation needed|date=August 2010}} Currently, they are distributed as part of the [[Windows SDK]] (formerly known as the Platform SDK).<ref name="DShowMSDN">{{cite web|url=http://msdn.microsoft.com/en-us/library/ms783323.aspx|title=DirectShow documentation|work=MSDN Library|publisher=Microsoft|date=2006-01-01|accessdate=2006-01-01}}</ref>

DirectShow's counterparts on other platforms include [[Apple Inc.|Apple]]'s [[QuickTime]] framework and various Linux multimedia frameworks such as [[GStreamer]]. Microsoft plans to completely replace DirectShow gradually with [[Media Foundation]] in future Windows versions.{{Why?|date=August 2010}}<ref>{{cite web|url=http://msdn.microsoft.com/en-us/library/aa468614.aspx|title=Migrating from DirectShow to Media Foundation|work=MSDN Library|publisher=Microsoft|month=July|year=2006|accessdate=2010-08-17}}</ref> [[Windows Vista]] and [[Windows 7]] applications use Media Foundation instead of DirectShow for several media related tasks.{{Citation needed|date=August 2010}}

== History ==
The direct predecessor of DirectShow, [[ActiveMovie]] (codenamed Quartz), was originally chartered to provide [[MPEG-1]] file playback support for Windows. It was also intended as a future replacement for media processing frameworks like [[Video for Windows]], which had never been designed to handle [[codec]]s that put video frames into a different order during the compression process, and the [[Media Control Interface]], which had never been fully ported to a 32-bit environment and did not utilize COM.<ref name="QuartzIntro"/>

The Quartz team started with an existing project called Clockwork.{{Citation needed|date=August 2010}} Clockwork was a modular media processing framework in which semi-independent components worked together to process digital media streams, and had previously been used in several projects, including the Microsoft Interactive Television (MITV) project and another project named Tiger.<ref>{{cite web|url=http://research.microsoft.com/~mbj/papers/mitv/tr-97-18.html|title=The Microsoft Interactive TV System: An Experience Report|author=B. Jones, Michael|work=Microsoft Research|publisher=Microsoft|month=July|year=1997|accessdate=2007-04-02}}</ref>

ActiveMovie was announced in March 1996, and released in May 1996, bundled with the beta version of [[Internet Explorer 3]].0.<ref>{{cite press release|url=http://www.microsoft.com/presspass/press/1996/mar96/actmovpr.mspx|title=Microsoft Announces ActiveMovie|publisher=Microsoft|date=1996-03-05|accessdate=2006-12-31}}</ref><ref>{{cite press release| url=http://www.microsoft.com/presspass/press/1996/may96/ie3btapr.mspx|title=Microsoft Internet Explorer 3.0 Beta Now Available|publisher=Microsoft|date=1996-05-29|accessdate=2006-12-31}}</ref> In March 1997, Microsoft announced that ActiveMovie would become part of the [[DirectX]] 5 suite of technologies, and around July started referring to it as DirectShow, reflecting Microsoft's efforts at the time to consolidate technologies that worked directly with hardware under a common naming scheme.<ref>{{cite press release|url=http://www.microsoft.com/presspass/press/1997/mar97/mmapipr.mspx|title=Microsoft Unveils First Unified Multimedia API Strategy|publisher=Microsoft|date=1997-03-31| accessdate=2006-12-31}}</ref><ref>{{cite press release|url=http://www.microsoft.com/presspass/press/1997/Jul97/pronetpr3_95.mspx|title=Microsoft and Progressive Networks Collaborate on Streaming Media|publisher=Microsoft| date=1997-07-21|accessdate=2006-12-31}}</ref><ref>{{cite web|url=http://craig.theeislers.com/2006/02/directx_then_and_now_part_1.php|title=DirectX Then and Now|author=Eisler, Craig|work=Craig's Musings|date=2006-02-20|accessdate=2010-08-17}}</ref> DirectShow became a standard component of all Windows operating systems starting with [[Windows 98]];<ref>{{cite press release|url=http://www.microsoft.com/presspass/press/1997/dec97/dshwspr.mspx|title=Microsoft Releases DirectShow SDK - Universal Playback for DVD, Digital Video and Audio, and the Internet|publisher=Microsoft|date=1997-12-10|accessdate=2010-08-17}}</ref> however it is available on [[Windows 95]] by installing the latest available DirectX redistributable.<ref name="DShowFAQ">{{cite web|url=http://msdn.microsoft.com/en-us/library/dd375463(VS.85).aspx|title=DirectShow FAQ|work=MSDN Library|publisher=Microsoft|date=2010-07-06|accessdate=2010-08-17}}</ref> In DirectX version 8.0, DirectShow became part of the mainline distribution of the DirectX SDK and was placed alongside other DirectX APIs.<ref>{{cite web|url=http://msdn.microsoft.com/en-us/library/ms867154.aspx|title=FAQs about the DirectShow and Windows Media SDKs|work=MSDN Library|publisher=Microsoft|month=December|year=2001|accessdate=2010-08-17}}</ref>

In October 2004, DirectShow was removed from the main DirectX distribution and relocated to the DirectX Extras download.{{Citation needed|date=August 2010}} In April 2005, DirectShow was removed entirely from DirectX and moved to the Windows Server 2003 SP1 version of the Microsoft Platform SDK.<ref name="DShowMSDN"/> The DirectX SDK was, however, still required to build some of the DirectShow samples.<ref name="dsmustdx">{{cite web|url=http://msdn.microsoft.com/en-us/library/ms783352(VS.85).aspx|title=DirectX Samples|work=MSDN Library|publisher=Microsoft|date=2005-09-11|accessdate=2005-09-11}}</ref>

Since November 2007, DirectShow APIs are part of the [[Windows SDK]]. It includes several new enhancements, codecs and filter updates such as the [[Enhanced Video Renderer]] (EVR) and DXVA 2.0 ([[DirectX Video Acceleration]]).<ref>{{cite web|url=http://msdn.microsoft.com/en-us/library/dd390976(VS.85).aspx|title=What's New in DirectShow Windows Vista|work=MSDN Library|publisher=Microsoft|date=2006-11-08|accessdate=2006-11-08}}</ref>

== Architecture ==

DirectShow divides a complex multimedia task (e.g. video playback) into a sequence of fundamental processing steps known as [[Filter (software)|filters]].<ref>[http://msdn.microsoft.com/en-us/library/ms786509(VS.85).aspx Introduction to DirectShow application programming]</ref><ref>[http://msdn.microsoft.com/en-us/library/ms783354(VS.85).aspx DirectShow system overview]</ref>  Each filter <U+2014> which represents one stage in the processing of the data <U+2014> has input and/or output ''pins'' that may be used to connect the filter to other filters. The generic nature of this connection mechanism enables filters to be connected in various ways so as to implement different complex functions.<ref>{{cite web|url=http://msdn.microsoft.com/en-us/library/ms778825(VS.85).aspx|title=About DirectShow filters|work=MSDN Library|publisher=Microsoft|accessdate=2010-08-17}}</ref> To implement a specific complex task, a developer must first build a [[filter graph]] by creating instances of the required filters, and then connecting the filters together.<ref>{{cite web|url=http://msdn.microsoft.com/en-us/library/ms783701(VS.85).aspx|title=Overview of graph building|work=MSDN Library|publisher=Microsoft|accessdate=2010-08-17}}</ref>

There are three main types of filters:
;Source filters: These provide the source streams of data. For example, reading raw bytes from any media file.
;Transform filters: These transform data that is provided from other filter's output. For example, doing a transform such as adding text on top of video or uncompressing an MPEG frame.
;Renderer filters: These render the data. For example, sending audio to the sound card, drawing video on the screen or writing data to a file.

During the rendering process, the filter graph searches the [[Windows Registry]] for registered filters and builds its graph of filters based on the locations provided. After this, it connects the filters together, and, at the developer's request, executes (i.e., plays, pauses, etc.) the created graph.{{Citation needed|date=August 2010}} DirectShow filter graphs are widely used in video playback (in which the filters implement functions such as file parsing, video and audio demultiplexing, decompressing and rendering) as well as for video and audio recording, editing, encoding, transcoding or network transmission of media. Interactive tasks such as DVD navigation may also be controlled by DirectShow.{{Citation needed|date=August 2010}}<!--whole paragraph citations needed-->

[[Image:dsmp3graph.gif|thumb|center|962px|Filter graph of an [[mp3]] file, as rendered by the DirectShow sample in [[GraphEdit]], an application with a [[GUI]] for DirectShow used to visually build and test filter graphs.<ref name="GraphEdit">{{cite web|url=http://msdn.microsoft.com/en-us/library/dd390950.aspx|title=Overview of GraphEdit|work=MSDN Library|publisher=Microsoft|accessdate=2010-08-17}}</ref> In this picture the boxes represent filters and the grey dots appearing on the sides of the filters represent pins.]]

In the above example, from left to right, the graph contains a ''source filter'' to read an MP3 file, [[Stream (computing)|stream]] splitter and decoder filters to parse and decode the audio, and a ''rendering filter'' to play the raw audio samples. Each filter has one or more pins that can be used to connect that filter to other filters. Every pin functions either as an output or input source for data to flow from one filter to another. Depending on the filter, data is either "pulled" from an input pin or "pushed" to an output pin in order to transfer data between filters. Each pin can only connect to one other pin and they have to agree on what kind of data they are sending.{{Citation needed|date=August 2010}}

Most filters are built using a set of C++ classes provided in the DirectShow SDK, called the DirectShow Base Classes.{{Citation needed|date=August 2010}} These handle much of the creation, registration and connection logic for the filter.<ref>{{cite web|url=http://msdn.microsoft.com/en-us/library/ms783325(VS.85).aspx|title=DirectShow Base Classes|work=MSDN Library|publisher=Microsoft|accessdate=2010-08-17}}</ref> For the filter graph to use filters automatically, they need to be registered in a separate DirectShow registry entry as well as being registered with COM. This registration can be managed by the DirectShow Base Classes. However, if the application adds the filters manually, they do not need to be registered at all.{{Citation needed|date=August 2010}}

Unfortunately, it is difficult to modify a graph that is already running. It is usually easier to stop the graph and create a new graph from scratch. Starting with DirectShow 8.0, dynamic graph building, dynamic reconnection, and filter chains were introduced to help alter the graph while it was running.<ref name="DynamicGraphs">{{cite web|url=http://msdn.microsoft.com/en-us/library/ms783499(VS.85).aspx|title=Dynamic Graph Building|work=MSDN Library|publisher=Microsoft|accessdate=2010-08-17}}</ref>  However, many filter vendors ignore this feature, making graph modification problematic after a graph has begun processing.{{Citation needed|date=August 2010}}

== Features ==

By default, DirectShow includes a number of filters for decoding some common media file formats such as [[MPEG-1]], [[MP3]], [[Windows Media Audio]], [[Windows Media Video]], [[Musical Instrument Digital Interface|MIDI]], [[Container format (digital)|media containers]] such as [[Audio Video Interleave|AVI]], [[Advanced Systems Format|ASF]], [[WAV]], some splitters/demultiplexers, multiplexers, source and [[Sink (computing)|sink]] filters and some static image filters.<ref name="formats">{{cite web|url=http://msdn.microsoft.com/en-us/library/ms787745(VS.85).aspx|title=Formats supported by default in DirectShow|work=MSDN Library|publisher=Microsoft|accessdate=2005-09-11}}</ref> Since the associated patented technologies are licensed in Windows, no license fees are required (e.g., to [[Fraunhofer Society|Fraunhofer]], for MP3).{{Citation needed|date=August 2010}} Some codecs such as [[MPEG-4|MPEG-4 Advanced Simple Profile]], [[Advanced Audio Coding|AAC]], [[H.264]], [[Vorbis]] and containers [[MOV]], [[MP4]] are easily added from 3rd parties.{{Citation needed|date=August 2010}} Incorporating support for additional codecs such as these can involve paying the licensing fees to the involved codec technology developer or patent holder.{{Citation needed|date=August 2010}}

However, DirectShow's standard format repertoire can be easily expanded by means of a variety of filters. Such filters enable DirectShow to support virtually any container format and any audio or video codec.{{Citation needed|date=August 2010}} For example, filters have been developed for [[Ogg Vorbis]], [[Musepack]], and [[AC3]].<ref name="ovfilter">{{cite web|url=http://www.illiminable.com/ogg/|title=illiminable Directshow Filters for Ogg Vorbis, Speex, Theora and FLAC|accessdate=2006-03-11}}</ref><ref>{{cite web|url=http://blog.monogram.sk/janos/directshow-filters/|title=Monogram's DirectShow filters for Musepack, AAC and AMR|accessdate=2008-03-08}}</ref><ref>{{cite web|url=http://ac3filter.net/|title=AC3Filter|accessdate=2010-08-13}}</ref> Finally, there are "bridge" filters that simultaneously support multiple formats, as well as functions like stream multiplexing, by exposing the functionality of underlying multimedia APIs such as [[VLC media player|VLC]].<ref>{{cite web|url=http://www.sensoray.com/support/videoLan.htm|author=Anderson, Dean; Lamberson, Jim|title=Using VideoLan VLC in DirectShow|work=An open source bridge from VLC to DirectShow|year=2007|accessdate=2008-02-15}}</ref>

The amount of work required to implement a filter graph depends on several factors. In the simplest case, DirectShow can create a filter graph automatically from a source such as a file or URL.<ref>{{cite web|url=http://www.flipcode.com/archives/DirectShow_For_Media_Playback_In_Windows-Part_III_Customizing_Graphs.shtml|title=DirectShow For Media Playback In Windows - Part III: Customizing Graphs|author=Thompson, Chris|work=FLIPCODE.COM|date=2000-09-13|accessdate=2010-08-18}}</ref> If this is not possible, the developer may be able to manually create a filter graph from a source file, possibly with the addition of a custom filter, and then let DirectShow complete the filter graph by connecting the filters together. At the next level, the developer must build the filter graph from scratch by manually adding and connecting each desired filter. Finally, in cases where an essential filter is unavailable, the developer must create a custom filter before a filter graph can be built.{{Citation needed|date=August 2010}}

Unlike the main C API of QuickTime where it is necessary to call MoviesTask in a loop to load a media file, DirectShow handles all of this in a transparent way. It creates several background threads that smoothly play the requested file or URL without much work required from the programmer.{{Citation needed|date=August 2010}} Also in contrast to QuickTime, nothing special is required for loading a URL instead of a local file on disk <U+2013> DirectShow's filter graph abstracts these details from the programmer, although recent developments in QuickTime (including an [[ActiveX control]]) have reduced this disparity.{{Citation needed|date=August 2010}}

== DirectShow Editing Services ==

''DirectShow Editing Services'' (DES), introduced in DirectX 8.0/[[Windows XP]] is an API targeted at video editing tasks and built on top of the core DirectShow architecture. ''DirectShow Editing Services'' was introduced for Microsoft's [[Windows Movie Maker]].<ref name="QuartzIntro" />  It includes APIs for timeline and switching services, resizing, cropping, video and audio effects, as well as transitions, [[Keying (graphics)|keying]], automatic [[frame rate]] and [[sample rate conversion]] and such other features which are used in [[non-linear video editing]] allowing creation of composite media out of a number of source audio and video streams. DirectShow Editing Services allow higher-level run-time compositing, seeking support, and graph management, while still allowing applications to access lower-level DirectShow functions.

While the original API is in C++, DirectShow Editing Services is accessible in any Microsoft .NET compatible language including Microsoft [[Microsoft Visual C Sharp|Visual C#]] and Microsoft [[Visual Basic .NET|Visual Basic]] by using a third-party code library called "DirectShowNet Library".<ref>{{cite web|url=http://directshownet.sourceforge.net/about.html|title=About DirectShowNet  Library|work=DirectShowNet SourceForge Website|publisher=SourceForge|accessdate=2010-08-18}}</ref> Alternatively, the entire DirectShow API, including DirectShow Editing Services, can be accessed from [[Borland Delphi]] 5, 6 and 7, [[C++ Builder]] 6, and from later versions with a few minor modifications, using a third party software library called "DSPack".<ref>{{cite web|url=http://www.progdigy.com/?page_id=4|title=The DSPack Project|accessdate=2010-08-18}}</ref>

== Video rendering filters ==

Originally, in [[Windows 9x]], DirectShow used the ''Video Renderer'' filter. This drew the images using [[DirectDraw]] 3, but could also fall back to [[Graphics Device Interface|GDI]] or [[Video overlay|overlay]] drawing modes in some circumstances (depending upon the visibility of the video window and the video card's capabilities).<ref name="DShowFAQ"/><ref>{{cite web|url=http://msdn.microsoft.com/en-us/library/aa916593.aspx|title=DirectShow Video Renderer Filter|work=MSDN Library|publisher=Microsoft|accessdate=2010-08-17}}</ref> It had limited access to the video window.{{Citation needed|date=August 2010}} [[Video for Windows]] had been plagued with [[deadlock]]s caused by applications' incorrect handling of the video windows, so in early DirectShow releases, the handle to the playback window was hidden from applications. There was also no reliable way to draw caption text or graphics on top of the video.{{Citation needed|date=March 2010}}

DirectShow 6.0, released as part of [[DirectX Media]] introduced the ''Overlay Mixer'' renderer designed for [[DVD]] playback and [[Broadcasting|broadcast]] video streams with [[closed captioning]] and [[Subtitle (captioning)|subtitles]].{{Citation needed|date=August 2010}} The ''Overlay Mixer'' uses DirectDraw 5 for rendering.<ref name="DShowFAQ"/> Downstream connection with the ''Video Renderer'' is required for window management.{{Citation needed|date=August 2010}} ''Overlay Mixer'' also supports Video Port Extensions (VPE), enabling it to work with analog [[TV tuner card|TV tuners]] with overlay capability (sending video directly to a video card via an analog link rather than via the [[Peripheral Component Interconnect|PCI bus]]). ''Overlay Mixer'' also supports [[DXVA]] connections.{{Citation needed|date=August 2010}} Because it always renders in [[Video overlay|overlay]], full-screen video to [[TV-out]] is always activated.

[[Windows XP]] introduced a new filter called the ''Video Mixing Renderer 7'' (''VMR-7'' or sometimes just referred to as ''VMR''). The number 7 was because VMR-7 only used [[DirectDraw]] version 7 to render the video and did not have the option to use GDI drawing. The main new feature of VMR-7 was the ability to mix multiple streams and graphics with alpha blending, allowing applications to draw text and graphics over the video and support custom effects.<ref name="VMR-7">{{cite web|url=http://msdn.microsoft.com/en-us/library/ms787917.aspx|title=Video Mixing Renderer 7 (VMR-7)|accessdate=September 11, 2005}}</ref> It also featured a "windowless mode" (access to the composited image before it is rendered) which fixed the problems with access to the window handle.<ref name="windowless mode">{{cite web|url=http://msdn.microsoft.com/en-us/library/ms788128.aspx|title=VMR Windowless Mode|work=MSDN Library|publisher=Microsoft|accessdate=2005-09-11}}</ref> VMR-7 was only officially released for [[Windows XP]].{{Citation needed|date=August 2010}}

DirectX 9 included ''VMR-9''. This version uses [[Direct3D]] 9 instead of DirectDraw, allowing developers to transform video images using the Direct3D pixel shaders.<ref name="VMR-9">{{cite web|url=http://msdn.microsoft.com/en-us/library/ms787918.aspx|title=Video Mixing Renderer 9 (VMR-9)|work=MSDN Library|publisher=Microsoft|accessdate=2005-09-11}}</ref> It is available for all Windows platforms as part of the DirectX 9 redistributable.{{Citation needed|date=August 2010}} As ''VMR-7'' it provides a Windowless Mode. However, unlike ''Overlay mixer'' or ''VMR-7'' it does not support video ports.<ref>{{cite web|url=http://msdn.microsoft.com/en-us/library/dd407344(VS.85).aspx|title=Video Mixing Renderer Filter 9|work=MSDN Library|publisher=Microsoft|accessdate=2005-09-11}}</ref> Using the [[NTLDR#NT_kernel_switches|/3GB boot option]] may cause VMR-9 to fail.<ref>http://forum.videohelp.com/threads/292160-Loss-of-DirectDraw-Overlay-and-VMR9-after-upgrade-update</ref>

[[Windows Vista]] and [[Windows 7]] ship with a new renderer, available as both a [[Media Foundation]] component and a DirectShow filter, called the ''Enhanced Video Renderer'' (''EVR'').<ref name="EVR">{{cite web|url=http://msdn.microsoft.com/en-us/library/ms694916.aspx|title=Enhanced Video Renderer|work=MSDN Library|publisher=Microsoft|accessdate=2007-02-28}}</ref> EVR is designed to work with [[Desktop Window Manager]] and supports [[DXVA|DXVA 2.0]], which is available on Windows Vista and Windows 7.<ref>{{cite web|url=http://forums.microsoft.com/MSDN/ShowPost.aspx?PostID=2079713&SiteID=1|title=DXVA 1.0 translator|author=''Various''|work=MSDN Media Foundation forum|publisher=Microsoft|accessdate=2010-08-18}}</ref>{{Citation needed|date=August 2010}} It offers better performance and better quality according to Microsoft.<ref>{{cite web|url=http://msdn.microsoft.com/en-us/library/dd374574(VS.85).aspx|title=Choosing the Right Video Renderer|work=MSDN Library|publisher=Microsoft|accessdate=2005-09-11}}</ref>

== Reception ==
===Awards===
On January 8, 2007. Microsoft received the Emmy award for Streaming Media Architectures and Components at the 58th Annual Technology & Engineering EMMY Awards.<ref>{{cite web|url=http://www.emmyonline.tv/releases/pdf/58th_Tech_Eng_winners.pdf|title=NATIONAL TELEVISION ACADEMY ANNOUNCES EMMY WINNING ACHIEVEMENTS: HONORS BESTOWED AT 58th ANNUAL TECHNOLOGY & ENGINEERING EMMY AWARDS|work=Emmy Award|publisher=National Television Academy|format=pdf|month=January|year=2007|accessdate=2007-01-08}}</ref>

===Simplicity===

Commanding DirectShow to play a file is a relatively simple task. However, while programming more advanced customizations, such as commanding DirectShow to display certain windows messages from the video window or creating custom filters, many developers complain of difficulties.<ref>{{cite web|url=http://www.mperfect.net/mceDirectShow/|title=Using DirectShow with Media Center Edition|work=/mceDirectShow|accessdate=2010-08-18}}</ref><ref>{{cite web|url=http://www.gamedev.net/reference/articles/article1345.asp|title=The Basics to using DirectShow|author=Roushu, Kurifu|work=Gamedev.net|date=2001-03-13|accessdate=2010-08-18}}</ref> It is regarded as one of Microsoft's most complex development libraries/APIs.<ref>{{cite web|first=Mark |last=Richards |url=http://www.mquter.qut.edu.au/mobile/ARTFilterDX/files/ARTFilterDX09-10.doc |title=Overview: What is the Augmented Reality Toolkit?|date=2008-08-26|accessdate=2009-01-25}}</ref>{{Citation needed|date=August 2010}}

Developers rarely create DirectShow filters from scratch. Rather, they employ DirectShow Base Classes.{{Citation needed|date=August 2010}} The Base Classes can often simplify development, allowing the programmer to bypass certain tasks. However, the process may remain relatively complex;{{Citation needed|date=August 2010}} the code found in the Base Classes is nearly half the size of the entire [[Microsoft Foundation Class Library|MFC library]].{{Citation needed|date=August 2010}} As a result, even with the Base Classes, the number of COM objects that DirectShow contains often overwhelms developers.{{Citation needed|date=August 2010}}{{Weasel-inline|date=August 2010}} In some cases, DirectShow's API deviates from traditional COM rules, particularly with regard to the parameters used for [[Method (computer science)|methods]].{{Citation needed|date=August 2010}}{{Weasel-inline|date=August 2010}} To overcome their difficulties with DirectShow's unique COM rules, developers often turn to a higher level API that uses DirectShow, notably, ''Windows Media Player SDK'', an API provides the developer with an ActiveX Control that has fewer COM interfaces to deal with.{{Citation needed|date=August 2010}}{{Weasel-inline|date=August 2010}}

Although DirectShow is capable of dynamically building a graph to render a given media type, in certain instances it is difficult for developers to rely on this functionality and they need to resort to manually building filter graphs if the resulting filter graph is variable.{{Citation needed|date=April 2008}} It is possible for filter graphs to change over time as new filters are installed on the computer.{{Citation needed|date=August 2010}}

===Digital rights management===
DirectShow has also been criticized for its support of [[digital rights management]] (DRM);{{Citation needed|date=August 2010}} however, DirectShow itself has minimal support for DRM in its API.<ref>{{cite web|url=http://retrakker.antville.org/stories/1548487/|title=Microsoft's next scapegoat - DirectShow!|work=retrakker|date=2007-01-13|accessdate=2010-08-18}}</ref> The Windows Media Player SDK more significantly reflects Microsoft's adherence to DRM.{{Citation needed|date=August 2010}}

===Codec hell===
Codec hell (a term derived from [[DLL hell]]) is when multiple DirectShow filters conflict for performing the same task. A large number of companies now develop codecs in the form of DirectShow filters, resulting in the presence of several filters that can decode the same media type.<ref>{{cite web|url=http://www.homevideo101.com/codec-hell/|title=Codec Hell|work=HomeVideo101 Blog|date=2007-06-22|accessdate=2010-08-18}}</ref><ref name="Arms Race">{{cite web|url=http://msmvps.com/blogs/chrisl/archive/2005/01/27/34039.aspx#34071 |title=New Age DLL Hell? Hell Yes|author=Lanier, Chris|work=Chris Lanier's Blog|publisher=MSMVPS.COM|date=2005-01-27|accessdate=2007-02-27}}</ref> This issue is further exacerbated by DirectShow's merit system, where filter implementations end up competing with one another by registering themselves with increasingly elevated priority.<ref name="Arms Race"/>

Microsoft's Ted Youmans explained that "[[DirectShow]] was based on the merit system, with the idea being that, using a combination of the filter<U+2019>s merit and how specific the media type/sub type is, one could reasonably pick the right codec every time. It wasn't really designed for a competing merit nuclear arms race."<ref name="Arms Race"/>

A tool to help in the troubleshooting of "codec hell" issues usually referenced is the [[GSpot]] Codec Information Appliance, which can be useful in determining what codec is used to render video files in [[Audio Video Interleave|AVI]] and other containers.<ref>{{cite web|url=http://www.headbands.com/gspot/|title=The GSpot Codec Information Appliance|accessdate=2010-08-18}}</ref> [[GraphEdit]] can also help understanding the sequence of filters that DirectShow is using to render the media file. Codec hell can be resolved by manually building filter graphs, using a media player that supports ignoring or overriding filter merits, or by using a filter manager that changes filter merits in the [[Windows Registry]].<ref name="GraphEdit"/>

==End-user tools==
<!-- inheritly technical matter here -->
DirectShow, being a developer-centric framework and API, does not directly offer end-user control over encoding content, nor does it incorporate a user interface for encoding using installed codecs or to different formats; instead, it relies on developers to develop software using the API. In contrast, other multimedia frameworks such as [[QuickTime]] or [[Video for Windows]] allow end-users to perform basic video-related tasks such as re-encoding using a different codec and editing files and streams.{{Citation needed|date=August 2010}} The convenience offered by an end-user GUI is apparent since the [[Audio Video Interleave|AVI]] format and codecs used by [[Video for Windows]] still remain in use, for example [[VirtualDub]].

== See also ==
* [[GraphStudio]] <U+2013> [[open source]] GraphEdit project
* [[DirectX Media Objects]]
* [[DirectX plugin]]s
* [[DXVA|DirectX Video Acceleration]]
* [[DSPlayer|DirectShowPlayer]]

== References ==
* {{cite web | title=MSDN DirectShow documentation | url=http://msdn.microsoft.com/en-us/library/ms783323.aspx | accessdate=July 7, 2007 }}
* {{cite book | author=Pesce, Mark D. | title=Programming Microsoft DirectShow for Digital Video and Television | publisher=Microsoft Press | year=2003 | isbn=0-7356-1821-6}} ([http://www.microsoft.com/mspress/books/sampchap/6381.asp#SampleChapter Sample Chapter])

== Notes ==
{{Reflist|colwidth=30em}}

== External links ==
* [http://msdn.microsoft.com/en-us/library/ms783323.aspx DirectShow on MSDN] <U+2013> official documentation
* [http://wiki.jriver.com/index.php/DirectShow_Playback_Guide JRiver DirectShow Playback Guide] <U+2013> tutorial on DirectShow with general-purpose information
* [http://www.mitov.com/html/videolab.html VideoLab] <U+2013> video processing library with DirectShow support (free for non commercial purposes)
* [http://www.ac3directshowfilter.com/ AC3 Directshow Filter] <U+2013> AC3 audio filters with DirectShow support
* [http://www.codeproject.com/KB/directx/DirectShowVMR9.aspx Using the DirectShow Video Mixing Renderer 9 filter] <U+2013> An article on using DirectShow VMR9 by Sameer Ahmed

{{Microsoft APIs}}

{{DEFAULTSORT:Directshow}}
[[Category:Microsoft application programming interfaces]]
[[Category:Multimedia frameworks]]
[[Category:DirectX|Show DirectShow]]

[[ar:<U+062F><U+0627><U+064A><U+0631><U+0643><U+062A> <U+0634><U+0648>]]
[[cs:DirectShow]]
[[es:DirectShow]]
[[ko:<U+B2E4><U+C774><U+B809><U+D2B8><U+C1FC>]]
[[it:DirectShow]]
[[lt:DirectShow]]
[[nl:DirectShow]]
[[ja:DirectShow]]
[[pl:DirectShow]]
[[pt:DirectShow]]
[[ru:DirectShow]]
[[sv:DirectShow]]
[[zh:DirectShow]]
