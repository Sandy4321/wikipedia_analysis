{{Distinguish|USB flash drive|Memory card}}
{{Refimprove|date=April 2008}}
{{Memory types}}
[[Image:USB flash drive.JPG|thumb|right|A [[USB flash drive]]. The chip on the left is the flash memory. The [[Flash memory controller|controller]] is on the right.]]

'''Flash memory''' is a [[non-volatile memory|non-volatile]] [[computer storage]] technology that can be electrically erased and reprogrammed. It is primarily used in [[memory card]]s, [[USB flash drive]]s, and [[solid-state drive]]s for general storage and transfer of data between computers and other digital products. It is a specific type of [[EEPROM]] (electrically erasable programmable read-only memory) that is erased and programmed in large blocks; in early flash the entire chip had to be erased at once. Flash memory costs far less than byte-programmable EEPROM and therefore has become the dominant technology wherever a significant amount of non-volatile, [[Solid state (electronics)|solid state]] storage is needed. Example applications include [[Personal digital assistant|PDA]]s (personal digital assistants), laptop computers, [[digital audio player]]s, [[digital camera]]s and [[mobile phone]]s. It has also gained popularity in console video game hardware, where it is often used instead of EEPROMs or battery-powered [[static RAM]] (SRAM) for game save data.

Since flash memory is non-volatile, no power is needed to maintain the information stored in the chip. In addition, flash memory offers fast read [[access time]]s (although not as fast as volatile [[dynamic random access memory|DRAM]] memory used for main memory in PCs) and better kinetic shock resistance than [[hard disk]]s. These characteristics explain the popularity of flash memory in portable devices. Another feature of flash memory is that when packaged in a "memory card," it is extremely durable, being able to withstand intense pressure, extremes of temperature, and even immersion in water.<ref>http://news.bbc.co.uk/1/hi/england/8510314.stm</ref>

Although technically a type of EEPROM, the term "EEPROM" is generally used to refer specifically to non-flash EEPROM which is erasable in small blocks, typically bytes. Because erase cycles are slow, the large block sizes used in flash memory erasing give it a significant speed advantage over old-style EEPROM when writing large amounts of data.{{Citation needed|reason=That's a very serious assertion.|date=October 2009}}

==History==
Flash memory (both [[#NOR memories|NOR]] and [[#NAND memories|NAND]] types) was invented by Dr. [[Fujio Masuoka]] while working for [[Toshiba]] circa 1980.<ref>{{cite web|last=Fulford|first= Benjamin|title=Unsung hero|publisher=Forbes|date=24 June 2002|accessdate=2008-03-18|url= http://www.forbes.com/global/2002/0624/030.html}}</ref><ref>{{patent|US|4531203|Fujio Masuoka}}</ref> According to Toshiba, the name "flash" was suggested by Dr. Masuoka's colleague, Mr. Shoji Ariizumi, because the erasure process of the memory contents reminded him of the [[flash (photography)|flash of a camera]]. Dr. Masuoka presented the invention at the ''[[Institute of Electrical and Electronics Engineers|IEEE]] 1984 [[International Electron Devices Meeting]]'' (IEDM) held in [[San Francisco, California]].

[[Intel Corporation]] saw the massive potential of the invention and introduced the first commercial NOR type flash chip in 1988.<ref>{{citeweb|url=http://www2.electronicproducts.com/NAND_vs_NOR_flash_technology-article-FEBMSY1-FEB2002.aspx|title=NAND vs. NOR flash technology: The designer should weigh the options when using flash memory|last=Tal|first=Arie|month=February|year= 2002|accessdate=2010-07-31}}</ref> NOR-based flash has long erase and write times, but provides full address and data buses, allowing [[random access]] to any memory location. This makes it a suitable replacement for older [[read-only memory]] (ROM) chips, which are used to store program code that rarely needs to be updated, such as a computer's [[BIOS]] or the [[firmware]] of [[set-top box]]es. Its endurance is 10,000 to 1,000,000 erase cycles.{{Citation needed|date=July 2010}}<!-- This citation originally used here requires a membership to access and violates Wikipedia's source requirements
<ref name="IEEE_Flash_Intro">{{Cite news |last=Bez |first=R. |last2=Camerlenghi |first2=E. |last3=Modelli |first3=A. |last4=Visconti |first4=A.|title=Introduction to flash memory |periodical=Proceedings of the IEEE |publication-date=2003-04 |volume=91 |issue=4 |pages=489<U+2013>502 |url=http://ieeexplore.ieee.org/iel5/5/26994/01199079.pdf?tp=&arnumber=1199079&isnumber=26994 |accessdate=2008-08-15 |doi=10.1109/JPROC.2003.811702|year=2003}}</ref>--> NOR-based flash was the basis of early flash-based removable media; [[CompactFlash]] was originally based on it, though later cards moved to less expensive NAND flash.

{{Ref improve section|date=July 2010}}
Toshiba announced NAND flash at the 1987 ''International Electron Devices Meeting''. It has reduced erase and write times, and requires less chip area per cell, thus allowing greater storage density and lower cost per bit than NOR flash; it also has up to ten times the endurance of NOR flash. However, the I/O interface of NAND flash does not provide a random-access external address bus. Rather, data must be read on a block-wise basis, with typical block sizes of hundreds to thousands of bits. This made NAND flash unsuitable as a drop-in replacement for program ROM since most microprocessors and microcontrollers required byte-level random access. In this regard NAND flash is similar to other secondary storage devices such as hard disks and [[optical media]], and is thus very suitable for use in mass-storage devices such as [[memory card]]s. The first NAND-based removable media format was [[SmartMedia]] in 1995, and many others have followed, including [[MultiMediaCard]], [[Secure Digital]], [[Memory Stick]] and [[xD-Picture Card]]. A new generation of memory card formats, including [[RS-MMC]], [[miniSD]] and [[microSD]], and [[Intelligent Stick]], feature extremely small form factors. For example, the microSD card has an area of just over 1.5&nbsp;cm<U+00B2>, with a thickness of less than 1&nbsp;mm. microSD capacities range from 64&nbsp;MB to 32&nbsp;GB, as of March 2010.<ref name="32gb-support">{{cite web|url=http://www.computerworld.com/s/article/9173879/SanDisk_ships_32GB_mobile_memory_card|title=SanDisk ships 32GB mobile memory card|date=March 22, 2010|publisher=Computerworld}}</ref>

==Principles of operation==
[[Image:Flash cell structure.svg|thumb|right|A flash memory cell.]]

Flash memory stores information in an array of memory cells made from [[floating-gate transistor]]s. In traditional [[single-level cell]] (SLC) devices, each cell stores only one bit of information. Some newer flash memory, known as [[multi-level cell]] (MLC) devices, can store more than one bit per cell by choosing between multiple levels of electrical charge to apply to the floating gates of its cells.

The floating gate may be conductive (typically polysilicon in most kinds of flash memory) or non-conductive (as in [[SONOS]] flash memory).<ref>
[http://www.cypress.com/?rID=2750 "PSoC Designer(TM) Device Selection Guide - AN2209"]: "... The [[PSoC]] ... utilizes a unique Flash process: [[SONOS]]"
</ref>

===Floating-gate transistor===
In flash memory, each memory cell resembles a standard [[MOSFET]], except the transistor has two gates instead of one. On top is the control gate (CG), as in other MOS transistors, but below this there is a floating gate (FG) insulated all around by an oxide layer. The FG is interposed between the CG and the MOSFET channel. Because the FG is electrically isolated by its insulating layer, any electrons placed on it are trapped there and, under normal conditions, will not discharge for many years. When the FG holds a charge, it [[electric field screening|screens]] (partially cancels) the [[electric field]] from the CG, which modifies the [[threshold voltage]] (V<sub>T</sub>) of the cell. During read-out, a voltage intermediate between the possible threshold voltages is applied to the CG, and the MOSFET channel will become conducting or remain insulating, depending on the V<sub>T</sub> of the cell, which is in turn controlled by charge on the FG. The current flow through the MOSFET channel is sensed and forms a [[binary code]], reproducing the stored data. In a multi-level cell device, which stores more than one [[bit]] per cell, the amount of current flow is sensed (rather than simply its presence or absence), in order to determine more precisely the level of charge on the FG.

<br clear=right/>
===NOR flash===
[[Image:NOR flash layout.svg|thumb|right| NOR flash memory wiring and structure on silicon]]

In [[NOR gate]] flash, each cell has one end connected directly to ground, and the other end connected directly to a bit line.

This arrangement is called "NOR flash" because it acts like a NOR gate: when one of the word lines is brought high, the corresponding storage transistor acts to pull the output bit line low.
<br clear=right/>

====Programming====
[[Image:Flash-Programming.svg|thumb|right|Programming a NOR memory cell (setting it to logical 0), via hot-electron injection.]]

A single-level NOR flash cell in its default state is logically equivalent to a binary "1" value, because current will flow through the channel under application of an appropriate voltage to the control gate. A NOR flash cell can be programmed, or set to a binary "0" value, by the following procedure:
*an elevated on-voltage (typically >5 V) is applied to the CG
*the channel is now turned on, so electrons can flow from the source to the drain (assuming an NMOS transistor)
*the source-drain current is sufficiently high to cause some high energy electrons to jump through the insulating layer onto the FG, via a process called [[hot carrier injection|hot-electron injection]]
<br clear=right/>

====Erasing====
[[Image:Flash erase.svg|thumb|right|Erasing a NOR memory cell (setting it to logical 1), via quantum tunneling.]]

To erase a NOR flash cell (resetting it to the "1" state), a large voltage ''of the opposite polarity'' is applied between the CG and source, pulling the electrons off the FG through [[quantum tunneling]]. Modern NOR flash memory chips are divided into erase segments (often called blocks or sectors). The erase operation can only be performed on a block-wise basis; all the cells in an erase segment must be erased together. Programming of NOR cells, however, can generally be performed one byte or word at a time.
<br clear=right/>

====Internal charge pumps====
Despite the need for high programming and erasing voltages, virtually all flash chips today require only a single supply voltage, and produce the high voltages via on-chip [[charge pump]]s.

===NAND flash===
[[Image:Nand flash structure.svg|thumb|right|NAND flash memory wiring and structure on silicon]]

NAND flash also uses floating-gate [[transistor]]s, but they are connected in a way that resembles a [[NAND gate]]: several transistors are connected in series, and only if all word lines are pulled high (above the transistors' V<sub>T</sub>) is the bit line pulled low. These groups are then connected via some additional transistors to a NOR-style bit line array.

To read, most of the word lines are pulled up above the V<sub>T</sub> of a programmed bit, while one of them is pulled up to just over the V<sub>T</sub> of an erased bit. The series group will conduct (and pull the bit line low) if the selected bit has not been programmed.

Despite the additional transistors, the reduction in ground wires and bit lines allows a denser layout and greater storage capacity per chip. In addition, NAND flash is typically permitted to contain a certain number of faults (NOR flash, as is used for a [[BIOS]] ROM, is expected to be fault-free). Manufacturers try to maximize the amount of usable storage by shrinking the size of the transistor below the size where they can be made reliably, to the size where further reductions would increase the number of faults faster than it would increase the total storage available.

NAND flash uses [[tunnel injection]] for writing and [[tunnel release]] for erasing. NAND flash memory forms the core of the removable [[Universal Serial Bus|USB]] storage devices known as [[USB flash drive]]s, as well as most [[memory card]] formats and [[solid-state drive]]s available today.
<br clear=right/>

==Limitations==
===Block erasure===
One limitation of flash memory is that although it can be read or programmed a byte or a word at a time in a random access fashion, it must be erased a "block" at a time. This generally sets all bits in the block to 1. Starting with a freshly erased block, any location within that block can be programmed. However, once a bit has been set to 0, only by erasing the entire block can it be changed back to 1. In other words, flash memory (specifically NOR flash) offers random-access read and programming operations, but cannot offer arbitrary random-access rewrite or erase operations. A location can, however, be rewritten as long as the new value's 0 bits are a superset of the over-written value's. For example, a [[nibble]] value may be erased to 1111, then written as 1110. Successive writes to that nibble can change it to 1010, then 0010, and finally 0000. Essentially, erasure sets (all) bits, and programming can only clear bits. Filesystems designed for flash devices can make use of this capability to represent sector metadata.

Although data structures in flash memory cannot be updated in completely general ways, this allows members to be "removed" by marking them as invalid. This technique may need to be modified for [[Multi-level Cell]] devices, where one memory cell holds more than one bit.

Unfortunately common flash devices such as USB keys and memory cards provide only a block-level interface, or FTL (Flash Translation Layer), which writes to a different cell each time to wear-level the device. This prevents incremental writing within a block, however it does help the device from being prematurely worn out by abusive and/or poorly designed hardware/software. For example, nearly all consumer devices ship formatted with MS-FAT filesystem, which predates flash memory, having been designed for DOS, and disk media.

===Memory wear===
Another limitation is that flash memory has a finite number of program-erase cycles (typically written as P/E&nbsp;cycles). Most commercially available flash products are guaranteed to withstand around 100,000 P/E&nbsp;cycles, before the wear begins to deteriorate the integrity of the storage.<ref>{{cite paper|url= http://www.snia.org/forums/sssi/knowledge/education/SSSI_NAND_Reliability_White_Paper.pdf|format= pdf|title=NAND Flash Solid State Storage for the Enterprise, An In-depth Look at Reliability|date= April 2009|author=Jonathan Thatcher, Fusion-io; Tom Coughlin, Coughlin Associates; Jim Handy, Objective-Analysis; Neal Ekker, Texas Memory Systems|publisher=Solid State Storage Initiative (SSSI) of the Storage Network Industry Association (SNIA)}}</ref> [[Micron Technology]] and [[Sun Microsystems]] announced an SLC flash memory chip rated for 1,000,000 P/E&nbsp;cycles on December 17, 2008.<ref>{{cite press release|url=http://www.micron.com/about/news/pressrelease.aspx?id=5F432D92EFA2B68E|title=Micron Collaborates with Sun Microsystems to Extend Lifespan of Flash-Based Storage, Achieves One Million Write Cycles|date=2008-12-17| publisher=Micron Technology, Inc.}}</ref>

The guaranteed cycle count may apply only to block zero (as is the case with [[Thin small-outline package|TSOP]] NAND parts), or to all blocks (as in NOR). This effect is partially offset in some chip firmware or file system drivers by counting the writes and dynamically remapping blocks in order to spread write operations between sectors; this technique is called [[wear leveling]]. Another approach is to perform write verification and remapping to spare sectors in case of write failure, a technique called [[Bad sector|Bad Block]] Management (BBM). For portable consumer devices, these wearout management techniques typically extend the life of the flash memory beyond the life of the device itself, and some data loss may be acceptable in these applications. For high reliability data storage, however, it is not advisable to use flash memory that would have to go through a large number of programming cycles. This limitation is meaningless for 'read-only' applications such as [[thin clients]] and [[routers]], which are only programmed once or at most a few times during their lifetimes.

==Low-level access==
The low-level interface to flash memory chips differs from those of other memory types such as [[dynamic random access memory|DRAM]], [[Read-only memory|ROM]], and [[EEPROM]], which support bit-alterability (both zero to one and one to zero) and [[random-access]] via externally accessible [[address bus]]es.

While NOR memory provides an external address bus for read and program operations (and thus supports random-access); unlocking and erasing NOR memory must proceed on a block-by-block basis. With NAND flash memory, read and programming operations must be performed page-at-a-time while unlocking and erasing must happen in block-wise fashion.

===NOR memories===
Reading from NOR flash is similar to reading from random-access memory, provided the address and data bus are mapped correctly. Because of this, most microprocessors can use NOR flash memory as [[execute in place]] (XIP) memory, meaning that programs stored in NOR flash can be executed directly from the NOR flash without needing to be copied into RAM first. NOR flash may be programmed in a random-access manner similar to reading. Programming changes bits from a logical one to a zero. Bits that are already zero are left unchanged. Erasure must happen a block at a time, and resets all the bits in the erased block back to one. Typical block sizes are 64, 128, or 256&nbsp;KB.

Bad block management is a relatively new feature in NOR chips. In older NOR devices not supporting bad block management, the software or [[device driver]] controlling the memory chip must correct for blocks that wear out, or the device will cease to work reliably.

The specific commands used to lock, unlock, program, or erase NOR memories differ for each manufacturer. To avoid needing unique driver software for every device made, a special set of [[Common Flash Memory Interface|CFI]] commands allow the device to identify itself and its critical operating parameters.

Apart from being used as random-access ROM, NOR memories can also be used as storage devices by taking advantage of random-access programming. Some devices offer read-while-write functionality so that code continues to execute even while a program or erase operation is occurring in the background. For sequential data writes, NOR flash chips typically have slow write speeds compared with NAND flash.

===NAND memories===<!-- This section is linked from [[Centrino]] -->
NAND flash architecture was introduced by Toshiba in 1989. These memories are accessed much like [[block size (data storage and transmission)|block devices]] such as hard disks or memory cards. Each block consists of a number of pages. The pages are typically 512<ref name="ieee_cf">
{{Cite news|last=Kim|first=Jesung|last2=Kim|first2=John Min|last3=Noh|first3=Sam H.|last4=Min| first4=Sang Lyul|last5=Cho|first5=Yookun|publication-date=2002-05|title=A Space-Efficient Flash Translation Layer for CompactFlash Systems|periodical=Proceedings of the IEEE|volume=48|issue=2| pages=366<U+2013>375|url=http://ieeexplore.ieee.org/iel5/30/21778/01010143.pdf?tp=&isnumber=&arnumber=1010143|accessdate=2008-08-15}}</ref> or 2,048 or 4,096 bytes in size. Associated with each page are a few bytes (typically 1/32 of the data size) that can be used for storage of an [[error correcting code]] (ECC) [[checksum]].

Typical block sizes include:
*32 pages of 512+16 bytes each for a block size of 16&nbsp;KB
*64 pages of 2,048+64 bytes each for a block size of 128&nbsp;KB<ref>[http://download.micron.com/pdf/technotes/nand/tn2907.pdf TN-29-07: Small-Block vs. Large-Block NAND Flash Devices] Explains 512+16 and 2048+64-byte blocks</ref>
*64 pages of 4,096+128 bytes each for a block size of 256&nbsp;KB<ref>[http://www.nxp.com/documents/application_note/AN10860.pdf AN10860 LPC313x NAND flash data and bad block management] Explains 4096+128-byte blocks.</ref>
*128 pages of 4,096+128 bytes each for a block size of 512&nbsp;KB.

While reading and programming is performed on a page basis, erasure can only be performed on a block basis.<ref name="L Smith">{{cite web |url=http://www.flashmemorysummit.com/English/Collaterals/Proceedings/2009/20090812_T1B_Smith.pdf |title=NAND Flash Solid State Storage Performance and Capability -- an In-depth Look |author=Smith, Lance L. |date=2009-08-18 |publisher=SNIA |accessdate=2010-06-17}}</ref> Another limitation of NAND flash is data in a block can only be written sequentially. Number of Operations (NOPs) is the number of times the sectors can be programmed. So far this number for MLC flash is always one whereas for SLC flash it is four.{{Citation needed|date=August 2008}}

NAND devices also require bad block management by the device driver software, or by a separate [[Flash memory controller|controller]] chip. SD cards, for example, include controller circuitry to perform bad block management and [[wear leveling]]. When a logical block is accessed by high-level software, it is mapped to a physical block by the device driver or controller. A number of blocks on the flash chip may be set aside for storing mapping tables to deal with bad blocks, or the system may simply check each block at power-up to create a bad block map in RAM. The overall memory capacity gradually shrinks as more blocks are marked as bad.

NAND relies on ECC to compensate for bits that may spontaneously fail during normal device operation. A typical ECC will correct a one bit error in each 2048 bits (256 bytes) using 22 bits of ECC code, or a one bit error in each 4096 bits (512 bytes) using 24 bits of ECC code.<ref name="samsung_ecc">{{cite web|url=http://www.elnec.com/sw/samsung_ecc_algorithm_for_256b.pdf| format=PDF|title=Samsung ECC algorithm|accessdate=2008-08-15|publisher=Samsung|date=2008-06}}</ref> If ECC cannot correct the error during read, it may still detect the error. When doing erase or program operations, the device can detect blocks that fail to program or erase and mark them bad. The data is then written to a different, good block, and the bad block map is updated.

Most NAND devices are shipped from the factory with some bad blocks which are typically identified and marked according to a specified bad block marking strategy. By allowing some bad blocks, the manufacturers achieve far higher yields than would be possible if all blocks had to be verified good. This significantly reduces NAND flash costs and only slightly decreases the storage capacity of the parts.

When executing software from NAND memories, [[virtual memory]] strategies are often used: memory contents must first be [[paging|paged]] or copied into memory-mapped RAM and executed there (leading to the common combination of NAND + RAM). A [[memory management unit]] (MMU) in the system is helpful, but this can also be accomplished with [[overlay (programming)|overlays]]. For this reason, some systems will use a combination of NOR and NAND memories, where a smaller NOR memory is used as software ROM and a larger NAND memory is partitioned with a file system for use as a non-volatile data storage area.

NAND is best suited to systems requiring high capacity data storage. This type of flash architecture offers higher densities and larger capacities at lower cost with faster erase, sequential write, and sequential read speeds, sacrificing the random-access and execute in place advantage of the NOR architecture.

===Standardization===
A group called the [[Open NAND Flash Interface Working Group]] (ONFI) has developed a standardized low-level interface for NAND flash chips. This allows interoperability between conforming NAND devices from different vendors. The ONFI specification version 1.0<ref>{{cite web|url=http://onfi.org/wp-content/uploads/2009/02/onfi_1_0_gold.pdf |format=PDF|title=Open NAND Flash Interface Specification |publisher=Open NAND Flash Interface|date=28 December 2006|accessdate=2010-07-31}}</ref> was released on December 28, 2006. It specifies:
*a standard physical interface ([[pinout]]) for NAND flash in [[Thin small-outline package|TSOP]]-48, WSOP-48, [[Land grid array|LGA]]-52, and [[Ball grid array|BGA]]-63 [[IC package|packages]]
*a standard command set for reading, writing, and erasing NAND flash chips
*a mechanism for self-identification (comparable to the [[Serial Presence Detect]]ion feature of SDRAM memory modules)

The ONFI group is supported by major NAND Flash manufacturers, including [[Hynix]], [[Intel]], [[Micron Technology]], and [[Numonyx]], as well as by major manufacturers of devices incorporating NAND flash chips.<ref>A list of ONFi members is available at http://onfi.org/membership/.</ref>

A group of vendors, including [[Intel]], [[Dell]], and [[Microsoft]] formed a Non-Volatile Memory Host Controller Interface (NVMHCI) Working Group.<ref>{{cite web|url=http://www.intel.com/pressroom/archive/releases/20070530corp.htm|title=Dell, Intel And Microsoft Join Forces To Increase Adoption Of NAND-Based Flash Memory In PC Platforms|publisher=Intel|date=May 30, 2007|location=REDMOND, Wash |accessdate=2008-11-30}}</ref> The goal of the group is to provide standard software and hardware programming interfaces for nonvolatile memory subsystems, including the "flash cache" device connected to the [[PCI Express]] bus.

==Distinction between NOR and NAND flash==
NOR and NAND flash differ in two important ways:
*the connections of the individual memory cells are different
*the interface provided for reading and writing the memory is different (NOR allows random-access for reading, NAND allows only page access)
These two are linked by the design choices made in the development of NAND flash. A goal of NAND flash development was to reduce the chip area required to implement a given capacity of flash memory, and thereby to reduce cost per bit and increase maximum chip capacity so that flash memory could compete with magnetic storage devices like hard disks.{{Citation needed|date=October 2009}}

NOR and NAND flash get their names from the structure of the interconnections between memory cells.<ref name="toshibaguide">See pages 5-7 of Toshiba's "NAND Applications Design Guide" under [[#External links|External links]].</ref> In NOR flash, cells are connected in parallel to the bitlines, allowing cells to be read and programmed individually. The parallel connection of cells resembles the parallel connection of transistors in a CMOS NOR gate. In NAND flash, cells are connected in series, resembling a NAND gate. The series connections consume less space than parallel ones, reducing the cost of NAND flash. It does not, by itself, prevent NAND cells from being read and programmed individually.

When NOR flash was developed, it was envisioned as a more economical and conveniently rewritable ROM than contemporary [[EPROM]] and [[EEPROM]] memories. Thus random-access reading circuitry was necessary. However, it was expected that NOR flash ROM would be read much more often than written, so the write circuitry included was fairly slow and could only erase in a block-wise fashion. On the other hand, applications that use flash as a replacement for disk drives do not require word-level write address, which would only add to the complexity and cost unnecessarily.{{Citation needed|date=October 2009}}

Because of the series connection and removal of wordline contacts, a large grid of NAND flash memory cells will occupy perhaps only 60% of the area of equivalent NOR cells<ref name="flash_overview">{{Cite news|last=Pavan|first=Paolo|last2=Bez|first2=Roberto|last3=Olivo| first3=Piero|last4=Zononi|first4=Enrico|publication-date=1997-08|title=Flash Memory Cells <U+2014> An Overview|periodical=Proceedings of the IEEE|volume=85|issue=8|pages=1248<U+2013>1271|url= http://ieeexplore.ieee.org/iel3/5/13533/00622505.pdf?tp=&isnumber=&arnumber=622505|accessdate= 2008-08-15|doi=10.1109/5.622505|year=1997}}</ref> (assuming the same [[CMOS]] process resolution, e.g. 130[[nanometer|nm]], 90&nbsp;nm, 65&nbsp;nm). NAND flash's designers realized that the area of a NAND chip, and thus the cost, could be further reduced by removing the external address and data bus circuitry. Instead, external devices could communicate with NAND flash via sequential-accessed command and data registers, which would internally retrieve and output the necessary data. This design choice made random-access of NAND flash memory impossible, but the goal of NAND flash was to replace hard disks, not to replace ROMs.

===Write Endurance===
The write endurance of SLC Floating Gate NOR flash is typically equal or greater than that of NAND flash, while MLC NOR & NAND Flash have similar Endurance capabilities. Example Endurance cycle ratings listed in datasheets for NAND and NOR Flash are provided.
*SLC NAND Flash is typically rated at about 100K cycles (Samsung OneNAND KFW4G16Q2M)
*MLC NAND Flash is typically rated at about 5K-10K cycles (Samsung K9G8G08U0M)
*SLC Floating Gate NOR Flash has typical Endurance rating of 100K to 1,000K cycles (Numonyx M58BW 100K; [[Spansion]] S29CD016J 1000K)
*MLC Floating Gate NOR Flash has typical Endurance rating of 100K cycles (Numonyx J3 Flash)

However, by applying certain algorithms and design paradigms such as wear leveling and memory over-provisioning, the endurance of a storage system can be tuned to serve specific requirements.<ref>[http://www.wdc.com/WDProducts/SSD/whitepapers/en/NAND_Evolution_0812.pdf] Western Digital White Paper describing calculation and effects of SSD endurance</ref>

==Flash file systems==
{{Main|Flash file system}} {{Unreferenced section|date=January 2010}}

Because of the particular characteristics of flash memory, it is best used with either a controller to perform wear leveling and error correction or specifically designed flash file systems, which spread writes over the media and deal with the long erase times of NOR flash blocks{{Citation needed|date=January 2010}}. The basic concept behind flash file systems is: When the flash store is to be updated, the file system will write a new copy of the changed data to a fresh block, remap the file pointers, then erase the old block later when it has time.

In practice, flash file systems are only used for "[[Memory Technology Device]]s" ("MTD"), which are embedded flash memories that do not have a controller. Removable flash [[memory card]]s and [[USB flash drive]]s have built-in controllers to perform wear leveling and error correction so use of a specific flash file system does not add any benefit{{Citation needed|date=January 2010}}.

==Capacity==
Multiple chips are often arrayed to achieve higher capacities for use in consumer electronic devices such as multimedia players or [[GPS]]. The capacity of flash chips generally follows [[Moore's Law]] because they are manufactured with many of the same [[integrated circuits]] techniques and equipment.

Consumer flash drives typically have sizes measured in powers of two (e.g. 512&nbsp;MB, 8&nbsp;GB). This includes [[Solid-state drive|SSD]]s as hard drive replacements {{Citation needed|date=May 2009}}, even though traditional [[hard drive]]s tend to use [[SI prefix|decimal units]]. Thus, a 64&nbsp;GB SSD is actually 64<U+00D7>1024<U+00B3> bytes. In reality, most users will have slightly less capacity than this available, due to the space taken by filesystem metadata.

In 2005, Toshiba and [[SanDisk]] developed a NAND flash chip capable of storing 1&nbsp;GB of data using [[Multi-level Cell]] (MLC) technology, capable of storing two bits of data per cell. In September 2005, [[Samsung Electronics]] announced that it had developed the world<U+2019>s first 2&nbsp;GB chip.<ref>{{cite news|first=Anton|last=Shilov|url=http://www.xbitlabs.com/news/memory/display/20050912212649.html|title=Samsung Unveils 2GB Flash Memory Chip|publisher=X-bit labs|date= September 12, 2005|accessdate=2008-11-30}}</ref>

In March 2006, Samsung announced flash hard drives with a capacity of 4&nbsp;GB, essentially the same order of magnitude as smaller laptop hard drives, and in September 2006, Samsung announced an 8&nbsp;GB chip produced using a 40-nm manufacturing process.<ref>{{cite news|first=Wolfgang|last= Gruener|url=http://www.tgdaily.com/content/view/28504/135/|title=Samsung announces 40 nm Flash, predicts 20 nm devices|publisher=TG Daily|date=September 11, 2006|accessdate=2008-11-30}}</ref>

In January 2008, Sandisk announced availability of their 16&nbsp;GB MicroSDHC and 32&nbsp;GB SDHC Plus cards.<ref>[http://www.sandisk.com/Corporate/PressRoom/PressReleases/PressRelease.aspx?ID=4079 12 GB MicroSDHC]</ref><ref>[http://www.sandisk.com/Corporate/PressRoom/PressReleases/PressRelease.aspx?ID=4091 32 GB SDHC Plus]</ref>

In 2009, Kingston announced a 256&nbsp;GB Flash Drive available only in the UK and other parts of Europe.  As of 2010, however, it is available in the USA.

There are still flash-chips manufactured with capacities under or around 1&nbsp;MB, e.g., for BIOS-ROMs and embedded applications.

==Transfer rates==
NAND flash memory cards are much faster at reading than writing so it is the maximum read speed that is commonly advertised.
As a chip wears out, its erase/program operations slow down considerably{{Citation needed|reason=That's a very serious assertion. How much slowdown exactly, if any. Arent you confusing between chip slowdown vs slowdown caused flash filesystem fragmentation.|date=May 2010}}, requiring more retries and bad block remapping. Transferring multiple small files, each smaller than the chip-specific block size, could lead to much a lower rate. Access latency also influences performance, but less so than with their hard drive counterpart.

The speed is sometimes quoted in MB/s (megabytes per second), or as a multiple of that of a legacy single speed CD-ROM, such as 60x, 100x or 150x. Here 1x is equivalent to 150&nbsp;KB per second. For example, a 100x memory card gives 150&nbsp;KB x 100 = 15,000KB/s = 14.65&nbsp;MB/s.

Performance also depends on the quality of memory controllers. Even when the only change to manufacturing is die-shrink, the absence of an appropriate controller can result in degraded speeds.<ref>[http://www.dailytech.com/article.aspx?newsid=16407 Samsung Confirms 32nm Flash Problems, Working on New SSD Controller]</ref>

==Applications==
===Serial flash===
Serial flash is a small, low-power flash memory that uses a serial interface, typically [[Serial Peripheral Interface Bus|SPI]], for sequential data access. When incorporated into an [[embedded system]], serial flash requires fewer wires on the [[printed circuit board|PCB]] than parallel flash memories, since it transmits and receives data one bit at a time. This may permit a reduction in board space, power consumption, and total system cost.

There are several reasons why a serial device, with fewer external pins than a parallel device, can significantly reduce overall cost:
*Many [[application-specific integrated circuit|ASICs]] are pad-limited, meaning that the size of the [[die (integrated circuit)|die]] is constrained by the number of [[wire bond]] pads, rather than the complexity and number of gates used for the device logic. Eliminating bond pads thus permits a more compact integrated circuit, on a smaller die; this increases the number of dies that may be fabricated on a [[wafer (electronics)|wafer]], and thus reduces the cost per die.
*Reducing the number of external pins also reduces assembly and [[IC package|packaging]] costs. A serial device may be packaged in a smaller and simpler package than a parallel device.
*Smaller and lower pin-count packages occupy less PCB area.
*Lower pin-count devices simplify PCB [[routing (EDA)|routing]].

There are two major SPI flash types. The Atmel [[AT45]] "DataFlash(tm)" was the first type and is characterized by small pages
and one or more internal SRAM page buffers allowing a complete page to be read to the buffer, partially modified, and
then written back. The second type is called "SPI Flash" and typically has larger sectors. The smallest sectors
typically found in an "SPI flash" is 4 kB, but they can be as large as 64 kB.
Since the "SPI Flash" lacks an internal SRAM buffer, the complete page must be read out and modified
before written back, making it slow to manage. "SPI Flash" is cheaper than "DataFlash" and is therefore
a good choice when the application is code shadowing.

The two types are not easily exchangeable, since they do not have the same pinout.
and the command sets are also incompatible.

====Firmware storage====
With the increasing speed of modern CPUs, parallel flash devices are often much slower than the memory bus of the computer they are connected to. Conversely, modern [[Static RAM|SRAM]] offers access times below 10&nbsp;[[nanosecond|ns]], while [[DDR2 SDRAM|DDR2]] [[SDRAM]] offers access times below 20&nbsp;ns. Because of this, it is often desirable to [[shadow RAM|shadow]] code stored in flash into RAM; that is, the code is copied from flash into RAM before execution, so that the CPU may access it at full speed. Device [[firmware]] may be stored in a serial flash device, and then copied into SDRAM or SRAM when the device is powered-up.<ref>Many serial flash devices implement a ''bulk read'' mode and incorporate an internal address counter, so that it is trivial to configure them to transfer their entire contents to RAM on power-up. When clocked at 50 MHz, for example, a serial flash could transfer a 64 [[Mbit]] firmware image in less than two seconds.</ref> Using an external serial flash device rather than on-chip flash removes the need for significant process compromise (a process that is good for high speed logic is generally not good for flash and vice-versa). Once it is decided to read the firmware in as one big block it is common to add compression to allow a smaller flash chip to be used. Typical applications for serial flash include storing firmware for [[hard drive]]s, [[Ethernet]] controllers, [[DSL modem]]s, [[wireless card|wireless network devices]], etc.

===Flash memory as a replacement for hard drives===
{{Main|Solid-state drive}}
{{Update|date=October 2009}}

An obvious extension of flash memory would be as a replacement for [[hard disk]]s. Flash memory does not have the mechanical limitations and latencies of hard drives, so the idea of a [[solid-state drive]], or SSD, is attractive when considering speed, noise, power consumption, and reliability. Flash drives are considered serious candidates for mobile device secondary storage; they are not yet competitors for hard drives in desktop computers or servers with [[RAID]] and [[Storage area network|SAN]] architectures.

There remain some aspects of flash-based SSDs that make the idea unattractive. Most important, the cost per gigabyte of flash memory remains significantly higher than that of platter-based hard drives. Although this ratio is decreasing rapidly for flash memory, it is not yet clear that flash memory will catch up to the capacities and affordability offered by platter-based storage. Still, research and development is sufficiently vigorous that it is not clear that it will not happen, either.

There is also some concern that the finite number of P/E&nbsp;cycles of flash memory would render flash memory unable to support an operating system. This seems to be a decreasing issue as warranties on flash-based SSDs are approaching those of current hard drives.<ref>{{cite web|url= http://www.storagesearch.com/semico-art1.html|title=Flash Memory vs. HDD - Who Will Win?| publisher=STORAGEsearch |date= |accessdate=2008-11-30}}</ref><ref>{{cite web|url= http://www.storagesearch.com/bitmicro-art1.html|title=Flash Solid State Disks - Inferior Technology or Closet Superstar?|publisher=STORAGEsearch|date=|accessdate=2008-11-30}}</ref>

In June 2006, [[Samsung Electronics]] released the first flash-memory based PCs, the Q1-SSD and Q30-SSD, both of which used 32&nbsp;GB SSDs, and were at least initially available only in [[South Korea]].<ref>{{cite web|url=http://www.samsung.com/he/presscenter/pressrelease/pressrelease_20060524_0000257996.asp|title=Samsung Electronics Launches the World<U+2019>s First PCs with NAND Flash-based Solid State Disk|work=Press Release|publisher=Samsung|date=May 24, 2006| accessdate=2008-11-30}}</ref> Dell Computer introduced a 32GB SSD option on its Latitude D420 and D620 ATG laptops in April 2007<U+2014>at $549 more than a hard-drive equipped version.<ref>{{cite web|url= http://www.engadget.com/2007/04/24/dell-joins-the-fray-offers-ssd-in-latitude-d420-d620/|title= Dell joins the fray, offers SSD in Latitude D420, D620|publisher=Engadget|date=April 24, 2007| accessdate=2009-10-27}}</ref>

At the [[Las Vegas metropolitan area|Las Vegas]] [[Consumer Electronics Show|CES 2007]] Summit [[Taiwan]]ese memory company [[A-DATA]] showcased [[Solid-state drive|SSD]] hard disk drives based on Flash technology in capacities of 32&nbsp;GB, 64&nbsp;GB and 128&nbsp;GB.<ref>{{cite web|url= http://www.theinquirer.net/default.aspx?article=36841|title=Future of Flash revealed}}</ref>
Sandisk announced an OEM 32&nbsp;GB 1.8" SSD drive at CES 2007.<ref>{{cite web|url= http://www.sandisk.com/Oem/Default.aspx?CatID=1477|title=SanDisk SSD Solid State Drives}}</ref> The [[XO-1 (laptop)|XO-1]], developed by the [[OLPC|One Laptop Per Child (OLPC)]] association, uses flash memory rather than a hard drive. As of March 2009, a Salt Lake City company called Fusion-io claims the fastest SSD with sequential read/write speeds of 1500&nbsp;MB/1400&nbsp;MB's per second.<ref>[http://www.fusionio.com/press/Fusion-io-Announces-the-ioDrive-Duo-The-World-s-Fastest-and-Most-Innovative-SSD/ Fusion-io]</ref>

Rather than entirely replacing the hard drive, hybrid techniques such as [[hybrid drive]] and [[ReadyBoost]] attempt to combine the advantages of both technologies, using flash as a high-speed [[cache]] for files on the disk that are often referenced, but rarely modified, such as application and operating system [[executable]] files. Also, Addonics has a PCI adapter for four CF cards,<ref>{{cite web|url=http://www.addonics.com/products/flash_memory_reader/ad4cfprj.asp|title= Addonics PCI adapter for 4 CF cards}}</ref> creating a RAID-able array of solid-state storage that is much cheaper than the hardwired-chips PCI card kind.

Early versions of the [[ASUS Eee PC]] used a flash-based SSD of 2&nbsp;GB to 20&nbsp;GB, depending on model, although later versions of the machine use conventional hard disks. The [[Apple Inc.]] [[Macbook Air]] has the option to upgrade the standard hard drive to a 128&nbsp;GB Solid State hard drive. The [[Lenovo]] [[ThinkPad#ThinkPad X300|ThinkPad X300]] also features a built-in 64&nbsp;GB Solid State Drive. The Apple [[iPad]] has flash-based SSD's of 16, 32, and 64&nbsp;GB.

Sharkoon has developed a device that uses six [[Secure Digital card#SDHC|SDHC]] cards in [[RAID]]-0 as an SSD alternative; users may use more affordable High-Speed 8&nbsp;GB SDHC cards to get similar or better results than can be obtained from traditional SSDs at a lower cost.

==Industry==
One source states that, in 2008, the flash memory industry includes about US$9.1 billion in production and sales. [[Apple Inc.]] is the third largest purchaser of flash memory, consuming about 13% of production by itself.<ref>{{cite journal|last=Deffree|first=Suzanne|year=2008|month= April|title=Apple sneezes, flash industry gets sick|journal=EDN|volume=2008|issue=7|page=74| accessdate= 2008-04-19|url=http://www.edn.com/index.asp?layout=article&articleid=CA6544754}}</ref> Other sources put the flash memory market at a size of more than US$20 billion in 2006, accounting for more than eight percent of the overall semiconductor market and more than 34 percent of the total semiconductor memory market.<ref>{{cite journal|last=Yinug|first=Christopher Falan|year=2007| month=July|title=The Rise of the Flash Memory Market: Its Impact on Firm Behavior and Global Semiconductor Trade Patterns|journal=Journal of International Commerce and Economics|url= http://www.usitc.gov/journal/Final_falan_article1.pdf|format=PDF|accessdate= 2008-04-19}}</ref>

==Flash scalability==
[[Image:NAND scaling timeline.png|right|thumb|350px|The aggressive trend of process design rule shrinks in NAND Flash memory technology effectively accelerates Moore's Law.]]

Due to its relatively simple structure and high demand for higher capacity, NAND flash memory is the most aggressively scaled technology among electronic devices. The heavy competition among the top few manufacturers only adds to the aggressiveness. Current projections show the technology to reach approximately 20&nbsp;nm by around late 2011. While the expected shrink timeline is a factor of two every three years per original version of [[Moore's law]], this has recently been accelerated in the case of NAND flash to a factor of two every two years.

As the feature size of flash memory cells reach the minimum limit (currently estimated ~20&nbsp;nm), further Flash density increases will be driven by greater levels of MLC, possibly 3-D stacking of transistors, and process improvements. Even with these advances, it may be impossible to economically scale Flash to smaller and smaller dimensions. Many promising new technologies (such as [[Ferroelectric RAM|FeRAM]], [[Magnetoresistive Random Access Memory|MRAM]], [[Programmable metallization cell|PMC]], [[Phase-change memory|PCM]], and others) are under investigation and development as possible more scalable replacements for Flash.<ref name="future">{{Cite book|last=Kim|first=Kinam|last2=Koh|first2=Gwan-Hyeob|publication-date=2004-05|title=Future Memory Technology including Emerging New Memories|publisher=Proceedings of the 24th International Conference on Microelectronics|place=Serbia and Montenegro|date=2004-05-16|pages=377<U+2013>384|url= http://ieeexplore.ieee.org/iel5/9193/29143/01314646.pdf?tp=&isnumber=&arnumber=1314646|accessdate= 2008-08-15}}</ref>

==See also==
*[[List of flash file systems]]
*[[Secure USB drive]]
*[[Open NAND Flash Interface Working Group]]
*[[Write amplification]]

==References==
{{More footnotes|date=October 2008}}
{{Reflist|2}}

==External links==
*[http://www.photonics.com/Content/ReadArticle.aspx?ArticleID=22453 New Pulse Measurement System For Semiconductor Device Characterization]
*[http://news.thomasnet.com/fullstory/547012 Semiconductor Characterization System has diverse functions]
*[http://www.dataio.com/pdf/NAND/Toshiba/NandDesignGuide.pdf.pdf NAND Flash Applications Design Guide]

{{DEFAULTSORT:Flash Memory}}
[[Category:Computer memory]]
[[Category:Non-volatile memory]]
[[Category:Solid-state computer storage media]]

[[ar:<U+0630><U+0627><U+0643><U+0631><U+0629> <U+0648><U+0645><U+064A><U+0636><U+064A><U+0629>]]
[[bs:Flash memorija]]
[[bg:<U+0424><U+043B><U+0430><U+0448>-<U+043F><U+0430><U+043C><U+0435><U+0442>]]
[[ca:Mem<U+00F2>ria flaix]]
[[cs:Flash pam<U+011B><U+0165>]]
[[da:Flash-lager]]
[[de:Flash-Speicher]]
[[es:Memoria flash]]
[[eo:Fulmomemoro]]
[[fa:<U+062D><U+0627><U+0641><U+0638><U+0647> <U+0641><U+0644><U+0634>]]
[[fr:M<U+00E9>moire flash]]
[[ko:<U+D50C><U+B798><U+C2DC> <U+BA54><U+BAA8><U+B9AC>]]
[[hi:<U+092B><U+094D><U+0932><U+0948><U+0936> <U+092E><U+0947><U+092E><U+094B><U+0930><U+0940>]]
[[id:Memori kilat]]
[[ia:Memoria flash]]
[[it:Memoria flash]]
[[he:<U+05D6><U+05D9><U+05DB><U+05E8><U+05D5><U+05DF> <U+05D4><U+05D1><U+05D6><U+05E7>]]
[[kk:Flash <U+0436><U+0430><U+0434><U+044B>]]
[[la:Memoria fulgurea]]
[[hu:Flashmem<U+00F3>ria]]
[[ms:Ingatan kilat]]
[[nl:Flashgeheugen]]
[[ja:<U+30D5><U+30E9><U+30C3><U+30B7><U+30E5><U+30E1><U+30E2><U+30EA>]]
[[no:Flashminne]]
[[pl:Pami<U+0119><U+0107> flash]]
[[pt:Mem<U+00F3>ria flash]]
[[ro:Memorie flash]]
[[ru:<U+0424><U+043B><U+0435><U+0448>-<U+043F><U+0430><U+043C><U+044F><U+0442><U+044C>]]
[[sq:Kujtesa rrufe]]
[[simple:Flash memory]]
[[sk:Flash pam<U+00E4><U+0165>]]
[[sl:Bliskovni pomnilnik]]
[[sr:<U+0424><U+043B><U+0435><U+0448> <U+043C><U+0435><U+043C><U+043E><U+0440><U+0438><U+0458><U+0430>]]
[[fi:Flash-muisti]]
[[sv:Flashminne]]
[[ta:<U+0BA4><U+0BBF><U+0B9F><U+0BC0><U+0BB0><U+0BCD> <U+0BA8><U+0BBF><U+0BA9><U+0BC8><U+0BB5><U+0B95><U+0BAE><U+0BCD>]]
[[tr:Fla<U+015F> bellek]]
[[uk:<U+0424><U+043B><U+0435><U+0448>-<U+043F><U+0430><U+043C>'<U+044F><U+0442><U+044C>]]
[[ur:<U+0644><U+0645><U+0639><U+06CC> <U+062D><U+0627><U+0641><U+0638><U+06C1>]]
[[vi:B<U+1ED9> nh<U+1EDB> flash]]
[[zh:<U+95EA><U+5B58>]]
