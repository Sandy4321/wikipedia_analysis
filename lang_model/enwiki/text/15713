{{Context|date=October 2009}}

In [[computer science]], a '''linear grammar''' is a [[context-free grammar]] that has at most one nonterminal in the [[Left-hand side and right-hand side of an equation|right hand side]] of its productions.

A '''linear language''' is a language generated by some linear grammar.

==Example==
A simple linear grammar  is ''G'' with ''N'' = {S}, <U+03A3> = {a, b}, ''P'' with start symbol ''S'' and rules
: S &rarr; aSb
: S &rarr; &epsilon;
It generates the language <math>\{ a^ib^i \; | \; i \geq 0\}</math>.

==Relationship with regular grammars==
Two special types of linear grammars are the following:
* the '''left-linear''' or [[Regular grammar|left regular grammars]], in which '''all nonterminals''' in right hand sides are '''at the left ends''';
* the '''right-linear''' or right regular grammars, in which '''all nonterminals''' in right hand sides are '''at the right ends'''.
Collectively, these two special types of linear grammars are known as the [[regular grammar]]s; both can describe exactly the [[regular language]]s.

Another special type of linear grammar is the following:
* linear grammars in which all nonterminals in right hand sides are at the left or right ends, but not necessarily all at the same end.

By inserting new nonterminals, every linear grammar can be brought into this form without affecting the language generated.
For instance, the rules of ''G'' above can be replaced with
: S &rarr; aA
: A &rarr; Sb
: S &rarr; &epsilon;

Hence, linear grammars of this special form can generate all linear languages.

==Expressive power==
We have seen that all regular languages are linear; the example gave a linear, non-regular language.
All linear languages are [[context-free language|context-free]] by definition; a simple example of a context-free, non-linear language is the [[Dyck language]] of well-balanced bracket pairs. Hence, the regular languages are a [[proper subset]] of the linear ones, which in turn are a proper subset of the context-free languages.

While the linear languages that are regular languages are deterministic, there exist linear languages that are nondeterministic. For example, the language of even-length [[palindrome]]s on the alphabet of 0 and 1 has the linear grammar S <U+2192> 0S0 | 1S1 | <U+03B5>.  An arbitrary string of this language cannot be parsed without reading all its letters first which means that a pushdown automaton has to try alternative state transisions to accommodate for the different possible lengths of a semi-parsed string. <ref>{{cite book | last = [[John Hopcroft|Hopcroft]] | first = John | coauthors = [[Rajeev Motwani]] & [[Jeffrey Ullman]] | title = [[Introduction to automata theory, languages, and computation]] 2nd edition | year = 2001 | publisher = Addison-Wesley | pages = 249<U+2013>253 }}</ref> This language is nondeterministic. Since nondeterministic context-free languages cannot be accepted in linear time, linear languages cannot be accepted in linear time in the general case. Furthermore, because of the unsolvability of the recongition of [[deterministic context-free language]]s,<ref>{{cite journal | last=Greibach | first=Sheila | title=The Unsolvability of the Recognition of Linear Context-Free Languages | year=1966 | month=October | work=Journal of the ACM | volume=13 | issue=4}}</ref> it is undecidable whether a linear language can be parsed in linear time.

==Closure properties==
If ''L'' is a linear language and ''M'' is a regular language, then the intersection <math>L \cap M</math> is again a linear language; in other words, the linear languages are closed under intersection with regular sets. Furthermore, the linear languages are closed under [[String_operations#String_homomorphism|homomorphism]] and [[String_operations#String_homomorphism|inverse homomorphism]].<ref>John E. Hopcroft and Jeffrey D. Ullman, ''[[Introduction to Automata Theory, Languages, and Computation]]'', Addison-Wesley Publishing, Reading Massachusetts, 1979. ISBN 0-201-02988-X., Ex. 11.1, pp. 282f</ref> These three closure properties show that the linear languages form a [[cone (formal languages)|full trio]]. Full trios in general are language families that enjoy a couple of other desirable mathematical properties.

==References==
<references/>

{{DEFAULTSORT:Linear Grammar}}
[[Category:Formal languages]]

[[de:Lineare Grammatik]]
[[fr:Grammaire lin<U+00E9>aire]]
[[it:Grammatica lineare]]
[[ru:<U+041F><U+0440><U+0430><U+0432><U+043E><U+043B><U+0438><U+043D><U+0435><U+0439><U+043D><U+0430><U+044F> <U+0433><U+0440><U+0430><U+043C><U+043C><U+0430><U+0442><U+0438><U+043A><U+0430>]]
