In [[graph theory]] and [[theoretical computer science]], the '''longest path problem''' is the problem of finding a [[path (graph theory)|simple path]] of maximum length in a given graph. A path is called simple if it does not have any repeated vertices; the length of a path may either be measured by its number of edges, or (in [[weighted graph]]s) by the sum of the weights of its edges. In contrast to the [[shortest path problem]], which can be solved in polynomial time in graphs without negative-weight cycles, the longest path problem is [[NP-hard]], meaning that it cannot be solved in [[polynomial time]] for arbitrary graphs unless&nbsp;[[P&nbsp;=&nbsp;NP]]. Stronger hardness results are also known showing that it is difficult to [[approximation algorithm|approximate]]. However, it has a [[linear time]] solution for [[directed acyclic graph]]s, which has important applications in finding the [[Critical path method|critical path]] in scheduling problems.

==NP-hardness==
The NP-hardness of the unweighted longest problem can be shown using a reduction from the [[Hamiltonian path problem]]: a graph ''G'' has a Hamiltonian path if and only if its longest path has length ''n''&nbsp;&minus;&nbsp;1, where ''n'' is the number of vertices in ''G''. Because the Hamiltonian path problem is NP-complete, this reduction shows that the [[decision problem|decision version]] of the longest path problem is also NP-complete. In this decision problem, the input is a graph ''G'' and a number ''k''; the desired output is "yes" if ''G'' contains a path of ''k'' or more edges, and ''no'' otherwise.<ref>{{citation|title=Combinatorial Optimization: Polyhedra and Efficiency, Volume 1|volume=24|series=Algorithms and Combinatorics|first=Alexander|last=Schrijver|authorlink=Alexander Schrijver|publisher=Springer|year=2003|isbn=9783540443896|page=114|url=http://books.google.com/books?id=mqGeSQ6dJycC&pg=PA114}}.</ref>

If the longest path problem could be solved in polynomial time, it could be used to solve this decision problem, by finding a longest path and then comparing its length to the number&nbsp;''k''. Therefore, the longest path problem is NP-hard. It is not NP-complete, because it is not a decision problem.<ref>{{citation|title=Introduction To Algorithms|first1=Thomas H.|last1=Cormen|author1-link=Thomas H. Cormen|first2=Charles E.|last2=Leiserson|author2-link=Charles E. Leiserson|first3=Ronald L.|last3=Rivest|author3-link=Ron Rivest|first4=Clifford|last4=Stein|author4-link=Clifford Stein|edition=2nd|publisher=MIT Press|year=2001|isbn=9780262032933|url=http://books.google.com/books?id=NLngYyWFl_YC&pg=PA978|page=978}}.</ref>

In weighted [[complete graph]]s with non-negative edge weights, the weighted longest path problem is the same as the [[Travelling salesman problem|Travelling salesman path problem]], because the longest path always includes all vertices.<ref>{{citation|title=Combinatorial Optimization: Networks and Matroids|first=Eugene L.|last=Lawler|authorlink=Eugene Lawler|publisher=Courier Dover Publications|year=2001|isbn=9780486414539|page=64|url=http://books.google.com/books?id=m4MvtFenVjEC&pg=PA64}}.</ref>

==Acyclic graphs and critical paths==
A longest path between two given vertices ''s'' and ''t'' in a weighted graph ''G'' is the same thing as a shortest path in a graph &minus;''G'' derived from ''G'' by changing every weight to its negation. Therefore, if shortest paths can be found in &minus;''G'', then longest paths can also be found in ''G''.<ref name="sedge"/>

For most graphs, this transformation is not useful because it creates cycles of negative length in &minus;''G''. But if ''G'' is a [[directed acyclic graph]], then no negative cycles can be created, and longest paths in ''G'' can be found in [[linear time]] by applying a linear time algorithm for shortest paths in &minus;''G'', which is also a directed acyclic graph.<ref name="sedge">{{citation|title=Algorithms|first1=Robert|last1=Sedgewick|author1-link=Robert Sedgewick (computer scientist)|first2=Kevin Daniel|last2=Wayne|edition=4th|publisher=Addison-Wesley Professional|year=2011|isbn=9780321573513|pages=661<U+2013>666|url=http://books.google.com/books?id=idUdqdDXqnAC&pg=PA661}}.</ref> For instance, for each vertex ''v'' in a given DAG, the length of the longest path ending at ''v'' may be obtained by the following steps:
# Find a [[topological ordering]] of the given DAG.
# For each vertex ''v'' of the DAG, in the topological ordering, compute the length of the longest path ending at ''v'' by looking at its incoming neighbors and adding one to the maximum length recorded for those neighbors. If ''v'' has no incoming neighbors, set the length of the longest path ending at ''v'' to zero. In either case, record this number so that later steps of the algorithm can access it.
Once this has been done, the longest path in the whole DAG may be obtained by starting at the vertex ''v'' with the largest recorded value, then repeatedly stepping backwards to its incoming neighbor with the largest recorded value, and reversing the sequence of vertices found in this way.

The [[critical path method]] for scheduling a set of activities involves the construction of a directed acyclic graph in which the vertices represent project milestones and the edges represent activities that must be performed after one milestone and before another; each edge is weighted by an estimate of the amount of time the corresponding activity will take to complete. In such a graph, the longest path from the first milestone to the last one is the critical path, which describes the total time for completing the project.<ref name="sedge"/>

Longest paths of directed acyclic graphs may also be applied in [[layered graph drawing]]: assigning each vertex ''v'' of a directed acyclic graph ''G'' to the layer whose number is the length of the longest path ending at ''v'' results in a layer assignment for ''G'' with the minimum possible number of layers.<ref>{{citation
 | last1 = Di Battista | first1 = Giuseppe
 | last2 = Eades | first2 = Peter | author2-link = Peter Eades
 | last3 = Tamassia | first3 = Roberto | author3-link = Roberto Tamassia
 | last4 = Tollis | first4 = Ioannis G.
 | contribution = Layered Drawings of Digraphs
 | isbn = 978-0-13-301615-4
 | pages = 265<U+2013>302
 | publisher = [[Prentice Hall]]
 | title = Graph Drawing: Algorithms for the Visualization of Graphs
 | year = 1998}}.</ref>

==Approximation==
{{harvtxt|Bjorklund|Husfeldt|Khanna|2004}} write that the longest path problem in unweighted undirected graphs "is notorious for the difficulty of understanding its approximation hardness".<ref name="bhk04">{{citation
 | last1 = Bj<U+00F6>rklund | first1 = Andreas
 | last2 = Husfeldt | first2 = Thore
 | last3 = Khanna | first3 = Sanjeev
 | contribution = Approximating longest directed paths and cycles
 | location = Berlin
 | mr = 2160935
 | pages = 222<U+2013>233
 | publisher = Springer-Verlag
 | series = Lecture Notes in Computer Science
 | title = Proc. Int. Coll. Automata, Languages and Programming (ICALP 2004)
 | volume = 3142
 | year = 2004}}.</ref>
The best polynomial time approximation algorithm known for this case achieves only a very weak approximation ratio, <math> n/\exp(\Omega(\sqrt{\log n}))</math>.<ref>{{citation
 | last1 = Gabow | first1 = Harold N.
 | last2 = Nie | first2 = Shuxin
 | contribution = Finding long paths, cycles and circuits
 | doi = 10.1007/978-3-540-92182-0_66
 | location = Berlin
 | mr = 2539968
 | pages = 752<U+2013>763
 | publisher = Springer
 | series = Lecture Notes in Computer Science
 | title = International Symposium on Algorithms and Computation
 | volume = 5369
 | year = 2008}}. For earlier work with even weaker approximation bounds, see {{citation
 | last = Gabow | first = Harold N.
 | doi = 10.1137/S0097539704445366
 | issue = 6
 | journal = SIAM Journal on Computing
 | mr = 2299418
 | pages = 1648<U+2013>1671
 | title = Finding paths and cycles of superpolylogarithmic length
 | url = http://www.cs.colorado.edu/~hal/u.pdf
 | volume = 36
 | year = 2007}} and {{citation
 | last1 = Bj<U+00F6>rklund | first1 = Andreas
 | last2 = Husfeldt | first2 = Thore
 | doi = 10.1137/S0097539702416761
 | issue = 6
 | journal = [[SIAM Journal on Computing]]
 | mr = 2034242
 | pages = 1395<U+2013>1402
 | title = Finding a path of superlogarithmic length
 | volume = 32
 | year = 2003}}.</ref> For all <math>\epsilon>0</math>, it is not possible to approximate the longest path to within a factor of <math>2^{(\log n)^{1-\epsilon}}</math> unless NP is contained within [[Time complexity|quasi-polynomial deterministic time]]; however, there is a big gap between this inapproximability result and the known approximation algorithms for this problem.<ref>{{citation
 | last1 = Karger | first1 = David | author1-link = David Karger
 | last2 = Motwani | first2 = Rajeev | author2-link = Rajeev Motwani
 | last3 = Ramkumar | first3 = G. D. S.
 | doi = 10.1007/BF02523689
 | issue = 1
 | journal = [[Algorithmica]]
 | mr = 1432030
 | pages = 82<U+2013>98
 | title = On approximating the longest path in a graph
 | volume = 18
 | year = 1997}}.</ref>

In the case of unweighted but directed graphs, strong inapproximability results are known. For every <math>\epsilon>0</math> the problem cannot be approximated to within a factor of <math>n^{1-\epsilon}</math> unless P=NP, and with stronger complexity-theoretic assumptions it cannot be approximated to within a factor of <math>n/\log^{2+\epsilon} n</math>.<ref name="bhk04"/> The [[color-coding]] technique can be used to find paths of logarithmic length, if they exist, but this gives an approximation ratio of only <math>O(n/\log n)</math>.<ref name="ayz">{{citation
 | last1 = Alon | first1 = Noga | author1-link = Noga Alon
 | last2 = Yuster | first2 = Raphael
 | last3 = Zwick | first3 = Uri
 | doi = 10.1145/210332.210337
 | issue = 4
 | journal = [[Journal of the ACM]]
 | mr = 1411787
 | pages = 844<U+2013>856
 | title = Color-coding
 | volume = 42
 | year = 1995}}.</ref>

==Parameterized complexity==
The longest path problem is [[parameterized complexity|fixed-parameter tractable]] when parameterized by the length of the path. For instance, it can be solved in time linear in the size of the input graph (but exponential in the length of the path), by an algorithm that performs the following steps:
# Perform a [[depth-first search]] of the graph. Let <math>d</math> be the depth of the resulting [[Tr<U+00E9>maux tree|depth-first search tree]].
# Use the sequence of root-to-leaf paths of the depth-first search tree, in the order in which they were traversed by the search, to construct a [[path decomposition]] of the graph, with pathwidth <math>d</math>.
# Apply [[dynamic programming]] to this path decomposition to find a longest path in time <math>O(d!2^dn)</math>, where <math>n</math> is the number of vertices in the graph.
Since the output path has length at least as large as <math>d</math>, the running time is also bounded by <math>O(\ell!2^\ell n)</math>, where <math>\ell</math> is the length of the longest path.<ref>{{citation
 | last = Bodlaender | first = Hans L. | authorlink = Hans L. Bodlaender
 | doi = 10.1006/jagm.1993.1001
 | issue = 1
 | journal = Journal of Algorithms
 | mr = 1199244
 | pages = 1<U+2013>23
 | title = On linear time minor tests with depth-first search
 | volume = 14
 | year = 1993}}. For an earlier FPT algorithm with slightly better dependence on the path length, but worse dependence on the size of the graph, see {{citation
 | last = Monien | first = B.
 | contribution = How to find long paths efficiently
 | doi = 10.1016/S0304-0208(08)73110-4
 | location = Amsterdam
 | mr = 808004
 | pages = 239<U+2013>254
 | publisher = North-Holland
 | series = North-Holland Math. Stud.
 | title = Analysis and design of algorithms for combinatorial problems (Udine, 1982)
 | volume = 109
 | year = 1985}}.</ref> Using color-coding, the dependence on path length can be reduced to singly exponential.<ref name="ayz"/><ref>{{citation
 | last1 = Chen | first1 = Jianer
 | last2 = Lu | first2 = Songjian
 | last3 = Sze | first3 = Sing-Hoi
 | last4 = Zhang | first4 = Fenghui
 | contribution = Improved algorithms for path, matching, and packing problems
 | pages = 298<U+2013>307
 | title = Proc. 18th ACM-SIAM Symposium on Discrete algorithms (SODA '07)
 | url = http://faculty.cse.tamu.edu/shsze/papers/kpath.pdf
 | year = 2007}}.</ref><ref>{{citation
 | last = Koutis | first = Ioannis
 | contribution = Faster algebraic algorithms for path and packing problems
 | url = http://ccom.uprrp.edu/~ikoutis/papers/MultilinearDetection.pdf
 | doi = 10.1007/978-3-540-70575-8_47
 | location = Berlin
 | mr = 2500302
 | pages = 575<U+2013>586
 | publisher = Springer
 | series = Lecture Notes in Computer Science
 | title = International Colloquium on Automata, Languages and Programming
 | volume = 5125
 | year = 2008}}.</ref><ref>{{citation
 | last = Williams | first = Ryan | authorlink = Ryan Williams (computer scientist) 
 | arxiv = 0807.3026
 | doi = 10.1016/j.ipl.2008.11.004
 | issue = 6
 | journal = Information Processing Letters
 | mr = 2493730
 | pages = 315<U+2013>318
 | title = Finding paths of length ''k'' in ''O''*(2<sup>''k''</sup>) time
 | volume = 109
 | year = 2009}}.</ref> A similar dynamic programming technique shows that the longest path problem is also fixed-parameter tractable when parameterized by the [[treewidth]] of the graph.

For graphs of bounded [[clique-width]], the longest path can also be solved by a polynomial time dynamic programming algorithm. However, the exponent of the polynomial depends on the clique-width of the graph, so this algorithms is not fixed-parameter tractable. The longest path problem, parameterized by clique-width, is hard for the [[parameterized complexity]] class <math>W[1]</math>, showing that a fixed-parameter tractable algorithm is unlikely to exist.<ref>{{citation
 | last1 = Fomin | first1 = Fedor V.
 | last2 = Golovach | first2 = Petr A.
 | last3 = Lokshtanov | first3 = Daniel
 | last4 = Saurabh | first4 = Saket
 | contribution = Clique-width: on the price of generality
 | pages = 825<U+2013>834
 | title = Proc. 20th ACM-SIAM Symposium on Discrete Algorithms (SODA '09)
 | url = https://www.siam.org/proceedings/soda/2009/SODA09_090_fominf.pdf
 | year = 2009}}.</ref>

==Special classes of graphs==
The longest path problem may be solved in polynomial time on the [[complement graph|complements]] of [[comparability graph]]s.<ref>{{citation
 | last1 = Ioannidou | first1 = Kyriaki
 | last2 = Nikolopoulos | first2 = Stavros D.
 | doi = 10.1007/s00453-011-9583-5
 | journal = Algorithmica
 | title = The longest path problem is polynomial on cocomparability graphs
 | url = http://www.cs.uoi.gr/~stavros/J-Papers/J-2012-ALGO.pdf
 | year = 2011}}.<!-- as of 2012-12-01, online at Algorithmica but not yet assigned a volume/issue/page numbers--> For earlier work on more restrictive subclasses of co-comparability graphs, see {{citation
 | last1 = Ioannidou | first1 = Kyriaki
 | last2 = Mertzios | first2 = George B.
 | last3 = Nikolopoulos | first3 = Stavros D.
 | doi = 10.1007/s00453-010-9411-3
 | issue = 2
 | journal = [[Algorithmica]]
 | mr = 2822187
 | pages = 320<U+2013>341
 | title = The longest path problem has a polynomial solution on interval graphs
 | url = http://dro.dur.ac.uk/9047/1/9047.pdf
 | volume = 61
 | year = 2011}} and {{citation
 | last1 = Uehara | first1 = Ryuhei
 | last2 = Valiente | first2 = Gabriel
 | doi = 10.1016/j.ipl.2007.02.010
 | issue = 2
 | journal = Information Processing Letters
 | mr = 2322071
 | pages = 71<U+2013>77
 | title = Linear structure of bipartite permutation graphs and the longest path problem
 | volume = 103
 | year = 2007}}.</ref> It may also be solved in polynomial time on any class of graphs with bounded treewidth or bounded clique-width, such as the [[distance-hereditary graph]]s. However, it is NP-hard even when restricted to [[split graph]]s, [[circle graph]]s, or [[planar graph]]s.<ref>{{harvtxt|Ioannidou|Mertzios|Nikolopoulos|2011}}.</ref>

==See also==
*[[Gallai<U+2013>Hasse<U+2013>Roy<U+2013>Vitaver theorem]], a duality relation between longest paths and [[graph coloring]]
*[[Longest uncrossed knight's path]]
*[[Snake-in-the-box]], the longest [[induced path]] in a [[hypercube graph]]

==References==
{{reflist}}

== External links ==
* "[http://valis.cs.uiuc.edu/~sariel/misc/funny/longestpath.mp3 Find the Longest Path]", song by [[Daniel J. Barrett|Dan Barrett]]

[[Category:Network theory]]
[[Category:NP-complete problems]]
[[Category:Graph algorithms]]
[[Category:Computational problems in graph theory]]
[[Category:Hamiltonian paths and cycles]]
