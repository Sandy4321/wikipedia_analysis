{{lowercase|decltype}}
In the [[C++]] [[programming language]], <code>'''decltype'''</code> is an [[Operator (programming)|operator]] for querying the [[data type|type]] of an [[Expression (programming)|expression]]. It was introduced in the current version of the C++ standard, [[C++11]]. Its primary intended use is in [[generic programming]], where it is often difficult, or even impossible, to express types that depend on [[Template (C++)|template]] parameters. 

As [[generic programming]] techniques became increasingly popular throughout the 1990s, the need for a type-deduction mechanism was recognized. Many compiler vendors implemented their own versions of the operator, typically called <code>[[typeof]]</code>, and some portable implementations with limited functionality, based on existing language features were developed. In 2002, [[Bjarne Stroustrup]] proposed that a standardized version of the operator be added to the C++ language, and suggested the name "decltype", to reflect that the operator would yield the "declared type" of an expression.

<code>decltype</code>'s semantics were designed to cater to both generic library writers and novice programmers. In general, the deduced type matches the type of the object or function exactly as declared in the source code. Like the <code>[[sizeof]]</code> operator, <code>decltype</code>'s operand is not evaluated.

==Motivation==
With the introduction of [[Template (programming)|template]]s into the C++ programming language, and the advent of [[generic programming]] techniques pioneered by the [[Standard Template Library]], the need for a mechanism for obtaining the type of an [[Expression (programming)|expression]], commonly referred to as <code>[[typeof]]</code>, was recognized. In generic programming, it is often difficult or impossible to express types that depend on template parameters,<ref name="n1478"/><ref name="cleanup"/> in particular the return type of function template instantiations.<ref name="n1478"/>

Many vendors provide the <code>typeof</code> operator as a compiler extension.<ref name="ddj_gibbons"/> As early as 1997, before C++ was fully standardized, Brian Parker proposed a portable solution based on the <code>[[sizeof]]</code> operator.<ref name="ddj_gibbons"/> His work was expanded on by Bill Gibbons, who concluded that the technique had several limitations and was generally less powerful than an actual <code>typeof</code> mechanism.<ref name="ddj_gibbons"/> In an October 2000 article of ''[[Dr. Dobb's Journal]]'', [[Andrei Alexandrescu]] remarked that "[h]aving a typeof would make much template code easier to write and understand."<ref name="ddj_andrei_sizeof"/> He also noted that "typeof and sizeof share the same backend, because sizeof has to compute the type anyway."<ref name="ddj_andrei_sizeof"/> [[Andrew Koenig (programmer)|Andrew Koenig]] and Barbara E. Moo also recognized the usefulness of a built-in <code>typeof</code> facility, with the caveat that "using it often invites subtle programming errors, and there are some problems that it cannot solve."<ref name="ddj_koenig"/> They characterized the use of type conventions, like the [[typedef]]s provided by the [[Standard Template Library]], as a more powerful and general technique.<ref name="ddj_koenig"/> However, [[Steve Dewhurst]] argued that such conventions are "costly to design and promulgate", and that it would be "much easier to ... simply extract the type of the expression."<ref name="ddj_steve"/> In a 2011 article on [[C++0x]], Koenig and Moo predicted that "decltype will be widely used to make everyday programs easier to write."<ref name="ddj_koenig2011"/> 

In 2002, [[Bjarne Stroustrup]] suggested extending the C++ language with mechanisms for querying the type of an expression, and initializing objects without specifying the type.<ref name="n1478"/> Stroustrup observed that the reference-dropping semantics offered by the <code>typeof</code> operator provided by the [[GNU Compiler Collection|GCC]] and [[Edison Design Group|EDG]] compilers could be problematic.<ref name="n1478"/> Conversely, an operator returning a reference type based on the [[Value (computer science)|lvalue]]-ness of the expression was deemed too confusing. The initial proposal to the C++ standards committee outlined a combination of the two variants; the operator would return a reference type only if the declared type of the expression included a reference. To emphasize that the deduced type would reflect the "declared type" of the expression, the operator was proposed to be named <code>decltype</code>.<ref name="n1478"/>

One of the cited main motivations for the <code>decltype</code> proposal, was the ability to write perfect [[wrapper function|forwarding function]] templates.<ref name="n1705"/> It is sometimes desirable to write a generic forwarding function that returns the same type as the wrapped function, regardless of the type it is instantiated with. Without <code>decltype</code>, it is not generally possible to accomplish this.<ref name="n1705"/> An example, which also utilizes the ''[[C++11#Alternative function syntax|trailing-return-type]]'':<ref name="n1705"/>
<source lang="cpp">
int& foo(int& i);
float foo(float& f);

template <class T> auto transparent_forwarder(T& t) <U+2212>> decltype(foo(t)) {
  return foo(t);
}</source>

<code>decltype</code> is essential here because it preserves the information about whether the wrapped function returns a reference type.<ref name="msdn_decltype" />

==Semantics==
<!--
Otherwise, the result is defined simply as the type <code>T</code> of the expression if <code>e</code> is an [[Value (computer science)|rvalue]], or "reference to T" if <code>e</code> is an [[Value (computer science)|lvalue]]
-->
Similarly to the <code>[[sizeof]]</code> operator, the operand of <code>decltype</code> is unevaluated.<ref name="n2343"/> Informally, the type returned by <code>decltype(e)</code> is deduced as follows:<ref name="n1478"/>
#If the expression <code>e</code> refers to a variable in local or namespace scope, a static member variable or a function parameter, then the result is that variable's or parameter's ''declared type''
#Otherwise, if <code>e</code> is an [[Value (computer science)|lvalue]], <code>decltype(e)</code> is <code>T&</code>, where <code>T</code> is the type of e; if e is an [[Value (computer science)|xvalue]], the result is <code>T&&</code>; otherwise, e is a [[Value (computer science)|prvalue]] and the result is <code>T</code>.
<!-- Maybe add a footnote to explain id-expressions and class member access, with a ref to their definitions -->

These semantics were designed to fulfill the needs of generic library writers, while at the same time being intuitive for novice programmers, because the return type of <code>decltype</code> always matches the type of the object or function exactly as declared in the source code.<ref name="n1478"/> More formally, Rule 1 applies to unparenthesized ''id-expression''s and class member access expressions.<ref name="n2914"/> <ref name="defects"/> Example:<ref name="n2914"/>

<!-- Note: Below the type deduced for "bar()" is plain int, not const int, because prvalues of non-class types always have cv-unqualified types, despite the statically declared different type. -->

<source lang="cpp">
const int&& foo();
const int bar();
int i;
struct A { double x; };
const A* a = new A();
decltype(foo()) x1; // type is const int&&
decltype(bar()) x2; // type is int
decltype(i) x3; // type is int
decltype(a->x) x4; // type is double
decltype((a->x)) x5; // type is const double&
</source>
The reason for the difference between the latter two invocations of <code>decltype</code> is that the parenthesized expression <code>(a->x)</code> is neither an ''id-expression'' nor a member access expression, and therefore does not denote a named object.<ref name="closedissues"/> Because the expression is an lvalue, its deduced type is "reference to the type of the expression", or <code>const double&</code>.<ref name="n2343"/>

In December 2008, a concern was raised to the committee by Jaakko J<U+00E4>rvi over the inability to use <code>decltype</code> to form a ''qualified-id'',<ref name="active_issues"/> which is inconsistent with the intent that <code>decltype(e)</code> should be treated "as if it were a ''typedef-name''".<ref name="n2115"/> While commenting on the formal Committee Draft for [[C++0x]], the Japanese [[International Organization for Standardization|ISO]] member body noted that "a scope operator(::) cannot be applied to decltype, but it should be. It would be useful in the case to obtain member type(nested-type) from an instance as follows":<ref name="cd1_comments"/>
<source lang="cpp">
vector<int> v;
decltype(v)::value_type i = 0; // int i = 0;
</source>

This, and similar issues pertaining to the wording inhibiting the use of <code>decltype</code> in the declaration of a [[subclass (computer science)|derived class]] and in a [[destructor (computer science)|destructor]] call, were addressed by David Vandevoorde, and voted into the working paper in March 2010.<ref name="n3084"/><ref name="n3031"/>

==Availability==
<code>decltype</code> is included in the current version of the C++ Language Standard, [[C++11]].<ref name="n2914"/> It is provided by a number of compilers as an extension. [[Microsoft]]'s [[Visual C++|Visual C++ 2010]] compiler provides a <code>decltype</code> operator that closely mimics the semantics as described in the standards committee proposal. It can be used with both [[C++/CLI|managed]] and native code.<ref name="msdn_decltype"/> The documentation states that it is "useful primarily to developers who write template libraries."<ref name="msdn_decltype"/> <code>decltype</code> was added to the mainline of the [[GNU Compiler Collection|GCC]] C++ compiler in version 4.3,<ref name="gcc0x"/> released on March 5, 2008.<ref name="gcc43"/> The operator is also present in [[Codegear]]'s [[C++ Builder|C++ Builder 2009]],<ref name="codegear"/> the [[Intel C++ Compiler]],<ref name="intel"/> and [[Clang]].<ref name="clang"/>

==References==
{{reflist|2|refs=
<ref name="cleanup">{{cite web|url=http://www.devx.com/cplus/10MinuteSolution/37854/1954|title=Clean Up Function Syntax Mess with ''decltype''|last=Kalev|first=Danny|date=2008-05-08|publisher=DevX.com|accessdate=2009-09-04}}</ref>
<ref name="ddj_gibbons">{{cite web|url=http://www.ddj.com/cpp/184401310|title=A Portable "typeof" Operator|last=Gibbons|first=Bill|date=2000-11-01|publisher=''[[Dr. Dobb's Journal]]''|accessdate=2009-09-03}}</ref>
<ref name="ddj_andrei_sizeof">{{cite web|url=http://www.ddj.com/cpp/184403750|title=Generic<Programming>: Mappings between Types and Values|last=Alexandrescu|first=Andrei|date=2000-10-01|publisher=''[[Dr. Dobb's Journal]]''|accessdate=2009-09-03}}</ref>
<ref name="ddj_koenig">{{cite web|url=http://www.ddj.com/cpp/184401487|title=C++ Made Easier: Naming Unknown Types|last=Koenig|first=Andrew|coauthors=Barbara E. Moo|date=2002-02-01|publisher=''[[Dr. Dobb's Journal]]''|accessdate=2009-09-03}}</ref>
<ref name="ddj_steve">{{cite web|url=http://www.ddj.com/cpp/184401548|title=Common Knowledge: A Bitwise typeof Operator, Part 1|last=Dewhurst|first=Steve|date=2000-08-01|publisher=''[[Dr. Dobb's Journal]]''|accessdate=2009-09-03}}</ref>
<ref name="n1478">{{cite web|url=http://std.dkuug.dk/jtc1/sc22/wg21/docs/papers/2003/n1478.pdf|title=Decltype and auto|last=Gregor|first=Douglas|coauthors=J<U+00E4>rvi, Jaakko; Siek, Jeremy; Stroustrup, Bjarne|date=2003-04-28|publisher=ISO/IEC JTC1/SC22/WG21 <U+2013> The C++ Standards Committee|accessdate=2009-08-13}}</ref>
<ref name="ddj_koenig2011">{{cite web|url=http://drdobbs.com/cpp/231002092?pgno=2|title=4 Useful New Features in C++0x
|last=Koenig|first=Andrew|coauthors=Barbara E. Moo|date=2011-07-19|publisher=''[[Dr. Dobb's Journal]]''|accessdate=2012-01-12}}</ref>
<ref name="ddj_steve">{{cite web|url=http://www.ddj.com/cpp/184401548|title=Common Knowledge: A Bitwise typeof Operator, Part 1|last=Dewhurst|first=Steve|date=2000-08-01|publisher=''[[Dr. Dobb's Journal]]''|accessdate=2009-09-03}}</ref>

<ref name="n1705">{{cite web|url=http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1705.pdf|title=Decltype and auto (revision 4)|last=Dos Reis|first=Gabriel|coauthors=J<U+00E4>rvi, Jaakko; Stroustrup, Bjarne|date=2004-10-12|publisher=ISO/IEC JTC1/SC22/WG21 <U+2013> The C++ Standards Committee|accessdate=2009-09-04}}</ref>
<ref name="n2343">{{cite web|url=http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2343.pdf|title=Decltype (revision 7): proposed wording|last=Dos Reis|first=Gabriel|coauthors=J<U+00E4>rvi, Jaakko; Stroustrup, Bjarne|date=2007-07-18|publisher=ISO/IEC JTC1/SC22/WG21 <U+2013> The C++ Standards Committee|accessdate=2009-09-04}}
</ref>
<ref name="defects">{{cite web|url=http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2937.html|title=C++ Standard Core Language Defect Reports, Revision 65|last=Miller|first=William M.|date=2009-08-03|publisher=ISO/IEC JTC1/SC22/WG21 <U+2013> The C++ Standards Committee|accessdate=2009-09-15}}</ref>
<ref name="n2914">{{cite web|url=http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2914.pdf|title=Working Draft, Standard for Programming Language C++|last=Becker|first=Pete|publisher=ISO/IEC JTC1/SC22/WG21 <U+2013> The C++ Standards Committee|accessdate=2009-09-04}}</ref>
<ref name="closedissues">{{cite web|url=http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2938.html|title=C++ Standard Core Language Closed Issues, Revision 65|last=Miller|first=William M.|date=2009-08-03|publisher=ISO/IEC JTC1/SC22/WG21 <U+2013> The C++ Standards Committee|accessdate=2009-09-04}}</ref>
<ref name="msdn_decltype">{{cite web|url=http://msdn.microsoft.com/en-us/library/dd537655(VS.100,loband).aspx|title=decltype Operator|publisher=[[Microsoft|Microsoft Corporation]]|accessdate=2009-09-04}}</ref>
<ref name="gcc0x">{{cite web|url=http://gcc.gnu.org/projects/cxx0x.html|title=C++0x Support in GCC |date=2009-08-27|publisher=[[Free Software Foundation]]|accessdate=2009-09-04}}</ref>
<ref name="gcc43">{{cite web|url=http://gcc.gnu.org/gcc-4.3/|title=GCC 4.3 Release Series|date=2009-08-13|publisher=[[Free Software Foundation]]|accessdate=2009-09-04}}</ref>
<ref name="codegear">{{cite web|url=http://docs.codegear.com/products/rad_studio/delphiAndcpp2009/HelpUpdate2/EN/html/devwin32/typespecifierdecltype_xml.html#|title=Type Specifier decltype (C++0x)|publisher=Embarcadero Technologies|accessdate=2009-09-04}}</ref>
<ref name="intel">{{cite web|url=http://software.intel.com/sites/products/documentation/hpc/compilerpro/en-us/cpp/win/compiler_c/copts/ccpp_options/option_std.htm|title=std, Qstd|publisher=[[Intel Corporation]]|accessdate=2009-09-04}}</ref>
<ref name="clang">{{cite web|url=http://lists.cs.uiuc.edu/pipermail/cfe-dev/2011-January/013013.html|title=New C++0x feature support in Clang|date=2011-01-26|last=Gregor|first=Douglas}}</ref>
<ref name="active_issues">{{cite web|url=http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html|title=C++ Standard Core Language Active Issues, Revision 66|last=Miller|first=William M.|date=2009-09-29|publisher=ISO/IEC JTC1/SC22/WG21 <U+2013> The C++ Standards Committee|accessdate=2009-10-03}}</ref>
</ref>
<ref name="cd1_comments">{{cite web|url=http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2939.html|title=C++ CD1 Comment Status |last=Miller|first=William M.|date=2009-08-03|publisher=ISO/IEC JTC1/SC22/WG21 <U+2013> The C++ Standards Committee|accessdate=2009-10-03}}</ref>
<ref name="n2115">{{cite web|url=http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2115.pdf|title=Decltype (revision 6): proposed wording|last=Dos Reis|first=Gabriel|coauthors=J<U+00E4>rvi, Jaakko; Stroustrup, Bjarne|date=2006-11-05|publisher=ISO/IEC JTC1/SC22/WG21 <U+2013> The C++ Standards Committee|accessdate=2009-10-03}}</ref>
<ref name="n3084">{{cite web|url=http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3084.html|title=C++ Standard Core Language Defect Reports, Revision 69|last=Miller|first=William M.|date=2010-03-29|publisher=ISO/IEC JTC1/SC22/WG21 <U+2013> The C++ Standards Committee|accessdate=2010-04-10}}</ref>
<ref name="n3031">{{cite web|url=http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3031.pdf|title=Core issues 743 and 950: Additional decltype(...) uses|last=Vandevoorde|first=Daveed|date=2010-02-03|publisher=ISO/IEC JTC1/SC22/WG21 <U+2013> The C++ Standards Committee|accessdate=2010-04-10}}</ref>
<!-- Reference no longer used
<ref name="n2971">{{cite web|url=http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2971.pdf|title=Core issue 743: decltype(...) name qualifiers|last=Vandevoorde|first=Daveed|date=2009-09-22|publisher=ISO/IEC JTC1/SC22/WG21 <U+2013> The C++ Standards Committee|accessdate=2009-10-03}}</ref>
-->
}}

==External links==
*[http://www.research.att.com/~bs/C++0xFAQ.html#decltype Bjarne Stroustrup's C++0x FAQ entry for decltype]

[[Category:C++]]
[[Category:Articles with example C++ code]]
{{good article}}

[[pl:Decltype]]
[[uk:Decltype]]
[[zh:Decltype]]
