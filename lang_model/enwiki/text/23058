[[Combinatorial game theory]] has several ways of measuring '''game complexity'''. This article describes five of them: state-space complexity, game tree size, decision complexity, game-tree complexity, and computational complexity.

==Measures of game complexity==
* The '''state-space complexity''' of a game is the number of legal game positions reachable from the initial position of the game.<ref name="Allis1994"/>

Useful when this is too hard to calculate, an [[upper bound]] can often be computed by including illegal positions or positions that can never arise in the course of a game.

* The '''game tree size''' is the total number of possible games that can be played: it's the number of leaf nodes in the [[game tree]] rooted at the game's initial position.

The game tree is typically vastly larger than the state space because the same positions can occur in many games by making moves in a different order (for example, in a [[tic-tac-toe]] game with two X and one O on the board, this position could have been reached in two different ways depending on where the first X was placed). An upper bound for the size of the game tree can sometimes be computed by simplifying the game in a way that only increases the size of the game tree (for example, by allowing illegal moves) until it becomes tractable.

However, for games where the number of moves is not limited (for example by the size of the board, or by a rule about repetition of position) the game tree is infinite.

The next two measures use the idea of a '''decision tree'''.  A decision tree is a subtree of the game tree, with each position labelled with "player A wins", "player B wins" or "drawn", if that position can be proved to have that value (assuming best play by both sides) by examining only other positions in the graph.  (Terminal positions can be labelled directly; a position with player A to move can be labelled "player A wins" if any successor position is a win for A, or labelled "player B wins" if all successor positions are wins for B, or labelled "draw" if all successor positions are either drawn or wins for B.  And correspondingly for positions with B to move.)

* The '''decision complexity''' of a game is the number of leaf nodes in the smallest decision tree that establishes the value of the initial position. Such a tree includes all possible decisions for the player to move second, but only one possibility for each decision for the player who starts the game.

* The '''game-tree complexity''' of a game is the number of leaf nodes in the smallest ''full-width'' decision tree that establishes the value of the initial position.<ref name="Allis1994"/>  A full-width tree includes all nodes at each depth.

This is an estimate of the number of positions we would have to evaluate in a [[minimax]] search to determine the value of the initial position.

It's hard even to estimate the game-tree complexity, but for some games a reasonable lower bound can be given by raising the game's average [[branching factor]] to the power of the number of [[Ply (chess)|plies]] in an average game.

* The '''[[computational complexity]]''' of a game describes the [[Asymptotic analysis|asymptotic]] difficulty of a game as it grows arbitrarily large, expressed in [[big O notation]] or as membership in a [[complexity class]]. This concept doesn't apply to particular games, but rather to games that have been [[generalized game|generalized]] so they can be made arbitrarily large, typically by playing them on an ''n''-by-''n'' board. (From the point of view of computational complexity a game on a fixed size of board is a finite problem that can be solved in O(1), for example by a look-up table from positions to the best move in each position.)

==Example: tic-tac-toe==
For [[tic-tac-toe]], a simple upper bound for the size of the state space is 3<sup>9</sup> = 19,683. (There are three states for each cell and nine cells.) This count includes many illegal positions, such as a position with five crosses and no noughts, or a position in which both players have a row of three. A more careful count, removing these illegal positions, gives 5,478. And when rotations and reflections of positions are considered identical, there are only 765 essentially different positions.

A simple upper bound for the size of the game tree is 9! = 362,880. (There are nine positions for the first move, eight for the second, and so on.) This includes illegal games that continue after one side has won. A more careful count gives 255,168 possible games. When rotations and reflections of positions are considered the same, there are only 26,830 possible games.

The computational complexity of tic-tac-toe depends on how it is [[generalized game|generalized]]. A natural generalization is to [[m,n,k-game|''m'',''n'',''k''-games]]: played on an ''m'' by ''n'' board with winner being the first player to get ''k'' in a row. It is immediately clear that this game can be solved in [[DSPACE]](''mn'') by searching the entire game tree. This places it in the important complexity class [[PSPACE]]. With some more work it can be shown to be [[PSPACE-complete]].<ref name="Reisch1980">{{cite journal | author = Stefan Reisch | title = Gobang ist PSPACE-vollstandig (Gomoku is PSPACE-complete) | journal = Acta Informatica | volume = 13 | page = 5966 | year = 1980}}</ref>

==Complexities of some well-known games==
Due to the large size of game complexities, this table gives the ceiling of their [[logarithm]] to base 10. All of the following numbers should be considered with caution: seemingly-minor changes to the rules of a game can change the numbers (which are often rough estimates anyway) by tremendous factors, which might easily be much greater than the numbers shown.

{| class="wikitable sortable" cellpadding="5"
|-
!Game
!Board size
(cells)
!State-space complexity
(as [[logarithm|log]] to base 10)
!Ref
!Game-tree complexity
(as [[logarithm|log]] to base 10)
!Ref
!Average game length
([[Ply (game theory)|plies]])
![[Complexity class]] of suitable [[generalized game]]
|-
|[[Tic-tac-toe]]
|align="right"|9
|align="right"|3
|align="right"|
|align="right"|5
|align="right"|
|align="right"|9
|[[PSPACE-complete]]<ref name="Reisch1980"/>
|-
|[[Sim (pencil game)|Sim]]
|align="right"|15
|align="right"|3
|align="right"|
|align="right"|8
|align="right"|
|align="right"|14
|?, but in [[PSPACE]]<ref>[http://portal.acm.org/citation.cfm?id=728124 Wolfgang Slany: The Complexity of Graph Ramsey Games]</ref>
|-
|[[Pentomino]]es
|align="right"|64
|align="right"|12
|align="right"|
|align="right"|18
|align="right"|
|align="right"|10 <ref>Hilarie K. Orman: ''Pentominoes: A First Player Win'' in ''[http://www.msri.org/publications/books/Book29/contents.html Games of no chance]'', MSRI Publications &ndash; Volume 29, 1996, pages 339-344. Online: [http://www.msri.org/publications/books/Book29/files/orman.pdf pdf].</ref>
|?, but in [[PSPACE]]
|-
|[[Connect Four]]
|align="right"|42
|align="right"|13
|align="right"|<ref>{{cite web | title = John's Connect Four Playground | author = John Tromp | year = 2010 | url = http://www.cwi.nl/~tromp/c4/c4.html}}</ref>
|align="right"|21
|align="right"|<ref name="Allis1994"/>
|align="right"|36<ref name="Allis1994"/>
|?, but in [[PSPACE]]
|-
|[[English draughts|English draughts (8x8)]]
|align="right"|32
|align="right"|20 or 18
|align="right"|<ref>{{cite journal | author = Jonathan Schaeffer et al. | title = Checkers is Solved | journal = Science | date = July 6, 2007}}</ref> or <ref name="Allis1994"/>
|align="right"|31
|align="right"|<ref name="Allis1994"/>
|align="right"|70<ref name="Allis1994"/>
|[[EXPTIME-complete]]<ref name="robson1984">{{cite journal | author = J. M. Robson | title = N by N checkers is Exptime complete | journal = [[SIAM Journal on Computing]], | volume = 13 | issue = 2 | pages = 252&ndash;267 | year = 1984 | doi = 10.1137/0213018}}</ref>
|-
|[[Oware|Awari]]<ref>See Allis 1994 for rules</ref>
|align="right"|12
|align="right"|12
|align="right"|<ref name="Allis1994"/>
|align="right"|32
|align="right"|<ref name="Allis1994"/>
|align="right"|60<ref name="Allis1994"/>
|Generalization is unclear
|-
|[[Qubic]]
|align="right"|64
|align="right"|30
|align="right"|<ref name=Allis1994/>
|align="right"|34
|align="right"|<ref name=Allis1994/>
|align="right"|20<ref name=Allis1994/>
|[[PSPACE-complete]]<ref name="Reisch1980"/>
|-
|[[Fanorona]]
|align="right"|45
|align="right"|21
|align="right"|<ref name="Schadd2008">{{cite journal| author = M.P.D. Schadd, M.H.M. Winands, J.W.H.M. Uiterwijk, H.J. van den Herik and M.H.J. Bergsma | year = 2008 | title = Best Play in Fanorona leads to Draw | journal = [[New Mathematics and Natural Computation]] | volume = 4 |issue = 3 | pages = 369<U+2013>387| url = http://www.personeel.unimaas.nl/Maarten-Schadd/Papers/2008FanoronaJNMNC.pdf| doi = 10.1142/S1793005708001124}}</ref>
|align="right"|46
|align="right"|<ref name=Schadd2008/>
|align="right"|22
|?, but in [[EXPTIME]]
|-
|[[Nine Men's Morris]]
|align="right"|24
|align="right"|10
|align="right"|<ref name="Allis1994"/>
|align="right"|50
|align="right"|<ref name="Allis1994"/>
|align="right"|?
|?, but in [[EXPTIME]]
|-
|[[International draughts|International draughts (10x10)]]
|align="right"|50
|align="right"|30?
|align="right"|<ref name="Allis1994"/>
|align="right"|54
|align="right"|<ref name="Allis1994"/>
|align="right"|90<ref name="Allis1994"/>
|[[EXPTIME-complete]]<ref name="robson1984"/>
|-
|[[Chinese checkers]] (2 sets)
|align="right"|121
|align="right"|28
|align="right"|
|align="right"|?
|align="right"|
|align="right"|?
|[[EXPTIME]]-complete <ref name=pebble>Takumi Kasai, Akeo Adachi, and Shigeki Iwata: ''Classes of Pebble Games and Complete Problems'', SIAM Journal on Computing, Volume 8, 1979, pages 574-586. Proves completeness of the generalization to arbitrary graphs.</ref>
|-
|[[Chinese checkers]] (6 sets)
|align="right"|121
|align="right"|78
|align="right"|
|align="right"|?
|align="right"|
|align="right"|?
|[[EXPTIME]]-complete <ref name=pebble/>
|-
|[[Lines of Action]]
|align="right"|64
|align="right"|23
|align="right"|<ref name="Winands2004">{{cite book | author = Mark H.M. Winands | year = 2004 | title =  Informed Search in Complex Games | publisher = Ph.D. Thesis, Maastricht University, Maastricht, The Netherlands | isbn = 9052784299 | url = http://www.personeel.unimaas.nl/m-winands/documents/informed_search.pdf}}</ref>
|align="right"|64
|align="right"|<ref name="Winands2004"/>
|align="right"|44<ref name="Winands2004"/>
|?, but in [[EXPTIME]]
|-
|[[Reversi]]
|align="right"|64
|align="right"|28
|align="right"|<ref name="Allis1994"/>
|align="right"|58
|align="right"|<ref name="Allis1994"/>
|align="right"|58<ref name="Allis1994"/>
|[[PSPACE-complete]]<ref>{{cite journal | author = S. Iwata and T. Kasai | title = The Othello game on an n*n board is PSPACE-complete | journal = Theor. Comp. Sci. | issue = 2 | year = 1994 | pages = 329&ndash;340 | volume = 123 | doi = 10.1016/0304-3975(94)90131-7}}</ref>
|-
|[[Hex (board game)|Hex (11x11)]]
|align="right"|121
|align="right"|56
|align="right"|
|align="right"|?
|align="right"|
|align="right"|40
|[[PSPACE-complete]]<ref>{{cite journal | author = Stefan Reisch | title = Hex ist PSPACE-vollst<U+00E4>ndig (Hex is PSPACE-complete) | journal = Acta Inf. | issue = 15 | year = 1981 | pages = 167&ndash;191}}</ref>
|-
|[[Gomoku]] (15x15, freestyle)
|align="right"|225
|align="right"|105?
|align="right"|<ref name="Allis1994"/>
|align="right"|70
|align="right"|<ref name="Allis1994"/>
|align="right"|30<ref name="Allis1994"/>
|[[PSPACE-complete]]<ref name="Reisch1980"/>
|-
|[[Chess]]
|align="right"|64
|align="right"|47
|align="right"|<ref name="Shannon1950">The size of the state space and game tree for chess were first estimated in {{cite journal | author = [[Claude Shannon]] | title = Programming a Computer for Playing Chess | journal = Philosophical Magazine | volume = 41 | issue = 314 | year = 1950 | url = http://archive.computerhistory.org/projects/chess/related_materials/text/2-0%20and%202-1.Programming_a_computer_for_playing_chess.shannon/2-0%20and%202-1.Programming_a_computer_for_playing_chess.shannon.062303002.pdf}} Shannon gave estimates of 10<sup>43</sup> and 10<sup>120</sup> respectively, smaller than the upper bound in the table,
which is detailed in [[Shannon number]].</ref>
|align="right"|123
|align="right"|<ref name="Shannon1950"/>
|align="right"|80
|[[EXPTIME-complete]]<ref name="Fraenkel1981">{{cite journal | author = [[Aviezri Fraenkel]] and D. Lichtenstein | title = Computing a perfect strategy for n&times;n chess requires time exponential in n | journal = J. Comb. Th. A | issue = 31 | year = 1981 | pages = 199&ndash;214}}</ref>
|-
|[[Connect6]]
|align="right"|361
|align="right"|172
|align="right"|
|align="right"|140
|align="right"|
|align="right"|30
|[[PSPACE|PSPACE-complete]]<ref>[http://portal.acm.org/citation.cfm?id=1290250 On the fairness and complexity of generalized k-in-a-row games<!-- Bot generated title -->]</ref>
|-
|[[Backgammon]]
|align="right"|28
|align="right"|20
|align="right"|
|align="right"|144
|align="right"|
|align="right"|50-60<ref>http://books.nips.cc/papers/txt/nips04/0259.txt</ref>
|Generalization is unclear
|-
|[[Xiangqi]]
|align="right"|90
|align="right"|48
|align="right"|<ref name="Allis1994">{{cite book | author = [[Victor Allis]] | year = 1994 | title = Searching for Solutions in Games and Artificial Intelligence | publisher = Ph.D. Thesis, University of Limburg, Maastricht, The Netherlands | isbn = 9090074880 | url = http://fragrieu.free.fr/SearchingForSolutions.pdf}}</ref>
|align="right"|150
|align="right"|<ref name="Allis1994"/>
|align="right"|95<ref name="Hsu2004">{{cite journal | author = Shi-Jim Yen, Jr-Chang Chen, Tai-Ning Yang, and Shun-Chin Hsu | title = Computer Chinese Chess | month = March | year = 2004 | journal = International Computer Games Association Journal | volume = 27 | issue = 1 | pages = 3&ndash;18 | url = http://www.csie.ndhu.edu.tw/~sjyen/Papers/2004CCC.pdf}}</ref>
|?, believed to be [[EXPTIME-complete]]
|-
|[[Havannah]]
|align="right"|271
|align="right"|127
|align="right"|
|align="right"|157
|align="right"|
|align="right"|?
|?
|-
|[[Quoridor]]
|align="right"|81
|align="right"|42
|align="right"|
|align="right"|162
|align="right"|
|?
|?, but in [[PSPACE]]
|-
|[[Game of the Amazons|Amazons (10x10)]]
|align="right"|100
|align="right"|40 (upper bound)
|align="right"|
|align="right"|?
|align="right"|
|align="right"|?
|[[PSPACE-complete]]<ref>{{cite arxiv | author = R. A. Hearn | title = Amazons is PSPACE-complete | date = 2005-02-02 | eprint = cs.CC/0502013}}</ref>
|-
|[[Shogi]]
|align="right"|81
|align="right"|71
|align="right"|<ref name="Hsu2004"/>
|align="right"|226
|align="right"|<ref name="Hsu2004"/>
|align="right"|110?
|[[EXPTIME-complete]]<ref>{{cite journal | author = H. Adachi, H. Kamekawa, and S. Iwata | title = Shogi on n &times; n board is complete in exponential time | journal = Trans. IEICE | volume= J70-D | pages = 1843&ndash;1852 | year = 1987}}</ref>
|-
|[[Arimaa]]
|align="right"|64
|align="right"|43
|align="right"|<ref name="Cox2006">{{cite web | title = Analysis and Implementation of the Game Arimaa | author = Christ-Jan Cox | year = 2006 | url = http://www.unimaas.nl/games/files/msc/Cox_thesis1.pdf}}</ref>
|align="right"|402
|align="right"|<ref name="Wu2011">{{cite web | title = Move Ranking and Evaluation in the Game of Arimaa | author = David Jian Wu | year = 2011 | url = http://icosahedral.net/downloads/djwuthesis.pdf}}</ref>
|align="right"|92<ref name="Wu2011"/>
|?, but in [[EXPTIME]]
|-
|[[Go (game)|Go (19x19)]]
|align="right"|361
|align="right"|171
|align="right"|<ref>{{cite web | title = Combinatorics of Go | author = John Tromp and Gunnar Farneb<U+00E4>ck | year = 2007 | url = http://www.cwi.nl/~tromp/go/gostate.ps}} This paper derives the bounds 48&lt;log(log(''N''))&lt;171 on the number of possible games ''N''.</ref>
|align="right"|360
|align="right"|<ref name="Allis1994"/>
|align="right"|150<ref name="Allis1994"/>
|[[EXPTIME-complete]]<ref>{{Cite book | author = J. M. Robson | chapter = The complexity of Go | title = Information Processing; Proceedings of IFIP Congress | year = 1983 | pages = 413&ndash;417}}</ref>
|}

==See also==
*[[Go complexity]]
*[[Solved board games]]
*[[Shannon number]]
*[[List of NP-complete problems#Games and puzzles|list of NP-complete games and puzzles]]
*[[List of PSPACE-complete problems#Games and puzzles|list of PSPACE-complete games and puzzles]]

==Notes and references==
<references/>

==External links==
* [[David Eppstein]]'s [http://www.ics.uci.edu/~eppstein/cgt/hard.html Computational Complexity of Games and Puzzles]

[[Category:Combinatorial game theory]]

[[de:Spiel-Komplexit<U+00E4>t]]
[[es:Complejidad en los juegos]]
