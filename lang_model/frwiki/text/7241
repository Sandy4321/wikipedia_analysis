{{Voir homonymes|Automate}}
[[Image:DFA example multiplies of 3.png|thumb|300px|Fig. 1 : Automate fini reconnaissant les écritures binaires des multiples de 3.]]
Un '''automate fini''' (on dit parfois, par une traduction littérale maladroite de l'anglais '''machine à états finis''' au lieu de ''machine avec un nombre fini d'états''), en [[anglais]] ''finite state automaton'' ou ''finite state machine'' (FSA, FSM), est une [[machine]] abstraite qui est un outil fondamental en [[mathématiques discrètes]] et en [[informatique]]. On les retrouve 
dans la modélisation de processus, le contrôle, les protocoles de communication, la [[Model checking|vérification de programmes]], la
théorie de la [[calculabilité]], dans l'étude des [[Langage formel|langages formels]] et en [[compilation (informatique)|compilation]]. Ils sont utilisés dans la [[Algorithme de recherche de sous-chaîne|recherche des motifs dans un texte]].

Les automates finis reconnaissent exactement des [[Langage rationnel|langages rationnels]]. Ce sont les machines les plus simples dans la [[hiérarchie de Chomsky]],  et par conséquent ils sont moins puissants que les [[automate à pile|automates à pile]] et, bien entendu, que les [[Machine de Turing|machines de Turing]]. 

Un automate est constitué d'états et de transitions. Son comportement est dirigé par un [[mot]] fourni en entrée : l'automate passe d'état en état, suivant les transitions, à la lecture de chaque lettre de l'entrée. Dans l'exemple ci-dessus, pour l'entrée <math>1010010</math>, et si l'automate démarre en <math>s_0</math>, il passe successivement par les états <math>s_0s_1s_2s_2s_1s_2s_2s_1</math>, le calcul correspondant est
:<math>s_0\xrightarrow1s_1\xrightarrow0s_2\xrightarrow1s_2\xrightarrow0s_1\xrightarrow0s_2\xrightarrow1s_2\xrightarrow0s_1</math>.

:{| class="wikitable" align="right"
|+ Table de transition
|-
| 
<math>
\begin{array}{c|cc}
&0&1\\\hline
s_0&s_0&s_1\\
s_1&s_2&s_0\\
s_2&s_1&s_2
\end{array}
</math>
|}
L'automate est dit « fini » car il possède un nombre fini d'états : il ne dispose donc que d'une mémoire bornée. On peut très bien considérer des automates sans limitation sur le nombre d'états: la théorie qui en résulte est très analogue à la théorie habituelle.
Un automate fini peut être vu comme un [[Graphe (théorie des graphes)|graphe]] orienté [[Théorie_des_graphes#.C3.89tiquetage_et_morphismes|étiqueté]]: les états sont les sommets et les transitions sont les arêtes étiquetées. L'état initial est marqué par une flèche entrante; un état final est, selon les auteurs, soit doublement cerclé (figure 1 ci-dessus), soit marqué d'une flèche sortante (figure 2 ci-dessous).

Une autre façon commode de représenter un automate fini est sa ''table de transition''. Elle donne, pour chaque état et chaque
lettre, l'état d'arrivée de la transition. Voici à droite la table de transition de l'automate de la figure 1 :

== Aperçu ==

Il existe plusieurs types d'automates finis. Les « accepteurs » ou « reconnaisseurs » produisent en sortie une réponse « oui » ou « non », selon qu'ils acceptent (oui) ou rejettent (non) le mot présenté en entrée. Dans l'exemple ci-dessus, le mot <math>1010010</math> n'est pas accepté, mais le mot <math>10100100</math> est accepté.
D'autres automates classent l'entrée par catégorie: au lieu de répondre par oui ou par non, ils répondent par une classification; de tels automates se rencontrent par exemple en [[linguistique]]. Les automates pondérés (''weighted automata''<ref>{{harvsp|Droste et al.|2009|réf=DrosteEtAl2009}}</ref> en anglais) associent à chaque mot une valeur numérique.

Les automates finis servent à caractériser des [[Langage formel|langages]] (c'est-à-dire, des ensembles de mots finis en général): ce sont les langages composés des mots acceptés, ou langages ''reconnus'' par les automates. Des extensions des automates finis reconnaissent des langages de mots infinis. Ce sont(les [[automate sur les mots infinis|automates sur les mots infinis]]; les plus connus d'entr'eux sont  les [[Automate de Büchi|automates de Büchi]]), les [[Automate de Rabin|automates de Rabin]] et les [[Automate de Muller|automates de Muller]]. D'autres automates reconnaissent  divers types d'[[Arbre (informatique)|arbres]] ([[Automate d'arbres|automates d'arbres]]).

Une sous-catégorie importante  est celle des automates [[Déterminisme|déterministes]] (les automates généraux sont parfois appelés non déterministes [il conviendrait mieux de les qualifier de « indéterministes »]). Un automate est ''déterministe'' si, pour chacun de ses états, il y a au plus une transition pour chaque étiquette possible et si, de plus, il a un seul état initial. S'il  a exactement une transition par étiquette, on parle alors d'automate déterministe ''complet''. L'automate ci-dessus est déterministe et complet.

Dans les automates non déterministes, il peut y avoir plusieurs transitions à partir d'un état donné pour une étiquette donnée. Ici, le terme « non déterministe » ne signifie pas la négation de « déterministe » mais l'absence éventuelle de cette propriété.

Il est remarquable que tout automate fini peut être transformé, au moyen d'une opération qui peut éventuellement augmenter exponentiellement son nombre d'états, en un automate déterministe: c'est la ''déterminisation'' expliquée plus loin. 

Les automates finis se rencontrent, dans une formulations proche, dans les [[Circuit intégré|circuits intégrés]] numériques, où l'entrée, l'état et le résultat sont des vecteurs de [[Bit (informatique)|bits]] de taille fixe. Les [[Machine de Moore|machines de Moore]] et [[Machine de Mealy|machines de Mealy]] sont des automates finis avec sortie. Dans les machines de Mealy, les actions (sorties) sont liées aux transitions, tandis que dans les machines de Moore, les actions sont liées aux états. Les [[transducteur fini|transducteurs finis]] sont des automates avec sortie plus généraux.

== Définitions formelles ==

=== Automate fini ===

[[Fichier:Automate reconnaissant les mots finissant par ab.png|thumb|Fig. 2 : Automate reconnaissant les mots finissant par ab]]
Un '''automate fini''' ou ''automate fini non déterministe'' (AFN) <math>\mathcal{A}</math>
sur un [[alphabet]] <math>A</math> est un quadruplet <math>\mathcal{A} = (Q, \mathcal{F}, I, T)</math>, où:
* <math>Q</math> est un ensemble fini d''''états''',
* <math>\mathcal{F}\subset Q\times A\times Q</math> est l'ensemble des '''transitions''',
* <math>I \subseteq Q</math> est l'ensemble des état '''initiaux''',
* et <math>T \subseteq Q</math> est un ensemble d'états '''finals''' ou '''terminaux'''.

Une transition <math>f=(p,a,q)</math> est composée d'un état de départ <math>p</math>, d'une étiquette <math>a</math> et d'un état d'arrivée <math>q</math>. Un '''calcul''' <math>c</math> (on dit aussi un '''chemin''' ou une '''trace''') est une suite de transitions consécutives:
:<math>c=(p_0,a_1,p_1)(p_1,a_2p_2)\cdots(p_{n-1}a_n,p_n)</math>
Son état de départ est <math>p_0</math>, son '''étiquette''' est le mot <math>a_1a_2\cdots a_n</math> et son état d'arrivée est <math>p_n</math>. Un calcul est '''réussi''' si son état de départ est un des états initiaux, et son état d'arrivée est un des états terminaux.

Un mot <math>w</math> est '''reconnu''' ou '''accepté''' par l'automate s'il est l'étiquette d'un calcul réussi. Le '''langage reconnu''' par l'automate est l'ensemble des mots reconnus. Un langage est '''reconnaissable''' s'il est reconnu par un automate fini. 

Le langage reconnu par un automate <math>\mathcal{A}</math> est dénoté généralement par <math>L(\mathcal{A})</math>. 

==== Automate complet, automate émondé ====
* Un automate est '''complet''' si pour  tout état <math>q</math>, et pour toute lettre <math>a</math>, il existe au moins une transition partant de <math>q</math> et portant l'étiquette <math>a</math>.
* Un état <math>q</math> est '''accessible''' s'il existe un chemin d'un état initial à <math>q</math>.
* Un état <math>q</math> est '''coaccessible''' s'il existe un chemin de <math>q</math> à un état final.
* Un automate est accessible (coaccessible) si tous ses états  sont accessibles (coaccessibles).
* Un automate est '''émondé''' si tous ses états sont à la fois accessibles et coacessibles.

=== Automate fini déterministe ===
[[Fichier:Automate_reconnaissant_les_mots_commencant_par_ab.png|thumb|Fig. 3 : Automate reconnaissant les mots commençant par <math>ab</math>.]]
Un automate fini déterministe (AFD) <math>\mathcal{A}</math> sur un alphabet <math>A</math> est un automate fini qui vérifie les deux conditions suivantes:
* il possède un seul état initial;
* pour tout état <math>q</math>, et pour toute lettre <math>a</math>, il existe au plus une transition partant de <math>q</math> et portant l'étiquette <math>a</math>.

Pour un automate déterministe, la '''fonction de transition'''
<math>\delta : Q\times A \to Q</math> est la fonction partielle définie par:
<math>\delta(q,a)=q'</math> si <math>(q,a,q')</math> est une transition. 
Si la fonction de transition est partout définie, l'automate est complet.
La fonction de transition <math>\delta</math> est étendue en une application (partielle) <math>Q\times A^* \to Q</math> en posant
* <math>\delta(q,\varepsilon)</math>  pour tout état <math>q</math>. Ici <math>\varepsilon</math> dénote le mot vide.
* <math>\delta(q,wa)=\delta(\delta(q,w),a)</math> pour tout état <math>q</math>, tout mot <math>w</math> et toute lettre <math>a</math>.

Il est d'usage de remplacer la notation <math>\delta</math> par un simple point. On écrit alors <math>q\cdot w</math> à la place de <math>\delta(q,w)</math>, et la formule <math>\delta(q,wa)=\delta(\delta(q,w),a)</math> devient <math>q\cdot wa=q\cdot w\cdot a</math>. Ceci montre aussi que la fonction de transition est une [[Action_de_groupe_(mathématiques)|action]] du monoïde libre <math>A^*</math> sur l'ensemble <math>Q</math>. On rencontre aussi la notation 
<math>\mathcal{A} = (Q, i, T)</math>
pour un automate déterministe, la fonction de transition étant sous-entendue (comme la loi de composition dans un groupe, par exemple).
L'automate de la figure 3 est déterministe et incomplet. Son état initial est <math>1</math>, et il possède un seul état final, l'état <math>3</math>. Il reconnaît le langage <math>abA^*</math> sur l'alphabet <math>A=\{a,b\}</math>.

=== Extensions des automates finis ===

Il existe plusieurs généralisation des automates finis, selon la nature des étiquettes que l'on autorise sur les transitions:
Un automate '''asynchrone''' est un automate où l'étiquette d'une transition peut être le mot vide. Un telle transition est appelée une <math>\varepsilon</math>-transition.
D'autres généralisations autorisent, comme étiquettes, des mots composés de plusieurs lettres. Enfin, la généralisation la plus large autorise comme étiquettes des langages rationnels, représentés par des expressions régulières. Toutes ces extensions n'augmentent pas la puissance des automates finis: un langage reconnu par une quelconque de ces extensions est reconnaissable par un automate fini, et même par un automate fini déterministe.

== Déterminisation d'un automate fini ==

Il est toujours possible, à partir d'un automate fini <math>\mathcal{A}</math>, de construire un automate fini déterministe  <math>\mathcal{A'}</math> reconnaissant le même langage.
[[Fichier:Automate déterminisé.png|thumb|Fig. 4 : Automate déterminisé des mots se terminant par <math>ab</math>]]
[[Fichier:Automate_d%C3%A9teminis%C3%A9_%C3%A9mond%C3%A9.png|thumb|Fig. 5 : Automate déterminisé et émondé]]

La méthode est appelée l'''{{Lien|trad=Subset construction|algorithme des parties}}'' en français, et ''{{lang|en|powerset construction}}'' en anglais.

Soit <math>\mathcal{A}= (Q, \mathcal{F}, I, T)</math> un automate fini sur un alphabet  <math>A</math>.

On construit l'automate <math>\mathcal{A'}</math> comme suit :

* l'ensemble d'états de <math>\mathcal{A'}</math> est l'ensemble <math>P=2^Q</math> des parties de l'ensemble <math>Q</math>.
* l'état initial de <math>\mathcal{A'}</math> est <math>I</math>.
* les états terminaux de <math>\mathcal{A'}</math> sont les parties <math>T'</math> de <math>Q</math> qui ont une interesection non vide avec <math>T</math>
* la fonction de transition de <math>\mathcal{A'}</math> est définie, pour <math>S\subseteq Q</math> et <math>a\in A</math>, par
:<math>S\cdot a=\{s'\in Q\mid \exists s\in S: (s,a,s')\in \mathcal{F}</math>.

L'automate <math>\mathcal{A'}</math> est déterministe par construction. 

Pour l'exemple de la figure 2,
on obtient l'automate de la figure 4. Bien entendu, seuls les quatre états du haut sont utiles et même l'état <math>123</math> peut être supprimé, puisqu'il n'est pas accessible. L'automate accessible déterminisé est celui de la figure 5.

== Automates asynchrones ==
[[Fichier:Automate-asynchrone.png|thumb|Fig. 6 : Automate asynchrone reconnaissant <math>a^*b^*</math>]]
[[Fichier:Automate-synchronise.png|thumb|Fig. 7 : Automate synchronisé reconnaissant <math>a^*b^*</math>]]
Un '''automate asynchrone''' est un automate fini autorisé à posséder des transitions étiquetées par le mot vide, appelées des <math>\varepsilon</math>-transitions. L'automate de la figure 6 est asynchrone.

L'élimination des <math>\varepsilon</math>-transitions se fait par un algorithme de fermeture transitive comme suit :
* Pour chaque chemin d'un état <math>s</math> à un état <math>t</math> formé de <math>\varepsilon</math>-transitions, et pour chaque transition de <math>t</math> à un état <math>u</math> portant une lettre <math>a</math>, ajouter une transition de <math>s</math> à <math>u</math> d'étiquette <math>a</math>
* Pour chaque chemin d'un état <math>s</math> à un état <math>t</math> terminal formé de
<math>\varepsilon</math>-transitions, ajouter <math>s</math> à l'ensemble des états terminaux.
* Supprimer les <math>\varepsilon</math>-transitions.
Dans l'exemple de la figure 6, on ajoute la transition <math>1\xrightarrow b 2</math> dans la première étape, et on déclare que <math>1</math> est état final dans la deuxième étape. On obtient l'automate de la figure 7.
<!--

On obtient alors un nouvel ensemble d'états, qui constitue en fait un état de l'automate <math>A'</math>. Ensuite il suffit de réitérer l'opération tant que l'on obtient de nouveaux ensembles, et donc de nouveaux états. Au final, on obtient <math>E'</math> et <math>t'</math>. Cependant, il nous manque encore les états finaux <math>Q'</math>. Il suffit alors de regarder les états de <math>A'</math>. Si un état de <math>A'</math> contient un état final de <math>A</math>, alors celui-ci est également final.

=== Exemple ===
[[Fichier:AFN_Exemple.png|thumb|alt=Exemple d'un AFN|Exemple d'un AFN]]
Soit <math>A=(E, \Sigma, t, I, Q)</math> l'automate fini suivant :

* <math>E = \{ q0, q1, q2, q3, q4 \}</math>
* <math>\Sigma = \{ 0 , 1 \}</math>
* <math>I = \{ q0 \}</math>
* <math>Q = \{ q2 , q4 \}</math>
* <math>t = \{ (q0, 0, q0) , (q0, 1, q0) , (q0, 0, q3) , (q0, 1, q1) , (q1, 1, q2) , (q2, 0, q2) , (q2, 1, q2) , (q3, 0, q4) , (q4, 1, q4) , (q4, 0, q4)\}</math>

Cet automate n'est pas déterministe. En effet, si on part de q0 et on lit un "0", on peut aller soit dans q0, soit dans q3. On peut donc le déterminiser en appliquant la méthode décrite précédemment :

{| class="wikitable" style="text-align:center; width:80%;"
|+ Determinisation de l'automate <math>A</math>
|-
! scope=col |
! scope=col | 0
! scope=col | 1
|-
! scope=row | <math>\{q0\}</math>
|<math>\{q0, q3\}</math>
|<math>\{q0, q1\}</math>
|-
! scope=row | <math>\{q0, q3\}</math>
|<math>\{q0, q3, q4\}</math>
|<math>\{q0, q1\}</math>
|-
! scope=row |<math>\{q0, q1\}</math>
|<math>\{q0, q3\}</math>
|<math>\{q0, q1, q2\}</math>
|-
! scope=row | <math>\{q0, q3, q4\}</math>
|<math>\{q0, q3, q4\}</math>
|<math>\{q0, q1, q4\}</math>
|-
! scope=row | <math>\{q0, q1, q2\}</math>
|<math>\{q0, q2, q3\}</math>
|<math>\{q0, q1, q2\}</math>
|-
! scope=row | <math>\{q0, q1, q4\}</math>
|<math>\{q0, q3, q4\}</math>
|<math>\{q0, q1, q2, q4\}</math>
|-
! scope=row | <math>\{q0, q2, q3\}</math>
|<math>\{q0, q2, q3, q4\}</math>
|<math>\{q0, q1, q2\}</math>
|-
! scope=row | <math>\{q0, q1, q2, q4\}</math>
|<math>\{q0, q2, q3, q4\}</math>
|<math>\{q0, q1, q2, q4\}</math>
|-
! scope=row | <math>\{q0, q2, q3, q4\}</math>
|<math>\{q0, q2, q3, q4\}</math>
|<math>\{q0, q1, q2, q4\}</math>
|}

Explications :

On part de l'état initial q0 dans A. En lisant la lettre "0", on peut soit aller dans q3, soit rester dans q0. On se retrouve donc dans un état contenant q0 et q3. De la même façon, en lisant un "1", on arrive dans un état constitué de q0 et q1.

Notre nouvel automate a donc deux nouveaux états :

* <math>\{q0, q1\}</math>
* <math>\{q0, q3\}</math>

[[Fichier:AFD_Exemple.png|thumb|alt=Determinisation de l'automate précédent|Determinisation de l'automate précédent]]

Il faut donc calculer les nouvelles transitions en partant de ces états.

Comme on peut le voir, ils sont constitués de 2 états de <math>A</math>. Il faut donc chercher les transitions pour chacun de ces états séparément, puis faire l'union des résultats. Par exemple pour l'état {q0, q3}, si l'on part de q0 et qu'on lit un "0", on arrive dans q0 ou q3, et si l'on part de q3, on arrive dans q4. On a donc un nouvel état de <math>A'</math>, qui est  <math>\{q0, q3\} \cup \{q4\}</math>, c'est-à-dire <math>\{q0,q3,q4\}</math>.

De cette façon, nous allons créer de nouveaux états pour A'. On continue de cette façon jusqu'à ne plus avoir de nouveaux états.

On aura alors fini la déterminisation :

* <math>E' = \{ \{q0\}, \{q0, q3\}, \{q0, q1\}, \{q0, q3, q4\}, \{q0, q1, q2\}, \{q0, q1, q4\}, \{q0, q2, q3\}, \{q0, q1, q2, q4\} \}, \{q0, q2, q3, q4\}\}</math>
* <math>\Sigma' = \{ 0 , 1 \}</math>
* <math>i' = \{ q0 \}</math>
* <math>Q' = \{\{q0, q3, q4\}, \{q0, q1, q2\}, \{q0, q1, q4\}, \{q0, q2, q3\}, \{q0, q1, q2, q4\}, \{q0, q2, q3, q4\}\}</math>
* t'= {({q0} ,0,{q0, q3}), ({q0}, 1, {q0, q1}), ({q0, q3}, 0, {q0, q3, q4}), ({q0, q3}, 1, {q0, q1}), ({q0, q1},0, {q0, q3}), ({q0, q1}, 1, {q0, q1, q2}), ({q0, q3, q4}, 0, {q0, q3, q4}), ({q0, q3, q4}, 1, {q0, q1, q4}), ({q0, q1, q2}, 0, {q0, q2, q3}), ({q0, q1, q2}, 1, {q0, q1, q2}), ({q0, q1, q4}, 0, {q0, q3, q4}), ({q0, q1, q4}, 1, {q0, q1, q2, q4}), ({q0, q2, q3}, 0, {q0, q2, q3, q4}), ({q0, q2, q3}, 1, {q0, q1, q2}), ({q0, q1, q2, q4}, 0, {q0, q2, q3, q4}), ({q0, q1, q2, q4}, 1, {q0, q1, q2, q4}), ({q0, q2, q3, q4}, 0, {q0, q2, q3, q4}), ({q0, q2, q3, q4}, 1, {q0, q1, q2, q4})}

-->

== Autres exemples d'automates finis ==

* L'automate du début de l'article reconnaît les écritures binaire des entiers naturels multiples de 3. Par exemple, le nombre 28, dont l'écriture binaire est <math>10010</math>, est reconnu: le calcul est
:<math>s_0\xrightarrow1 s_1\xrightarrow0 s_2\xrightarrow0 s_1\xrightarrow1s_0\xrightarrow0 s_0</math>
On peut se convaincre qu'un entier <math>n</math> mène, depuis l'état initial, à <math>s_0</math>, <math>s_1</math> ou <math>s_2</math>, selon que le reste de sa divison par 3 est 0, 1, ou 2.

* L'exemple suivant décrit un automate fini déterministe complet sur l'alphabet binaire <math>0,1</math>, qui détermine si l'entrée contient un nombre pair de <math>0</math>. Cet automate intervient dans la [[Suite de Prouhet-Thue-Morse|suite de Thue-Morse]]. L'automate est
<math>\mathcal{A} = (Q,p,\{p\})</math>, avec <math>Q=\{p,q\}</math>, et la fonction de transition donnée par:
:{| class="wikitable"
|-
| 
<math>
\begin{array}{c|cc}
&0&1\\\hline
p&q&p\\
q&p&q
\end{array}
</math>
|}
Chaque fois que l'on change d'état, la parité du nombre de <math>0</math> change.

== Langages rationnels et langages reconnaissables: le théorème de Kleene ==
{{Article détaillé|Théorème de Kleene}}
Le mathématicien [[Stephen Cole Kleene|Stephen C. Kleene]] a démontré que les [[Langage formel|langages]] reconnus par les automates finis sont exactement les langages qui peuvent être décrits par les [[Expression rationnelle|expressions rationnelles]]. De manière plus concise, il y a égalité entre la famille des langages rationnels et la famille des langages reconnaissables sur un alphabet fini donné.

De plus, la démarche est constructive: pour toute expression rationnelle, on peut construire un automate fini (déterministe ou non) qui reconnaisse cette expression ; de même, pour tout automate fini (déterministe ou non), on peut exprimer sous forme d'une expression rationnelle le langage qu'il reconnaît.

== Expressions régulières et langages rationnels ==
{{Article détaillé|amorce=Article détaillé sur l'usage des expression régulières|Expression rationnelle}}
Les [[expressions régulières]] (ou ''expressions rationnelles'') sont des expressions qui décrivent les langages rationnels. Le terme ''expression régulière'' est antérieur, et les langages décrits par ces expressions sont naturellement aussi appelés '''langages réguliers'''. 

Les expressions régulières, plus ou moins étendues, servent notamment à la recherche de motifs dans un texte.

=== Expressions régulières ===
 
Une '''expression régulière''' <math>E</math> sur un alphabet <math>A</math> est soit :

* Un symbole dénotant le mot vide: <math>\epsilon</math> ou <math>1</math>;
* une lettre <math>a</math> de l'alphabet <math>A</math>;
* une union (ou somme) de deux expressions régulières <math>M</math> et <math>N</math>, notée  <math>E= M|N</math> ou <math>E= M+N</math>
* une concaténation (ou un produit) de deux expressions régulières <math>M</math> et <math>N</math>, notée  <math>E= M\cdot N</math> ou simplement <math>E= MN</math>
* une répétition d'une expression régulière <math>M</math> notée <math>E=M^*</math>.

On distingue soigneusement l'expression régulière, qui est une simple expression, c'est-à-dire une chaîne de caractères qui représente un arbre d'expression, du langage que représente cette expression appelé le langage ''dénoté'' par l'expression. Ce langage est noté <math>L(E)</math> et est défini récursivement, à partir de l'expression.

=== Construction d'automates finis à partir des expressions régulières ===

Il existe plusieurs méthodes pour construire un automate fini à partir d'une expression régulière :
* la ''méthode de Thompson''<ref>{{harvsp|Thompson|1968|réf=Thompson1968}}. Elle est attribuée à McNaughton et Yamada dans 
{{harvsp|Hopcroft et al.|2007|réf=HopcroftEtAl2007}}</ref>. 
[[Fichier:AutomatePourVideMotVideLettre.png|thumb|Automate pour l'ensemble vide, le mot vide et une lettre]]
[[Fichier:AutomatePourUnion.png|thumb|Automate pour l'union]]
[[Fichier:AutomatePourProduit.png|thumb|Automate pour le produit]]
[[Fichier:AutomatePourEtoile.png|thumb|Automate pour l'étoile]]
Elle  a été utilisée par [[Ken Thompson]] dans l'implémentation de la commande [[grep]] du système [[Unix]]. 
:[[Fichier:Automate-de-Thompson.png|thumb|400px|Automate obtenu par la méthode de Thompson pour l'expression <math>(a+b)^*b(a+\epsilon)(a+b)^*</math>]]

On construit récursivement des automates pour les composants d'une expression. La forme particulière des automates permet de les combiner avec une grande facilité. L'automate obtenu est non déterministe asynchrone.

* la ''méthode de Glushkov''<ref>{{harvsp|Glushkov|1961|réf=Glushkov1961}}</ref>. Cette méthode, attribuée à l'informaticien {{Lien|Victor Glushkov|texte=Glushkov}}, permet de construire un automate non déterministe de même taille (nombre d'états) que la taille (nombre de symboles) de l'expression régulière. 

Il a été observé que l'automate de Glushkov est le même que l'automate obtenu en supprimant les <math>\varepsilon</math>-transitions de l'automate de Thompson.

* la ''méthode des quotients ou résiduels'', attribuée à {{Lien|trad=Janusz Brzozowski (computer scientist)|Janusz Brzozowski (informaticien)|texte=Brzozowski}}<ref>{{harvsp|Brzozowski|1964|réf=Brzozowski1964}}</ref>. On forme les quotients (ou résiduels) successifs de l'expression. Il n'y en a qu'un nombre fini de différents, après application d'un certain nombre de règles de simplification qui sont l'associativité, la commutativité et l'idempotence de l'opération <math>+</math>.

Aucune de ces méthodes ne donne directement l'automate minimal d'un langage. 
Une méthode moins systématique consiste simplement à  construire des automates pour la réunion, le produit et l'étoile de langages, et d'opérer récursivement :

Soit <math>\mathcal{A}(M)</math> (respectivement <math>\mathcal{A}(N )</math>) l'automate fini reconnaissant le langage dénoté par l'expression régulière <math>M</math> (respectivement <math>N</math>). Les constructions sont les suivantes:
* Automate <math>\mathcal{A}(M|N)</math> pour l'union :
Il suffit de faire l'union disjointe des automates <math>\mathcal{A}(M)</math> et <math>\mathcal{A}(N)</math>.

* Automate <math>\mathcal{A}(M\cdot N)</math> pour le produit :
L'automate a pour états les états de  <math>\mathcal{A}(M)</math> et de  <math>\mathcal{A}(N)</math>. Les états initiaux sont ceus de  <math>\mathcal{A}(M)</math>, les terminaux sont ceux de  <math>\mathcal{A}(N)</math>. Les transitions sont celles de <math>\mathcal{A}(M)</math> et de  <math>\mathcal{A}(N)</math>, et de plus des  <math>\varepsilon</math>-transitions des états terminaux de <math>\mathcal{A}(M)</math> vers les états initiaux de  <math>\mathcal{A}(N)</math>

* Automate <math>\mathcal{A}(M^*)</math> pour l'étoile :
On part de l'automate <math>\mathcal{A}(M)</math> que l'on augmente de deux états <math>i</math> et <math>t</math>. On ajoutes des <math>\varepsilon</math>-transitions 
:de <math>i</math> à tout état initial de <math>\mathcal{A}(M)</math>
:de tout état final de <math>\mathcal{A}(M)</math> à <math>t</math>
:de <math>i</math> à <math>t</math> et de <math>t</math> à <math>i</math>
L'état  <math>i</math>  (resp. <math>t</math>) est l'état initial (resp. final) de <math>\mathcal{A}(M^*)</math>.

== Grammaires et langages rationnels ==

Les langages rationnels forment la classe la plus simple de la [[hiérarchie de Chomsky]] et sont, à ce titre, engendrés par des [[Grammaire algébrique|grammaires algébriques]] particulières, les grammaires linéaires droites ou grammaires linéaires gauches. Ce sont des grammaires où toutes les règles sont de la forme <math>X\to w</math> ou <math>X\to wY</math>, avec <math>w</math> un mot ne contenant pas de variable et <math>X,Y</math> des variables. (Pour les grammaires linéaire gauches, remplacer <math>X\to wY</math> par <math>X\to Yw</math>.)

On construit, pour une grammaire linéaire droite <math>G=(V,S,P)</math>, un automate fini (généralisé, avec des mots comme étiquettes) comme suit : les états de l'automate sont les variables de la gframmaire, plus un état spécial <math>f</math>. L'état initial est <math>S</math>, le seul état final est <math>f</math>. Chaque règle <math>X\to wY</math> fournit une transition <math>(X,w,Y)</math> de <math>X</math> vers <math>Y</math> d'étiquette <math>w</math>, et chaque règle <math>X\to w</math> fournit une transition <math>(X,w,f)</math> de <math>X</math> vers <math>f</math> d'étiquette <math>w</math>.
<!--

Exemple:

Soit l'AFN suivant qui reconnait le langage L = {acbc, acc, abc, ac}.
[[Fichier:Automate_et_grammaire.png|thumb|alt=exemple d'un AFN |Exemple d'un AFN]]
La grammaire qui correspond à ce langage est :

E → a A B c

A → <math>\epsilon</math> | c

B → <math>\epsilon</math> | b
-->

== Minimisation d'un automate fini ==
{{Article détaillé|contenu=Article détaillé: {{Lien|trad=DFA minimization|Minimisation DFA}}}}
Deux automates finis sont ''équivalents'' s'ils reconnaissent le même langage. C'est un résultat remarquable de la théorie qu'il existe, pour tout automate fini, un seul automate fini déterministe minimal (c'est-à-dire ayant un nombre minimal d'état) qui est équivalent à l'automate donné. De plus, cet automate, appelé ''automate minimal'' se calcule efficacement par l'[[algorithme de Moore]] ou l'[[algorithme de Hopcroft]] (voir les livres cités en référence).
L'unicité de l'automate ayant un nombre minimal d'état n'est plus vraie pour les automates non déterministes.

On peut ainsi décide de l'équivalence de deux automates en calculant, pour chacun, l'automate minimal correspondant, et en testant l'égalité des deux automates obtenus.

== Monoïde de transition et monoïde syntaxique ==
{{Article détaillé|monoïde syntaxique}}
Soit <math>\mathcal{A} = (Q, i, T)</math> un automate fini déterministe complet sur un alphabet <math>A</math>. Chaque mot <math>w</math> définit une application <math>\sigma(w):Q\to Q</math> donnée par 
:<math>q\sigma(w)=w\cdot q</math>
Ici l'argument de la fonction est noté à ''gauche'' de la fonction. On a 
:<math>\sigma(xy)=\sigma(x)\sigma(y)</math>
car en effet <math>q\sigma(xy)=q\cdot xy=q\cdot x\cdot y=(q\sigma(x))\cdot y= (q\sigma(x))\sigma(y)</math>. L'application <math>\sigma:A^*\to Q^Q</math> est donc un morphisme de <math>A^*</math> dans le monoïde des applications de <math>Q</math> dans lui-mëme. L'image <math>\sigma(A^*)</math> est appelée le '''monoïde de transition''' de l'automate. Lorsque l'automate est minimal, le monoïde de transition est isomorphe au [[monoïde syntaxique]] du langage reconnu par l'automate.
== Implémentation ==

Un automate fini peut être représenté en utilisant une table de transition d'état. On l'implémente alors 
sous forme logicielle avec une [[Matrice (mathématiques)|matrice]] de transition d'état.
Dans certains cas, il est plus avantageux d'utiliser une [[matrice creuse]], ou un énorme ''[[Switch_(instruction)|switch]]'' qui distribue selon les états, et pour chaque état un autre ''switchs'' qui distingue les  symboles d'entrée.

L'implémentation d'automates finis se fait aussi, sous forme matérielle, par un dispositif de [[logique programmable]] appelé {{Lien|trad=Programmable Logic Array|table logique programmable}}.

== Notes ==

{{Références|colonnes=2}}

== Bibliographie ==

* {{Ouvrage| auteur=Olivier Carton| titre=Langages formels, calculabilité et complexité| éditeur=Vuibert | année=2008 | isbn=978-2-7117-2077-4 |id=Carton2008}}

* {{Ouvrage
| auteur=Manfred Droste, Werner Kuich et Heiko Vogler
| titre=Handbook of Weighted Automata
| éditeur=Springer-Verlag
| année=2009 | isbn=3642014917 
|id=DrosteEtAl2009}}

* {{Ouvrage
| auteur=John E. Hopcroft, Rajeev Motwani, et Jeffrey D. Ullman
| titre=Introduction to Automata Theory, Languages, and Computation
| éditeur=Prentice Hall 
| année=2007 | isbn=0321462254
|commentaire = Troisième édition
|id=HopcroftEtAl2007}}

* {{Ouvrage| auteur=Jacques Sakarovitch| titre=Éléments de théorie des automates| éditeur=Vuibert | année=2003 | isbn=978-2-7117-4807-5|commentaire = Traduction anglaise avec corrections: ''Elements of Automata Theory'', Cambridge University Press 2009, {{ISBN|9780521844253}}|id=Sakarovitch}}

== Références ==

* {{Article
| auteur =J. A. Brzozowski
| titre = Derivatives of regular expressions
| journal = J. Assoc. Comput. Mach., vol. 11 
| année=1964
| pages=481–494
|id=Brzozowski1964}}

* {{Article
| auteur =V. M. Glushkov
| titre =The abstract theory of automata
| journal = Russian Math. Surveys, vol. 16 
| année= 1961
| pages = 1–53
| id=Glushkov1961}}

* {{Article
| auteur = Ken Thompson 
| titre = Regular expression search algorithm
| journal = Comm. Assoc. Comput. Mach., vol. 11
| année = 1968
| pages= 419–422
| id=Thompson1968}}

== Voir aussi ==

{{Autres projets
| commons    = automate
| wiktionary = automate
}}

===Articles connexes===
* [[Théorie des automates]]
** [[Théorie des automates finis]]
* [[Hiérarchie de Chomsky]]
* [[Langage rationnel]]
* [[Automate à pile]]
* [[Automate d'arbres]]

=== Lien externe ===
L'histoire des automates finis a été décrite dans [http://www-igm.univ-mlv.fr/~perrin/Recherche/Publications/Loi/copie3.ps Les débuts de la théorie des automates par Dominique Perrin], paru dans ''Technique et science informatiques'' 1995, vol. 14, no4, pp. 409-433.
<!--
* [http://www.lrde.epita.fr/~akim/thl/theorie-des-langages-2.pdf Théorie des langages par Francois Yvon et Akim Demaille]
-->


{{Palette informatique théorique}}

{{Portail|informatique théorique}}

[[Catégorie:Langage formel]]
[[Catégorie:Calculabilité]]
[[Catégorie:Méthode formelle]]

{{Lien BA|es}}

[[bg:Краен автомат]]
[[ca:Autòmat finit]]
[[cs:Konečný automat]]
[[de:Endlicher Automat]]
[[en:Finite-state machine]]
[[es:Autómata finito]]
[[fa:ماشین‌های حالات متناهی]]
[[fi:Äärellinen automaatti]]
[[gl:Autómata finito]]
[[he:אוטומט סופי]]
[[hr:Konačni automat]]
[[it:Automa a stati finiti]]
[[ja:有限オートマトン]]
[[ko:유한 상태 기계]]
[[lt:Baigtinis automatas]]
[[lv:Galīgs automāts]]
[[mk:Конечен автомат]]
[[nl:Eindigetoestandsautomaat]]
[[pl:Automat skończony]]
[[pt:Máquina de estados finitos]]
[[ro:Automat finit]]
[[ru:Конечный автомат]]
[[sh:Konačni automat]]
[[sk:Konečný automat]]
[[sr:Коначан аутомат]]
[[sv:Ändlig automat]]
[[th:เครื่องสถานะจำกัด]]
[[tr:Sonlu durum makinası]]
[[uk:Скінченний автомат]]
[[zh:有限状态自动机]]