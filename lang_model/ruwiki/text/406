[[Файл:Knapsack.svg|thumb|right|250px|Пример задачи о ранце: необходимо уложить коробки в ранец вместимостью 15 кг так, чтобы стоимость уложенных коробок была максимальной]]
'''Задача о ранце (рюкзаке)''' ({{lang-en|Knapsack problem}}) — одна из [[NP-полная задача|NP-задач]] [[Комбинаторная оптимизация|комбинаторной оптимизации]]. Своё название получила от максимизационной задачи укладки как можно большего числа ценных вещей в рюкзак при условии, что вместимость рюкзака ограничена. С различными вариациями задачи о ранце можно столкнуться в экономике, прикладной математике, криптографии, генетике и логистике. 

В общем виде задачу в её классическом варианте можно сформулировать так: из заданного множества предметов со свойствами «стоимость» и «вес» требуется отобрать подмножество с максимальной полной стоимостью, соблюдая при этом ограничение на суммарный вес.

== Классическая постановка задачи ==
Пусть имеется набор предметов, каждый из которых имеет два параметра — вес и ценность. Также имеется рюкзак определенной вместимости. Задача заключается в том, чтобы собрать рюкзак с максимальной ценностью предметов внутри, соблюдая при этом весовое ограничение рюкзака.

Математически задачу можно сформулировать так: имеется <math>n</math> грузов. Для каждого i-го груза определён '''вес''' <math> w_i>0 </math> и '''ценность''' <math>v_i>0</math>, <math>i= 1,2,...,n</math>.  Дана '''грузоподъёмность''' W. Необходимо выбрать подмножество грузов так, чтобы их общий вес не превышал W, а суммарная их ценность была бы максимальной{{sfn|Silvano|1990|p=1}}.

=== Варианты задачи о ранце ===
{{main|Список задач о ранце}}
Существует множество разновидностей задачи о ранце. Отличия заключаются в условиях, наложенных на рюкзак, предметы или их выбор.
# Рюкзак 0-1 ({{lang-en|0-1 Knapsack Problem}}){{sfn|Silvano|1990|p=2}}: не более одного экземпляра каждого предмета.
# Ограниченный рюкзак ({{lang-en|Bounded Knapsack Problem}}){{sfn|Pisinger|1995|p=127}}: не более заданного числа экземпляров каждого предмета.
# Неограниченный рюкзак (целочисленный рюкзак)({{lang-en|Unbounded Knapsack Problem (integer knapsack)}}){{sfn|Pisinger|1995|p=127}}: произвольное количество экземпляров каждого предмета.
# Рюкзак с мультивыбором ({{lang-en|Multiple-choice Knapsack Problem}}){{sfn|Pisinger|1995|p=147}}.
# Мультипликативный рюкзак ({{lang-en|Multiple Knapsack Problem}}){{sfn|Silvano|1990|p=157}}: есть несколько рюкзаков, каждый со своим максимальным весом. Каждый предмет можно положить в любой рюкзак или оставить.
# Многомерный рюкзак ({{lang-en|Multy-dimensional knapsack problem}}): вместо веса дано несколько разных ресурсов (например, вес, объём и время укладки). Каждый предмет тратит заданное количество каждого ресурса. Надо выбрать подмножество предметов так, чтобы общие затраты каждого ресурса не превышали максимума по этому ресурсу, и при этом общая ценность предметов была максимальна{{sfn|Pisinger|1995|p=147}}.
Наглядная постановка задачи о ранце привела к тому, что она нашла применение в разных областях знаний: в математике, информатике и на стыке этих наук — в криптографии. В вычислительной лингвистике в одной из работ{{sfn|Riedhammer et al|2008|pp=2436|name=Riedhammer2008}} предложена формулировка задачи {{нп3|Автоматическое реферирование текстов|автоматического реферирования текстов|en|Automatic summarization}}, вырожденный (более простой) случай которой соответствует постановке задачи о ранце.

== В дисциплинах ==
=== В математике ===
Доподлинно неизвестно, кто первым привел математическую формулировку задачи о ранце. Одно из первых упоминаний о ней можно найти в статье {{нп3|Мэтьюс, Джордж Баллард|Джорджа Балларда Мэтьюса|en|George Ballard Mathews}}<ref name="Mathews">{{статья|автор=G. B. Mathews|заглавие=On the partition of numbers|ссылка=http://plms.oxfordjournals.org/content/s1-28/1/486.full.pdf|издательство=|год=1897|pages=486-490|allpages=|isbn=|язык=en}}</ref>{{sfn|Kellerer|2003|p=3}}, датированной 1897 годом. Интенсивное изучение данной проблемы началось после публикации [[Данциг, Джордж|Д. Б Данцигом]] в 1957 году книги «{{lang-en|Discrete Variable Extremum Problem}}»{{sfn|Pisinger|1995|p=9}}, особенно в 70-90-е годы 20-го века, как теоретиками, так и практиками{{sfn|Silvano|1990|p=2}}. Во многом данный интерес вызван достаточно простой формулировкой задачи, большим числом её разновидностей и свойств и в то же время сложностью их решения. В 1972 году данная задача вошла в список [[Карп, Ричард Мэннинг|К. Мэннига]] [[NP-полная задача|NP-полных задач]] (статья {{lang-en|«Reducibility Among Combinatorial Problems»}})<ref name="Karp">{{статья|автор=Р. Карп|заглавие=Reducibility Among Combinatorial Problems|ссылка=http://www.cs.berkeley.edu/~luca/cs172/karp.pdf|издательство=|год=1972|pages=|allpages=|isbn=|язык=en}}</ref>.

С практической точки зрения задача о рюкзаке может служить моделью для большого числа промышленных ситуаций{{sfn|Silvano|1990|p=2}}{{sfn|Бурков|1974|p=217}}:
* Размещение грузов в помещении минимального объёма.
* Раскройка ткани — для заданного куска материала получить максимальное число выкроек определенной формы.
* Расчет оптимальных капиталовложений.
=== В криптографии ===
{{main|Задача о ранце в криптографии}}
Проблема рюкзака лежит в основе первого алгоритма [[Криптосистема с открытым ключом|асимметричного шифрования]] (или иначе — шифрования с открытым ключом). Идея [[криптография|криптографии]] с открытыми ключами была выдвинута [[Уитфилд Диффи|Уитфилдом Диффи]], [[Хеллман, Мартин|Мартином Хеллманом]] и независимо — [[Ralph Merkle|Ральфом Мерклом]] ({{lang-en|Ralph Merkle}}). Впервые она была представлена Диффи и Хеллманом на Национальной компьютерной конференции ({{lang-en|National Computer Conference}}). Новизна по отношению к [[Симметричные криптосистемы|симметричным криптосистемам]] заключалась в использовании парных ключей — секретного ({{lang-en|private key, secret key, SK}}) и открытого ({{lang-en|public key, PK}}), создаваемых пользователем. Из названия понятно, что секретный ключ пользователь должен скрывать, а открытый может быть общедоступным. Открытый ключ нужен для шифрования, а секретный для расшифровки. Часто из секретного ключа получают открытый ключ{{sfn|Шнаер|2002|p=19.2}}<ref name="Gab">{{статья|автор=Э. М. Габидулин, А. С. Кшевецкий, А. И. Колыбельников|заглавие=Защита информации|ссылка=http://library.gpntb.ru/cgi-bin/irbis64r_81/cgiirbis_64.exe?Z21ID=&I21DBN=IBIS&P21DBN=IBIS&S21STN=1&S21REF=10&S21FMT=fullw&C21COM=S&S21CNR=20&S21P01=3&S21P02=0&S21P03=A=&S21COLORTERMS=0&S21STR=Кшевецкий%20М.С.|издательство=|год=2011|pages=|allpages=261|isbn=|язык=ru}}</ref>.

'''Криптосистема Меркла — Хеллмана''' — первый основанный на задаче о ранце алгоритм для обобщённого шифрования с [[Криптосистема с открытым ключом|открытым ключом]]. Разработан Ральфом Мерклом и Мартином Хеллманом в 1978 году. Был опубликован одностадийный ({{lang-en|singly-iterated}}) и мультистадийный варианты ({{lang-en|multiply-iterated}}). Алгоритм мог быть использован только для шифрования, но [[Шамир, Ади|Ади Шамир]] адаптировал его для использования в [[Электронная цифровая подпись|цифровых подписях]]{{sfn|Шнаер|2002|p=19.1}}.

В дальнейшем было предложено как множество модификаций криптосистемы Меркла — Хеллмана, так и совершенно новых криптосистем на основе задачи о ранце. Среди них<ref name="Kin">{{статья|автор=Kin Ming Lai.|заглавие=Knapsack Cryptosystems: The Past and the Future|ссылка=http://www.ics.uci.edu/~mingl/knapsack.html|издательство=|год=2001|pages=|allpages=|isbn=|язык=ru}}</ref>:
# Рюкзак Грэм — Шамира
# Рюкзак Гудмана — Макколи
# Рюкзак Накаше — Штерна
# Рюкзак Шора — Ривеста

==== Шифрование с помощью задачи о рюкзаке ====
Сообщение шифруется как решение набора задач о ранце{{sfn|Шнаер|2002|p=19.1}}.

'''Определение.''''' Рюкзачным вектором'' <math> A = (a_1,...,a_n)</math> назовём упорядоченный набор из n предметов{{sfn|Саломаа|1990|p=103}}.

Для шифрования [[Открытый текст|открытого текста]] в двоичном представлении его разбивают на блоки длины <math>n</math> (например, <math>(1 1 1 0 0)</math> соответствует 5 предметам в рюкзаке). Считается, что единица указывает на наличие предмета в рюкзаке, а ноль на его отсутствие.

'''Пример''' шифротекста, полученного по данному алгоритму.

Пусть задан рюкзачный вектор Α = (3 4 6 7 10 11) с длинной n = 6.
{| class="wikitable"
|-
! открытый текст !! 1 1 1 1 1 0 !! 0 0 1 1 0 0 !! 0 0 0 0 0 0 !! 0 0 0 0 0 1
|-
| вещи в рюкзаке || 3 4 6 7 10 11 || 3 4 6 7 10 11 || 3 4 6 7 10 11 || 3 4 6 7 10 11
|-
| шифротекст|| 3 + 4 + 6 + 7 + 10 = 30 || 6 + 7 = 13 || 0 || 11
|}
Для заданного Α все криптосистемы есть числа, не превышающие 41, то есть суммарный вес всех предметов в рюкзачном векторе. 

Для шифрования на практике необходим сверхвозрастающий рюкзак, то есть элементы упорядоченного рюкзачного вектора должны являться [[Сверхвозрастающая последовательность|сверхвозрастающей последовательностью.]] В таком случае для каждого исходного текста существует единственный шифротекст.
В указанном примере рюкзак не является сверхвозрастающим — можно получить одинаковый шифротекст для векторов 100010 и 001100.

=== В информатике ===
Как было сказано выше, задача о ранце относится к классу NP-полных, для неё нет полиномиального алгоритма, решающего её за разумное время. Поэтому при решении задачи о ранце всегда нужно выбирать между точными алгоритмами, которые не применимы для «больших» рюкзаков, и приближенными, которые работают быстро, но не обеспечивают оптимального решения задачи. Естественно, создание быстрого и достаточно точного алгоритма представляет большой интерес.

===== Полный перебор =====
Пусть в рюкзак загружаются предметы <math> N </math> разных типов. Рассмотрим задачу, когда количество предметов каждого типа не ограничено. Нужно определить максимальную стоимость груза, вес которого равен <math> P </math>.
Для получения решения алгоритмом [[NP-полная задача|полного перебора]] осуществляется перебор всех вариантов загрузки рюкзака.
[[Файл:Дерево перебора.png|thumb|Дерево полного перебора]]
Временная сложность алгоритма <math> O(N!) </math>, т.е он работоспособен для небольших значений <math> N </math>{{sfn|Окулов|2007|p=114}}.
С ростом <math> N </math> задача становится неразрешимой данным методом за приемлемое время.

На рисунке показано четырёхуровневое дерево перебора. Корень дерева соответствует нулевому весу (рюкзак пуст), в кружках показан вес предмета. Первый предмет возможно выбрать четырьмя способами, второй тремя и т. д.

===== Метод ветвей и границ =====
[[Файл:Ветви и границы.png|thumb|Дерево, упрощённое методом ветвей и границ]] 

[[Метод ветвей и границ]] является вариацией метода полного перебора с той разницей, что мы сразу исключаем заведомо неоптимальные решения. Как и метод полного перебора, он позволяет найти оптимальное решение и поэтому относится к точным алгоритмам.

Пусть есть оптимальное решение <math> R </math>. Попытаемся его улучшить, рассмотрев решение на другой ветви. Если на рассматриваемой в данной момент ветви решение становится хуже (с какого-то шага), чем <math> R </math>, то прекращаем его исследование и выбираем другую ветвь дерева{{sfn|Бурков|1974|p=225}}.

Пусть для предыдущего четырёхуровневого дерева есть ограничение <math>P=5</math>. Тогда, применяя метод ветвей и границ, можно сократить количество вариантов для перебора с 24 до 8. Однако метод ветвей и границ работает не для всех наборов данных. Например, если суммарный вес любой комбинации не будет превышать граничный, время выполнения будет таким же, как и для простого перебора.

===== Применение метода ветвей и границ =====
При использовании метода ветвей и границ строится сеть{{sfn|Новиков|2001|p=12}}. По оси <math> X </math> откладывается количество предметов, по оси <math> Y </math> — их вес. На первом шаге из начала координат строятся две линии: горизонтальная, соответствующая тому, что первый предмет не был взят, и наклонная, соответствующая взятому первому предмету. Их проекции на ось <math> Y </math> равны весу предмета. На втором шаге опять строятся 2 линии, горизонтальная (второй предмет не был взят) или наклонная (второй предмет взят). Положим длину горизонтальных дуг равной нулю, а наклонных — ценности предмета. 

Таким образом, любому решению задачи соответствует некоторый путь в сети. Задача сводится к нахождению пути максимальной длины.
Пример: Пусть вместимость рюкзака <math> P=14 </math>.[[Файл:Динамическое програмирование.png|thumb|Сеть, иллюстрирующая наполнение рюкзака. В квадратных скобках указаны суммарная ценность на данном шаге алгоритма, оптимальное решение помечено кругом]]
{| class="wikitable"
|-
! i !! Ценность !! Вес
|-
| 1 || 3 || 5
|-
| 2 || 5 || 10
|-
| 3 || 4 || 6
|-
| 4 || 2 || 5
|}
На рисунке в квадратных скобках [] стоит суммарная ценность на каждом шаге алгоритма. Видно, что для конкретного примера она равна [7].

===== Жадный алгоритм =====
Согласно [[Жадный алгоритм|жадному алгоритму]] предметы сортируются по убыванию стоимости единицы веса каждого. В рюкзак последовательно складываются самые дорогие за единицу веса предметы из тех, что помещаются внутри. 

Сложность сортировки предметов <math> O(N\log(N)) </math>. Далее происходит перебор всех <math> N </math> элементов.

Точное решение можно получить не всегда.

Пример. Пусть вместимость рюкзака <math> P=80 </math>. Предметы уже отсортированы. Применим жадный алгоритм.
{| class="wikitable"
|-
! i !! вес !! цена !! цена/вес
|-
| 1 || 15 || 60 || 4
|-
| 2|| 30 || 90 || 3
|-
| 3 || 50 || 100 || 2
|}

Кладём в рюкзак первый предмет, а за ним второй. Третий предмет в рюкзак не влезет. Суммарная ценность вещей в рюкзаке равна 150. Если бы были взяты второй и третий предметы, то суммарная ценность составила бы 190.
Видно, что жадный алгоритм не обеспечивает оптимального решения, поэтому относится к приближенным.

==== [[Метаалгоритм|Метаалгоритмы]] ====

===== Генетический алгоритм =====
[[Генетический алгоритм|Генетические алгоритмы]] были предложены [[Холланд, Джон Генри|Джоном Генри Холландом]] в 1970 году<ref name="Zaheed">{{статья|автор=Zaheed Ahmed, Irfan Younas |заглавие=A Dynamic Programming based GA for 0-1 Modified Knapsack Problem|ссылка= http://www.ijcaonline.org/volume16/number7/pxc3872668.pdf|издательство=|год=|pages=|allpages=|isbn=|язык=en}}</ref> и относятся к так называемым [[метаалгоритм]]ам. Идея — составление алгоритмов поиска на основе биологической модели механизмов [[естественный отбор|естественного отбора]]<ref name="Advoshin">{{статья|автор=С. М. Авдошин, А. А. Савельева.|заглавие=Криптоанализ: современное состояние и перспективы развития|ссылка=http://www.hse.ru/data/194/314/1234/%D0%90%D0%B2%D0%B4%D0%BE%D1%88%D0%B8%D0%BD.%D0%A1%D0%B0%D0%B2%D0%B5%D0%BB%D1%8C%D0%B5%D0%B2%D0%B0_%D0%9A%D1%80%D0%B8%D0%BF%D1%82%D0%BE%D0%B0%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7.pdf|издательство=|год=|pages=|allpages=|isbn=|язык=ru}}</ref>. Базовыми понятиями являются: популяция, отбор, мутация, скрещивание.

''[[Популяция]]''. Составляется набор бинарных строк ([[хромосома|хромосом]]), возможных решений. На основе первой («старой») популяции строится вторая («новая») популяция решений, которая служит «старой» для третьей популяции и т.д<ref name="Advoshin" />

''[[Естественный отбор|Отбор]]''. Задается функция выбора, согласно которой лучшие представители «старой» популяции выбираются для воспроизводства «новой». Следовательно, алгоритм выбирает наилучшее решение<ref name="Advoshin" />.
[[Файл:Скрещивание.png|thumb|Скрещивание хромосом. «Родители» обмениваются последними пятью битами и образуют новые хромосомы — «потомки»]]
''[[Скрещивание]]''. Для пары строк («родителей») с определенной длиной <math>r</math> выбирается произвольное число <math>1 \le s \le r</math>. «Родители» обмениваются между собой битами с <math>s+1</math>-го по <math>r</math>-й и получаются две новые строки («потомки»)<ref name="Advoshin" />.

''[[Мутация]]''. Изменение, происходящее с определенной [[вероятность]]ю<ref name="Zaheed" /><ref name="Advoshin" />.

Содержимое рюкзака представляется в виде хромосом или бинарных строк, i-й бит которых равен единице в случае наличия предмета в рюкзаке, нулю — в случае его отсутствия. Задается целевая функция <math>S</math> — вместимость рюкзака.

Отбор осуществляется следующим образом.

Выбирается произвольная хромосома. Пусть <math> L_{max}= max(S,S''-S)</math> — максимальное расхождение между целевой функцией и хромосомой. <math>S''</math> суммарный вес всех предметов, входящих в рюкзачный вектор. <math>S'</math> — вес рюкзака при выбранной хромосоме<ref name="Advoshin" />.

Если <math>S' \le S</math>, то хромосома оценивается числом <math>q = 1 - \sqrt{|S'-S|/S}</math>.

Если <math>S' > S</math>, то хромосома оценивается числом <math>q = 1 - \sqrt{|S'-S|/L_{max}}</math>.
[[Файл:Генетический алгоритм.png|150px|thumb|right|Блок схема генетического алгоритма]]
По этому числу осуществляется отбор хромосом.

На рисунке показаны все этапы алгоритма<ref name="Advoshin" />:
# Создание случайной популяции двоичных хромосом.
# Оценка каждой из них числом <math>q</math>.
# Отбор на основе полученных чисел.
# Скрещивание полученных на третьем этапе хромосом.
# Мутация.
# Переход на второй шаг.

Алгоритм прерывается после заданного числа итераций.

Генетический алгоритм не гарантирует нахождения оптимального решения, однако показывает хорошие результаты за меньшее время по сравнению с другими алгоритмами<ref name="Advoshin" /><ref name="Батищев">{{статья|автор=Д.И. Батищев, Е.А. Неймарк, Н.В. Старостин|заглавие=Применение генетических алгоритмов к решению задач дискретной оптимизации|ссылка=http://www.unn.ru/pages/e-library/aids/2007/15.pdf|издательство=|год=|pages=|allpages=|isbn=|язык=ru}}</ref>.

== Примечания ==
{{примечания|2}}

== Литература ==
; на русском языке
# {{книга
|автор = Ананий В. Левитин.
|заглавие = Алгоритмы: введение в разработку и анализ
|оригинал = Introduction to The Design and Analysis of Algorithms
|место = М.
|издание = 2-ое
|издательство = [[Вильямс (издательство)|«Вильямс»]]
|год = 2006
|страницы = 160-163
|isbn = 0-201-74395-7
}}
# {{книга
|автор = Томас Х. Кормен, Чарльз И. Лейзерсон, Рональд Л. Ривест, Клиффорд Штайн
|заглавие = Алгоритмы: построение и анализ
|оригинал = Introduction to Algorithms
|ссылка = http://e-maxx.ru/bookz/files/cormen.pdf
|место = М.
|издание = 2-ое
|издательство = [[Вильямс (издательство)|«Вильямс»]]
|год = 2006
|страницы = 456-458
|isbn = 0-07-013151-1
}}
# {{книга
|автор = Роберт Седжвик.
|заглавие = Фундаментальные алгоритмы на C++. Части 1-4. Анализ. Структуры данных. Сортировка. Поиск
|оригинал = Algorithms in C++. Parts 1-4. Fundamentals. Data Structures. Sorting. Searching
|место = Россия, Санкт-Петербург
|издание = 3-е
|издательство = [[DiaSoft (издательство)|«ДиаСофт»]]
|год = 2002
|страницы = 688
|isbn = 5-93772-047-4, 0-201-35088-2
}}
# {{книга
 |автор         = В. Н. Бурков, И. А. Горгидзе, С. Е. Ловецкий.
 |заглавие      = Прикладные задачи теории графов
 |ссылка        = http://www.mtas.ru/upload/library/atgt.pdf
 |издание       = 1-ое
 |место         = Тбилиси
 |издательство  = ВЦ АН ГССР
 |год           = 1974
 |страниц       = 232
 |ref           = Бурков
}}
# {{книга
|автор = В. Н. Бурков, Д. А. Новиков.
|заглавие = Элементы теории графов
|ссылка = http://www.mtas.ru/start/t_garf.pdf
|год = 2001
|ref = Новиков
|страницы = 28
|ref = Новиков
}}
# {{книга
|автор = С. Окулов.
|заглавие = Программирование в алгоритмах
|ссылка = https://content.schools.by/3.orsha/library/Окулов_Программирование_в_алгоритмах.pdf
|издание = 1-е
|издательство = Бином. Лаборатория знаний
|год = 2007
|страницы = 384
|isbn = 5-94774-010-9
|ref           = Окулов
}}
# {{книга
|автор = Б. Шнайер.
|заглавие = Прикладная криптография. Протоколы, алгоритмы, исходные тексты на языке Си
|оригинал = Applied Cryptography. Protocols, Algorithms, and Source Code in C
|ссылка = http://htrd.su/wiki/_media/zhurnal/2012/03/23/todo_prikladnaja_kriptografija/cryptoshn.pdf
|издание = 2-ое
|издательство = Триумф
|год = 2002
|страниц = 816
|isbn = 5-89392-055-4
|тираж         = 3000
|ref           = Шнаер
}}
# {{книга
|автор =А. Саломаа.
|заглавие = Криптография с открытым ключом
|оригинал = Public-Key Cryptography
|ссылка = http://tcode.tinro.ru/cryptography/src/open_key_crypt.pdf
|место = М.
|издательство = Мир
|год = 1995
|страницы = 102-150
|isbn =  5–03–001991–X
|ref           = Саломаа
}}
# {{книга
|автор =Н. Коблиц.
|заглавие = Курс теории чисел в криптографии
|место = М.
|издание = 2-ое
|издательство = Научное издательство ТВП
|год = 2001
|страницы = 254
|isbn = 5-85484-014-6
|ref           = Коблиц
}}
; на английском языке
# {{книга
 |автор         = Silvano Martelo, Paolo Toth
 |заглавие      = Knapsack problems
 |ссылка        = http://www.or.deis.unibo.it/kp/Chapter1.pdf
 |место         = Great Britain
 |издательство  = Wiley
 |год           = 1990
 |страниц       = 306
 |isbn          = 0-471-92420-2
 |ref           = Silvano
}}
# {{книга
 |автор         = Hans Kellerer, Ulrich Pferschy, David Pisinger
 |заглавие      = Knapsack problems
 |издательство  = Springer-Verlag
 |год           = 2003
 |страниц       = 548
 |isbn          = 3540402861
 |ref           = Kellerer
}}
# {{статья
|автор =K. Riedhammer, D. Gillick, B. Favre, and D. Hakkani-Tür
|заглавие = Packing the Meeting Summarization Knapsack
|ссылка = http://www5.informatik.uni-erlangen.de/Forschung/Publikationen/2008/Riedhammer08-PTM.pdf
|издательство=Proc. Interspeech, Brisbane, Australia
|место = Brisbane Australia
|год = 2008
|страниц = 4
|ref = Riedhammer et al
}}

== Ссылки ==
* [http://www.ifors.ms.unimelb.edu.au/tutorial/knapsack/index.html Welcome to the Knapsack]{{ref-en}}
* [http://www.academicearth.org/lectures/knapsack-problem-1 Knapsack Problem By Eric Grimsom John Guttag — MIT]{{ref-en}}
* [http://rosettacode.org/wiki/Knapsack_Problem Knapsack Problem solutions in many languages]{{ref-en}}
* [http://www.proggen.org/doku.php?id=algo:knapsack Das Rucksack-Problem (Knapsack Problem)]{{ref-de}}

{{Knapsack}}
{{NP-полные задачи}}

[[Категория:Прикладная математика]]
[[Категория:Динамическое программирование]]
{{Добротная статья|Математика}}