{{Карточка блочного шифра
|название      = SAFER
|изображение   = SAFER64.jpeg
|ширина        = 275px
|создатель     = [[Мэсси, Джеймс|Джеймс Мэсси]]
|создан        = [[1993 год|1993 г.]]
|опубликован   = [[1993 год|1993 г.]]
|размер ключа  = 64 (128, 192, 256) бит 
|размер блока  = 64 (40, 128) бит
|число раундов = 6-16
|тип           = [[SP-сеть|Подстановочно-перестановочная сеть]]
}}

'''SÁFER''' ({{lang-en|Secure And Fast Encryption Routine}} — безопасная и быстрая процедура шифрования) — в [[Криптография|криптографии]] семейство [[Симметричные криптосистемы|симметричных]] блочных криптоалгоритмов на основе [[SP-сеть|подстановочно-перестановочной сети]]. Основной вклад в разработку алгоритмов внёс [[Мэсси, Джеймс|Джеймс Мэсси]] ({{lang-en|James L. Massey}}). Первый вариант [[шифр]]а был создан и опубликован в [[1993 год]]у.

== История ==

Существует несколько вариантов шифра, отличающихся друг от друга длиной ключа шифрования и размерами блоков исходного текста.

Первая разновидность [[алгоритм]]а — ''SAFER K-64'' была разработана Джэймсом Мэсси для калифорнийской корпорации [[Cylinc|«Cylinc»]] в [[1993 год]]у
<ref name="Journal">
{{статья
|автор        = Swarnendu Mukherjee, Debashis Ganguly, Somnath Naskar
|заглавие     = A New Generation Cryptographic Technique
|ссылка       = http://www.ijcte.org/papers/046.pdf
|издание      = International Journal of Computer Theory and Engineering, Vol. 1, No. 3
|тип          = 
|место        = 
|издательство = 
|год          = Август  2009
|том          = 
|номер        = 
|страницы     = 284-287
}}
</ref>.
Опубликованный в том же году, алгоритм имел блок и [[Ключ (криптография)|ключ шифрования]] длиной в 64 [[бит]]а. Для него рекомендовалось использовать 6 раундов шифрования. Однако, из-за необходимости увеличить длину ключа до 128 бит (так как была обнаружена слабость в первоначальном варианте алгоритма), Мэсси разработал новый вариант шифра ''SAFER K-128'', который был опубликован на следующий год после ''SAFER K-64''. Новый алгоритм включал в себя расписание ключей, разработанное министерством внутренних дел [[Сингапур]]а, и в дальнейшем использовался им для различных целей. Также для этого алгоритма рекомендовалось использовать 10 (максимум 12) раундов шифрования.

Спустя некоторое время в первых вариантах алгоритма выявились некоторые слабости, обнаруженные [[Кнудсен, Ларс|Ларсом Кнудсеном]] ({{lang-en|Lars Knudsen}}) и {{Не переведено|:en:Sean Murphy (cryptographer)|Мёрфи, Шон (криптограф)|Шоном Мёрфи}} ({{lang-en|Sean Murphy}})<ref name="Journal"/>. Это повлекло за собой создание новых версий алгоритма, названных ''SAFER SK-64'' и ''SAFER SK-128'', в которых расписание ключей было изменено в соответствии со схемой, предложенной Кнудсеном. Также был разработан вариант с длиной ключа, уменьшенной до 40 бит — ''SAFER SK-40''. Сокращение «''SK''» в названии алгоритмов расшифровывается как «''Strengthened Key schedule''» (Усиленное расписание ключей). Для новых вариантов шифра предлагалось использовать не 6, а по крайней мере 8 (максимум 10) раундов шифрования.

Алгоритм ''SAFER+'' был разработан в [[1998 год]]у калифорнийской корпорацией Cylinc совместно с [[Академия наук Армении|Армянской академией наук]] для участия в [[AES (конкурс)|конкурсе ''AES'']], на котором прошёл лишь первый отборочный тур. Данный шифр имеет входной блок длиной 128 бит и размер ключа 128, 192 или 256 бит.

Последней из созданных разновидностей алгоритма ''SAFER'' является ''SAFER++'', разработанный Мэсси в [[2000 год]]у и ставший дальнейшим развитием алгоритма ''SAFER+''. Алгоритм принял участие в европейском конкурсе алгоритмов ''[[NESSIE]]'', где был представлен в двух вариантах: шифр с 64-битным блоком и 128-битным блоком. Он прошёл во вторую фазу конкурса, но не был выбран в набор рекомендуемых ''NESSIE'' криптографических примитивов. Эксперты сочли, что шифр слишком медленный на всех машинах, кроме 8-битных (таких как [[смарт-карта|смарт-карты]]), а запас безопасности шифра слишком мал.<ref name="CIO_SAFER+"/><ref name = "AESkiwi"/>

Алгоритмы ''SAFER'' не являются частной собственностью и не защищены авторскими правами, то есть могут быть использованы без каких либо ограничений. Поскольку они целиком состоят из простых байтовых операций (за исключением поворота байтов при генерации ключей), эти алгоритмы могут быть реализованы процессорами с малой разрядностью.
<ref name="Massey64">
{{статья
|автор        = James L. Massey
|заглавие     = SAFER K-64: A Byte.Oriented Block-Ciphering Algorithm
|ссылка       = http://www.springerlink.com/content/p14342r72761876h/fulltext.pdf
|издание      = Fast Software Encryption
|тип          = 
|место        = 
|издательство = 
|год          = 1993
|том          = 
|номер        = 
|страницы     = 1-17
}}
</ref>

Ниже приведена сводная таблица всех существующих вариантов шифра ''SAFER''

{| class="wikitable" border="1"
|-
! название
! англ.
! дата создания
! длина блока
! длина ключа
! число раундов
|-
| ''SAFER K-64''
| key 64 bit
| [[1993]]
| 64
| 64
| 6
|-
| ''SAFER K-128''
| key 128 bit
| [[1995]]
| 64
| 128
| 10 (максимум 12)
|-
| ''SAFER SK-64''
| Strengthened Key schedule, 64 bit
| [[1995]]
| 64
| 64
| 8 (минимум 6, максимум 10)
|-
| ''SAFER SK-128''
| Strengthened Key schedule, 128 bit
| [[1995]]
| 64
| 128
| 10 (максимум 12)
|-
| ''SAFER SK-40''
| Strengthened Key schedule, 40 bit
| [[1995]]
| 64
| 40
|
|-
| ''SAFER+''
| SAFER Plus
| [[1998]]
| 128
| 128, 192, 256
| 8, 12, 16
|-
| ''SAFER++''
| SAFER Plus Plus
| [[2000]]
| 64, 128
| 128, 256
| 7, 10
|}

== SAFER K-64 ==
=== Алгоритм шифрования ===
[[Файл:SAFER.png|thumbnail|250px|схема действия одного раунда в алгоритмах ''SAFER K-64'' и ''SAFER SK-64'']]
Длина шифруемого блока и длина ключа равны 64 битам. Алгоритм является [[Итерация|итеративным]] [[Блочный шифр|блочным шифром]], то есть одна и та же функция шифрования последовательно применяется к входному блоку ''r'' раз, при этом на каждом этапе используются различные ключи. На каждой [[Итерация|итерации]] (этапе, раунде) в рассматриваемом алгоритме берутся два 64-битных подключа.

Структура одного раунда алгоритма представлена на схеме. Опишем алгоритм поэтапно (ниже ''i'' пробегает значения от 1 до ''r'', где ''r'' — число раундов шифрования):
# Входной блок ''B'' и оба ключа ''<math>K_{2i-1}</math>'' и ''<math>K_{2i}</math>'' разбиваются на 8 частей длиной по одному [[байт]]у (8 [[бит]]). Соответствующие подблоки входного текста и ключа ''<math>K_{2i-1}</math>'' либо складываются по модулю два (операция [[XOR]]) — для подблоков № 1, 4, 5 и 8, либо складываются по обычным правилам (операция сложения байтов по модулю 256) — для подблоков № 2, 3, 6 и 7.
# Результаты сложения проходят через так называемые [[S-блоки]] (''S-boxes''). Их содержимое представляет собой одну из нелинейных операций: <math>y = 45^x\mbox{ mod }257</math> (где y = 0 когда x = 128) либо <math>y = log_{45}x</math> (y = 128 когда x = 0). Здесь ''x'' — входной байт, ''y'' — выходной байт. Данные операции являются операциями в [[Конечное поле|конечном поле]] GF(257), где 45 — примитивный элемент поля. Поскольку каждый раз рассчитывать результаты этих операций в практических реализациях алгоритма весьма неудобно, как правило используются специально составляемые таблицы для получения результатов их действия.
# Над результатами предыдущего действия производится операция, аналогичная п.1, с той лишь разницей, что используется второй подключ ''<math>K_{2i}</math>'', а операции XOR и сложения по модулю 256 меняются местами.
# Полученные байты проходят через многоуровневую систему преобразований, взаимно складываясь в различном порядке. Это делается для достижения лучшего [[лавинный эффект|лавинного эффекта]], то есть увеличения зависимости выходных битов от всех битов входного блока. На схеме преобразования представлены в виде сети операций сложения по модулю 256. Эта сеть эквивалентна трём уровням [[Псевдопреобразование Адамара|псевдопреобразований Адамара]] (''Pseudo-Hadamard Transform'', ''PHT'')<ref name = "Schneier"/>. Каждое преобразование действует таким образом, что при входных байтах <math>a_1</math> и <math>a_2</math> на выходе получим:
#: <math>b_1 = (2a_1 + a_2) \mbox{ mod } 256</math>
#: <math>b_2 = (a_1 + a_2) \mbox{ mod } 256</math>

По завершении <math>r</math> последовательных раундов, над полученным результатом применяется операция, аналогичная п.1, где в качестве ключа используется последний подключ.

Автор алгоритма рекомендует использовать <math>r=6</math> раундов, но можно увеличить их количество для увеличения надёжности
<ref name = "Schneier">
{{Книга:Шнайер Б.: Прикладная криптография
|часть=Глава 14. И ещё блочные шифры
|страницы=382—384
}}
</ref>.

=== Алгоритм расшифрования ===

Расшифрование производятся в обратном порядке, но при этом операции заменяются обратными. Так, операции сложения по модулю 256 заменяются операциями вычитания, а сложение по модулю 2 выполняется точно так же, как и при зашифровании. Операции <math>45^x\mbox{ mod }257</math> и <math>log_{45}x</math> меняются местами. [[Псевдопреобразование Адамара|Псевдопреобразования Адамара]] заменяются обратными (''Inverse PHT'', ''IPHT''), действующими следующим образом:

<math>a_1 = (b_1-b_2) \mbox{ mod } 256</math>

<math>a_2 = (-b_1+2b_2) \mbox{ mod } 256</math>

=== Генерация ключей ===

Первый ключ шифрования <math>K_1</math> является секретным ключом, задаваемым пользователем. Каждый последующий ключ шифрования <math>K_{i+1}</math> получается из предыдущего <math>K_i</math> по формуле <math>K_{i + 1}  = \left( {K_1 <<< 3i} \right) + B_{i+1}</math> (сложение производится по модулю 256, при этом байты складываются отдельно). Здесь операция «<math><<<3</math>» — побайтовый циклический сдвиг влево на 3 бита, то есть сдвиг происходит внутри каждого отдельного байта ключа. Величина <math>B_{i}</math> называется константой этапа шифрования. Получить её можно следующим образом: если <math>B_{ij}</math> — ''j''-й байт константы ''i''-го этапа, то все константы этапов выражаются следующей формулой:
<math>B_{ij} = 45^{45^{((9i+j) \mbox{ mod } 256) }\mbox{ mod } 257} \mbox{ mod } 257</math><ref name = "Schneier"/>. Получаемые таким образом константы этапов с хорошей точностью ведут себя как случайные числа. Как правило, значения для всех этих констант хранят в специальных таблицах, чтобы уменьшить время на вычисления.

[[Файл:SAFER K64 KeysGeneration.jpg|thumb|right|200px|Алгоритм генерации ключей в ''SAFER K-64'']]
'''Формальное описание алгоритма генерации ключей:'''<ref name = "Menezes">{{Книга:Handbook of Applied Cryptography}}</ref>

ВХОД: 64-битовый ключ <math>K=k_1,\dots,k_{64}</math>; количество раундов <math>r</math>.

ВЫХОД: 64-битовые подключи <math>K_1,\dots,K_{2r+1}</math>. Байт <math>K_i[j]</math> — <math>j</math>-байт ключа <math>K_i</math> (нумерация слева направо).

# Пусть <math>R[i]</math> — 8-битовые величины. Пусть <math>C_i[j]</math> — ''j''-й байт константы ''i''-го этапа шифрования.
# <math>(R[1],R[2],\dots,R[8])\leftarrow(k_1 \dots k_8, k_9 \dots k_{16}, k_{57} \dots k_{64})</math>.
# <math>(K_1[1],K_1[2],\dots,K_1[8]) \leftarrow (R[1],R[2],\dots,R[8])</math>.
# Для <math>i</math> от <math>2</math> до <math>2r+1</math>:
#* для <math>j</math> от 1 до 8: <math>R[j] \leftarrow R[j]<<<3</math>.
#* для <math>j</math> от 1 до 8: <math>K_i[j] \leftarrow R[j]+B_i[j]\mbox{ mod }256</math>.

=== Криптоанализ алгоритма ===
Джэймс Мэсси доказал, что после шести раундов шифрования алгоритмом ''SAFER K-64'' обеспечивается абсолютная устойчивость к [[Дифференциальный криптоанализ|дифференциальному криптоанализу]].<ref name="Schneier"/> При этом, уже после трёх раундов шифрования [[линейный криптоанализ]] также становится неэффективным для взлома.<ref name="Schneier"/>

Несмотря на это, в [[1995 год]]у [[Кнудсен, Ларс|Ларсом Кнудсеном]] была обнаружена слабость в алгоритме генерации ключей для ''SAFER K-64''. Он показал<ref name="Schneier"/>, что для любого ключа шифрования <math>K_{1}</math> можно найти один или несколько (вплоть до девяти) ключей <math>K_{2}</math> (отличающихся от него значением лишь одного байта), таких, что при зашифровании двух различных исходных текстов <math>M_{1}</math> и <math>M_{2}</math> получается один и тот же шифротекст, что можно записать в виде <math>E(M_1,K_1) = E(M_2,K_2)</math>. Число различных открытых текстов M, из которых получается один и тот же шифротекст, лежит в промежутке между <math>2^{22}</math> и <math>2^{28}</math> из возможных <math>2^{64}</math> текстов. Таким образом, путём анализа от <math>2^{44}</math> до <math>2^{47}</math> открытых текстов можно вычислить 8 бит секретного ключа длиной 64-бита. Эта атака в дальнейшем была значительно усилена {{Не переведено|:en:John Kelsey (cryptanalyst)|Келси, Джон|Джоном Келси}} ({{lang-en|John Kelsey}}), [[Брюс Шнайер|Брюсом Шнайером]] и {{Не переведено|:en:David A. Wagner|Вагнер, Дэвид|Дэвидом Вагнером}} ({{lang-en|David A. Wagner}}). Авторы атаки утверждали, что алгоритм легко поддаётся атакам на связанных ключах за счёт очень простой и однообразной процедуры генерации подключей.<ref name="CIO">
{{cite web 
|url=http://www.cio-world.ru/it-director/321325/ 
|title=Эволюция алгоритмов шифрования, алгоритмы ''SAFER K'' и ''SAFER SK'' 
|lang=ru 
|description=Статья с подробным рассмотрением алгоритмов ''SAFER K-64/128'' и ''SAFER SK-64/128''
|datepublished = 2007-06-15
|author = Панасенко С.П.
|accessdate = 2009-11-12
}}
</ref>

Это свойство значительно уменьшает надёжность алгоритма ''SAFER K-64'' при использовании его в качестве однонаправленной [[Хэш-функция|хэш-функции]]. Его надёжность как алгоритма шифрования при этом не уменьшается. Тем не менее, эта слабость алгоритма, вместе с атакой, в дальнейшем опубликованной Мёрфи, побудили [[Мэсси, Джеймс|Мэсси]] улучшить алгоритм генерации ключей. В результате в сентябре [[1995 год]]а им был опубликован алгоритм ''SAFER SK-64''.

Ещё одна сертифицированная атака на алгоритм ''SAFER K-64'' была осуществлена [[Кнудсен, Ларс|Ларсом Кнудсеном]] и {{Не переведено|:en:Tom Berson|Томасом Бёрсоном}} ({{lang-en|Thomas A. Berson}}).<ref name="Menezes"/> Она была расcчитана на исходный текст длиной <math>2^{45}</math>, зашифрованный 5 раундами алгоритма ''SAFER K-64''. Хотя эта атака и не была способна взломать шифротекст уже при 6 раундах шифрования, она показала, что [[Криптографическая стойкость|криптостойкость]] алгоритма меньше, чем изначально заявлял Мэсси (он утверждал, что алгоритм является абсолютно стойким к методам [[Линейный криптоанализ|линейного криптоанализа]]).

Французский криптограф {{Не переведено|:fr:Serge Vaudenay|Серж Водено}} ({{lang-fr|Serge Vaudenay}}) показал, что при замене содержимого S-блоков случайными перестановками, алгоритм ''SAFER K-64'' становится менее криптостойким.<ref name="Menezes"/>

== SAFER K-128 ==

[[Файл:SAFER K128 KeyGeneration.jpg|thumb|right|300px|Алгоритм генерации ключей в ''SAFER K-128'']]
Алгоритм отличается от ''SAFER K-64'' только длиной пользовательского ключа и, соответственно, самим способом генерации [[Ключ (криптография)|ключей]]. Этот способ был разработан Министерством внутренних дел [[Сингапур]]а<ref name="Schneier"/> и впоследствии использован [[Мэсси, Джеймс|Джеймсом Мэсси]] в его алгоритме.

=== Генерация ключей ===

В этом алгоритме вместо одного [[Ключ (криптография)|ключа]] длиной 64 бита используется ключ длиной 128 бит, что эквивалентно заданию двух ключей длиной по 64 бита. Из этих двух ключей по методу, крайне схожему с использованным в шифре ''SAFER K-64'', генерируются две независимые последовательности подключей. Ключи из этих последовательностей попеременно используются на всех раундах шифрования.

Как видно из схемы, на каждом этапе происходит побитовый сдвиг байтов ключа не на 3, а на 6 бит. Это приводит к тому, что, задавшись одинаковыми начальными ключами <math>K_a = K_b</math>, получим, что 128-битовый ключ совместим с 64-битовым ключом <math>K_a</math>. То есть, используя ключ вида <math>K_aK_a</math> в алгоритме ''SAFER K-128'' и ключ <math>K_a</math> в ''SAFER K-64'', получим одинаковые последовательности подключей, а значит и само шифрование в ''SAFER K-128'' ничем не будет отличаться от такового в ''SAFER K-64''.

=== Криптоанализ ===

При всей схожести алгоритма ''SAFER K-128'' с его предшественником, существует и ряд отличий. Так, в новой версии алгоритма Джеймс Мэсси рекомендует использовать уже не 6, а 10 (максимум 12) [[Итерация|раундов]] шифрования.<ref name="CIO"/> Это связано с тем, что при меньшем количестве итераций алгоритм, так же как и ''SAFER K-64'', подвержен атаке, осуществлённой [[Кнудсен, Ларс|Ларсом Кнудсеном]]. Напомним, что она касается использования алгоритма в качестве основы для [[Хеширование|хэш-функции]]. Увеличение же количества раундов шифрования, по мнению автора, значительно повышает криптостойкость алгоритма в этом смысле.<ref name="CIO"/>

== SAFER SK-64 ==

Данный алгоритм отличается от ''SAFER K-64'' лишь способом генерации подключей. Этот способ был предложен [[Кнудсен, Ларс|Ларсом Кнудсеном]], после того как им же была найдена атака на алгоритм ''SAFER K-64''. Рекомендуемое количество раундов шифрования увеличено по сравнению с изначальным вариантом с 6 до 8.<ref name="CIO"/> Различия в способах расширения ключа хорошо видны при формальном описании алгоритма:

[[Файл:SAFER SK64.jpg|thumbnail|380px|Схема генерации подключей в ''SAFER SK-64'']]

'''Формальное описание алгоритма генерации ключей:'''<ref name="Menezes"/>

ВХОД: 64-битовый ключ <math>K=k_1,\dots,k_{64}</math>; количество раундов <math>r</math>.

ВЫХОД: 64-битовые подключи <math>K_1,\dots,K_{2r+1}</math>. Байт <math>K_i[j]</math> — <math>j</math>-байт ключа <math>K_i</math> (нумерация слева направо).

# Пусть <math>R[i]</math> — 8-битовые величины. Пусть <math>B_i[j]</math> — <math>j</math>-байт константы <math>i</math>-го этапа шифрования.
# <math>(R[1],R[2],\dots,R[8]) \leftarrow (k_1 \dots k_8, k_9 \dots k_{16}, k_{57} \dots k_{64})</math>; <math>R[9] \leftarrow R[1]+R[2]+\dots+R[8]</math> (сложение производится по модулю 2).
# <math>(K_1[1],K_1[2],\dots,K_1[8]) \leftarrow (R[1],R[2],\dots,R[8])</math>
# Для <math>i</math> от <math>2</math> до <math>2r+1</math>:
#* для <math>j</math> от 1 до 9: <math>R[j] \leftarrow R[j]<<<3</math>.
#* для <math>j</math> от 1 до 8: <math>K_i[j] \leftarrow R[((i+j-2)\mbox{ mod }9)+1]+B_i[j]\mbox{ mod } 256</math>.

Главной отличительной чертой этого алгоритма является использование дополнительного байта <math>R[9]</math>, который получается из [[XOR|побитового сложения]] восьми байт ключа. Далее, на каждом этапе алгоритма происходит циклический сдвиг этих байт, в результате получается, что подключ <math>K_1</math> зависит от байт <math>R[1],R[2],\dots,R[8]</math>, подключ <math>K_2</math> — от байт <math>R[2],R[3],\dots,R[9]</math>, подключ <math>K_3</math> — от байт <math>R[3],\dots,R[9],R[1]</math> и т. д. Побитовый сдвиг на 3 бита и структура констант шифрования остаются без изменений.

=== Криптоанализ ===

Такие, казалось бы, незначительные изменения в алгоритме генерации ключей, значительно повышают [[криптостойкость]] алгоритма. В настоящее время не известны [[Криптографическая атака|атаки]] на алгоритмы ''SAFER SK-64'' и ''SAFER SK-128'' более эффективные, чем [[полный перебор]] ключей.<ref name="CIO"/>

При этом существуют атаки, направленные на урезанные версии этих алгоритмов. Приведём некоторые из них:<ref name="CIO"/>
* Атака на ''SAFER SK-64'' с 3,75 раундами. Имеется в виду, что при шифровании таким алгоритмом сначала осуществляются 3 раунда, а в четвёртом раунде опускаются линейные преобразования [[PHT]]. В ней используется метод т. н. невозможных дифференциалов,<ref>
{{cite web 
|url=http://www.cio-world.ru/weekly/300850/page2.html
|title=Современные методы вскрытия алгоритмов шифрования, часть 5
|lang=ru 
|description=Описание метода невозможных дифференциалов
|datepublished = 2006-12-25
|author = Панасенко С.П.
|accessdate = 2009-11-12
}}
</ref> относящийся к методам [[дифференциальный криптоанализ|дифференциального криптоанализа]]. Для его применения нужно задействовать <math>2^{32}</math> пробных открытых текстов и <math>2^{62}</math> тестовых операций шифрования.<ref name="Nakahara">
{{статья
|автор        = Nakahara J.Jr., Preneel B., Vandewalle J.
|заглавие     = Impossible Differential Attacks on Reduced-Round SAFER Ciphers
|ссылка       = 
|издание      = Katholieke Universiteit Leuven, Belgium
|тип          = 
|место        = 
|издательство = 
|год          = 12 марта, 2003
|том          = 
|номер        = 
|страницы     = 
}}
</ref>
* {{Не переведено|:en:Integral cryptanalysis|Square-атака}} на ''SAFER SK-64'' и ''SK-128'' с 3,25 раундами. Здесь имеется в виду, что на четвёртом раунде происходит лишь подмешивание первого из двух ключей. Она использует <math>2^{10,3}</math> пробных открытых текстов и <math>2^{38}</math> тестовых операций шифрования.<ref name="Nakahara"/>
* Атака на ''SAFER SK-128'' с 4,75 раундами, применяющая методы [[линейный криптоанализ|линейного криптоанализа]]. Атака требует <math>2^{64}</math> открытых текстов и <math>2^{90}</math> тестовых операций шифрования.<ref name="Nakahara2">
{{статья
|автор        = Nakahara J.Jr.
|заглавие     = Cryptanalysis and Design of Block Ciphers
|ссылка       = 
|издание      = Katholieke Universiteit Leuven
|тип          = 
|место        = 
|издательство = 
|год          = Июнь, 2003
|том          = 
|номер        = 
|страницы     = 
}}
</ref>

Как видно, все эти атаки не очень практичны, поскольку требуют достаточно больших ресурсов и времени.

== SAFER SK-128 ==

Данный [[алгоритм]] [[шифрование|шифрования]] отличается от ''SAFER SK-64'' точно таким же образом, каким ''SAFER K-128'' отличается от ''SAFER K-64''. А именно, сами алгоритмы шифрования и генерации подключей остаются прежними, но вместо одного исходного [[Ключ (криптография)|ключа]] длиной в 64 бита используется два таких ключа, для каждого из которых независимо формируются последовательности подключей, которые затем применяются поочерёдно. При этом каждая последовательность для чётных и для нечётных ключей аналогична по структуре алгоритму расширения ключа в ''SAFER SK-64''. В ней точно так же на первом этапе вводится дополнительный байт, являющийся [[XOR|суммой по модулю 2]] остальных восьми байт, и затем на каждом этапе происходит побайтовый циклический сдвиг.

Стоит отметить, что, как и для алгоритмов ''SAFER K-64'' и ''SAFER K-128'', при использовании пользовательского ключа вида <math>K_aK_a</math> в ''SAFER SK-128'' и ключа <math>K_a</math> в ''SAFER SK-64'', действие алгоритмов оказывается совершенно одинаковым. При этом количество [[итерация|раундов шифрования]], рекомендуемое для ''SAFER SK-128'', остаётся таким же, как и в ''SAFER K-128'', и равно 10.<ref name="CIO"/>

== SAFER SK-40 ==

Данный вариант шифра использует уменьшенный ключ длиной всего 40 [[бит]] (5 [[байт]]). Это позволяло алгоритму обойти [[экспортные ограничения]], существовавшие на тот момент в [[США]]. Алгоритм работает практически таким же образом, как и ''SAFER SK-64'', с одним небольшим отличием на начальном этапе генерации подключей.

В алгоритме ''SAFER SK-64'' к 8 байтам исходного [[Ключ (криптография)|ключа]] приписывался девятый байт, равный их [[XOR|побитовой сумме по модулю 2]]. ''В SAFER SK-40'' эти 9 байт получаются совершенно иначе. Обозначим их <math>KI_1</math>, <math>KI_2</math>, … <math>KI_9</math>. Первые 5 из них — это байты исходного ключа. Остальные 4 байта получаются из первых следующим образом<ref>
{{cite web
 | author        = John Savard.
 | last          = Savard
 | first         = John
 | authorlink    = 
 | coauthors     = 
 | datepublished = 
 | url           = http://www.quadibloc.com/crypto/co040301.htm
 | title         = SAFER (Secure And Fast Encryption Routine)
 | format        = 
 | work          = 
 | publisher     = 
 | accessdate    = 2009-12-22
 | accessyear    = 
 | lang          = en
 | description   = описание алгоритмов SAFER K и SAFER SK
 | archiveurl    = 
 | archivedate   = 
}}
</ref>:

<math>KI_6 = KI_1 \oplus KI_3 \oplus 129</math>,

<math>KI_7 = KI_1 \oplus KI_4 \oplus KI_5 \oplus 66</math>,

<math>KI_8 = KI_2 \oplus KI_3 \oplus KI_5 \oplus 36</math>,

<math>KI_9 = KI_2 \oplus KI_4 \oplus 24</math>;

Первый подключ <math>K_1</math> получается из первых восьми полученных байт. Последующие подключи генерируются с их использованием точно таким же образом, как и в алгоритме ''SAFER SK-64''.

== SAFER+ ==

[[Файл:SAFER plus.jpg|thumb|right|500px|один раунд алгоритма ''SAFER+'']]
''SAFER+'' представляет собой улучшенный вариант [[алгоритм]]ов семейства ''SAFER''. Алгоритм разработан в [[1998 год]]у для участия в [[AES (конкурс)|конкурсе на стандарт AES]]. Над его созданием совместно трудились специалисты из калифорнийской корпорации Cylinc ([[Мэсси, Джеймс|Джеймс Мэсси]]) и Академии наук республики [[Армения|Армении]] (Гурген Хачатрян и Мельсик Курегян).<ref name="CIO_SAFER+">
{{cite web 
|url=http://www.cio-world.ru/it-director/323862/ 
|title=Эволюция алгоритмов шифрования, шифры ''SAFER+'' и ''SAFER++'' 
|lang=ru 
|description=Статья с подробным рассмотрением алгоритмов ''SAFER+'' и ''SAFER++''
|datepublished = 2007-07-12
|author = Панасенко С.П.
|accessdate = 2009-11-12
}}
</ref>

В конкурсе AES алгоритм прошёл первый отборочный тур наряду с 14 другими алгоритмами. В финал конкурса, к которому допускались лишь 5 алгоритмов, ''SAFER+'' не прошёл, поскольку по результатам тщательного анализа оказалось, что он подвержен ряду атак и имеет низкую скорость выполнения.<ref name="AES">
{{cite web 
|url=http://www.ixbt.com/soft/alg-encryption-aes.shtml 
|title= Алгоритмы шифрования — финалисты конкурса AES
|lang=ru 
|description=содержатся выводы о характеристиках алгоритма SAFER+
|datepublished = 24 августа 2006 г.
|author = Панасенко С.П.
|accessdate = 2009-11-12
}}
</ref> Алгоритм создавался для работы на 8-битных процессорах, и как следствие, достаточно медленно работает на 32-битных процессорах.<ref name = "AESkiwi">
{{cite web 
|url=http://kiwibyrd.chat.ru/aes/aes1.htm#b16 
|title=Конкурс на новый криптостандарт AES 
|lang=ru 
|description=Краткое описание алгоритма ''SAFER+''
|datepublished = апрель 1999
|author = Б. Киви
|accessdate = 2009-11-12
}}
</ref>

''SAFER+'' обрабатывает данные 128-битным блоком. Алгоритм поддерживает 128, 192 и 256-битные [[ключ (криптография)|ключи]] в соответствии с требованиями, предъявленными [[NIST|Национальным институтом стандартов и технологий США (NIST)]].<ref name="Barichev">
{{книга 
 |автор        = С.Баричев, Р.Серов
 |заглавие     = Основы современной криптографии 
 |ссылка       = 
 |издание      = V 1.2.
 |место        = 
 |издательство = Москва
 |год          = 2001
 |страницы     = 36-41
 |страниц      = 122
}}
</ref> Количество [[итерация|раундов шифрования]] зависит от размера ключа:

* 8 раудов для 128-битного ключа;
* 12 раундов для 192-битного ключа;
* 16 раундов для 256-битного ключа.

=== Алгоритм шифрования ===

По структуре алгоритм ''SAFER+'' напоминает ''SAFER K-64''. Он состоит из тех же основных этапов, несколько отличающихся по своей структуре. На каждом раунде работы алгоритма сначала происходит подмешивание одного подключа, после этого байты проходят через блоки нелинейной замены, затем подмешивается второй подключ и происходит линейное перемешивание байт. Подключи последовательно генерируются с использованием входного ключа. Ниже приведено более подробное описание работы одной итерации (''i'' — номер итерации):

# '''Наложение ключа <math>K_{2i-1}</math>''': байты входного блока складываются с байтами ключа <math>K_{2i-1}</math>, причём используется сложение по модулю 2 для байт с номерами 1, 4, 5, 8, 9, 12, 13 и 16, и сложение по модулю 256 для байт с номерами 2, 3, 6, 7, 10, 11, 14 и 15.
# '''Нелинейное преобразование''': к байтам с номерами 1, 4, 5, 8, 9, 12, 13 и 16 применяется операция <math>45^x(mod 257)</math> (причём <math>45^{128}(mod 257)=256</math> заменяется нулём). К байтам с номерами 2, 3, 6, 7, 10, 11, 14 и 15 применяется операция <math>log_{45}(x)</math> (причём <math>log_{45}(0)=128</math>). результаты действия этих операций как и для других разновидностей алгоритма SAFER на практике часто хранят в специальных таблицах. В данном случае для этого требуется 512 байт.
# '''Наложение ключа <math>K_{2i}</math>''': байты входного блока складываются с байтами ключа <math>K_{2i}</math>, но в отличие от п.1 операции сложения по модулю 2 и по модулю 256 меняются местами.
# '''Линейное преобразование''': умножение 16-байтного блока данных справа на специальную [[невырожденная матрица|невырожденную матрицу]] ''M'' (все операции при этом байтовые и производятся [[Модульная арифметика|по модулю 256]]). Умножение на эту матрицу эквивалентно четырём уровням преобразования [[PHT]], между которыми выполняются некоторые байтовые перестановки.<ref name="CIO_SAFER+"/> Стоит отметить, что эта часть алгоритма является наиболее громоздкой с вычислительной точки зрения.

После проведения ''r'' раундов шифрования производится подмешивание ключа <math>K_{2r+1}</math>, аналогичное подмешиванию ключей <math>K_{2i-1}</math>.

=== Алгоритм расшифрования ===

Операции в алгоритме расшифрования подобны операциям шифрования и производятся в обратном порядке. Разница состоит в следующем:
# Вместо [[Матрица (математика)|матрицы]] <math>M</math> умножение происходит с обратной ей матрицей <math>M^{-1}</math>;
# Все операции сложения по модулю 256 заменяются операциями вычитания;
# Операции <math>45^x\mbox{ (mod } 257)</math> и <math>log_{45} x</math> (являющиеся обратными друг другу) меняются местами.

<br clear="all" />
{| class="wikitable" align="left" style="text-align:center; width:45%;"
|+ При шифровании используется следующая матрица ''M'':<ref name="Barichev"/>
| 2 || 2 || 1 || 1 || 16 || 8 || 2 || 1 || 4 || 2 || 4 || 2 || 1 || 1 || 4 || 4
|-																															
| 1 || 1 || 1 || 1 || 8 || 4 || 2 || 1 || 2 || 1 || 4 || 2 || 1 || 1 || 2 || 2
|-																															
| 1 || 1 || 4 || 4 || 2 || 1 || 4 || 2 || 4 || 2 || 16 || 8 || 2 || 2 || 1 || 1
|-																															
| 1 || 1 || 2 || 2 || 2 || 1 || 2 || 1 || 4 || 2 || 8 || 4 || 1 || 1 || 1 || 1
|-																															
| 4 || 4 || 2 || 1 || 4 || 2 || 4 || 2 || 16 || 8 || 1 || 1 || 1 || 1 || 2 || 2
|-																															
| 2 || 2 || 2 || 1 || 2 || 1 || 4 || 2 || 8 || 4 || 1 || 1 || 1 || 1 || 1 || 1
|-																															
| 1 || 1 || 4 || 2 || 4 || 2 || 16 || 8 || 2 || 1 || 2 || 2 || 4 || 4 || 1 || 1
|-																															
| 1 || 1 || 2 || 1 || 4 || 2 || 8 || 4 || 2 || 1 || 1 || 1 || 2 || 2 || 1 || 1
|-																															
| 2 || 1 || 16 || 8 || 1 || 1 || 2 || 2 || 1 || 1 || 4 || 4 || 4 || 2 || 4 || 2
|-																															
| 2 || 1 || 8 || 4 || 1 || 1 || 1 || 1 || 1 || 1 || 2 || 2 || 4 || 2 || 2 || 1
|-																															
| 4 || 2 || 4 || 2 || 4 || 4 || 1 || 1 || 2 || 2 || 1 || 1 || 16 || 8 || 2 || 1
|-																															
| 2 || 1 || 4 || 2 || 2 || 2 || 1 || 1 || 1 || 1 || 1 || 1 || 8 || 4 || 2 || 1
|-																															
| 4 || 2 || 2 || 2 || 1 || 1 || 4 || 4 || 1 || 1 || 4 || 2 || 2 || 1 || 16 || 8
|-																															
| 4 || 2 || 1 || 1 || 1 || 1 || 2 || 2 || 1 || 1 || 2 || 1 || 2 || 1 || 8 || 4
|-																															
| 16 || 8 || 1 || 1 || 2 || 2 || 1 || 1 || 4 || 4 || 2 || 1 || 4 || 2 || 4 || 2
|-																															
| 8 || 4 || 1 || 1 || 1 || 1 || 1 || 1 || 2 || 2 || 2 || 1 || 2 || 1 || 4 || 2
|-
|}

{| class="wikitable" align="right" style="text-align:center; width:45%;"
|+ При расшифровании используется обратная матрица <math>M^{-1}</math>:<ref name="Barichev"/>
| 2 || −2 || 1 || −2 || 1 || −1 || 4 || −8 || 2 || −4 || 1 || −1 || 1 || −2 || 1 || −1
|-																															
| −4 || 4 || −2 || 4 || −2 || 2 || −8 || 16 || −2 || 4 || −1 || 1 || −1 || 2 || −1 || 1
|-																															
| 1 || −2 || 1 || −1 || 2 || −4 || 1 || −1 || 1 || −1 || 1 || −2 || 2 || −2 || 4 || −8
|-																															
| −2 || 4 || −2 || 2 || −2 || 4 || −1 || 1 || −1 || 1 || −1 || 2 || −4 || 4 || −8 || 16
|-																															
| 1 || −1 || 2 || −4 || 1 || −1 || 1 || −2 || 1 || −2 || 1 || −1 || 4 || −8 || 2 || −2
|-																															
| −1 || 1 || −2 || 4 || −1 || 1 || −1 || 2 || −2 || 4 || −2 || 2 || −8 || 16 || −4 || 4
|-																															
| 2 || −4 || 1 || −1 || 1 || −2 || 1 || −1 || 2 || −2 || 4 || −8 || 1 || −1 || 1 || −2
|-																															
| −2 || 4 || −1 || 1 || −1 || 2 || −1 || 1 || −4 || 4 || −8 || 16 || −2 || 2 || −2 || 4
|-																															
| 1 || −1 || 1 || −2 || 1 || −1 || 2 || −4 || 4 || −8 || 2 || −2 || 1 || −2 || 1 || −1
|-																															
| −1 || 1 || −1 || 2 || −1 || 1 || −2 || 4 || −8 || 16 || −4 || 4 || −2 || 4 || −2 || 2
|-																															
| 1 || −2 || 1 || −1 || 4 || −8 || 2 || −2 || 1 || −1 || 1 || −2 || 1 || −1 || 2 || −4
|-																															
| −1 || 2 || −1 || 1 || −8 || 16 || −4 || 4 || −2 || 2 || −2 || 4 || −1 || 1 || −2 || 4
|-																															
| 4 || −8 || 2 || −2 || 1 || −2 || 1 || −1 || 1 || −2 || 1 || −1 || 2 || −4 || 1 || −1
|-																															
| −8 || 16 || −4 || 4 || −2 || 4 || −2 || 2 || −1 || 2 || −1 || 1 || −2 || 4 || −1 || 1
|-																															
| 1 || −1 || 4 || −8 || 2 || −2 || 1 || −2 || 1 || −1 || 2 || −4 || 1 || −1 || 1 || −2
|-																															
| −2 || 2 || −8 || 16 || −4 || 4 || −2 || 4 || −1 || 1 || −2 || 4 || −1 || 1 || −1 || 2
|-
|}

<br clear="all" />

=== Генерация ключей ===
Излагаемый алгоритм применим для входных ключей длиной в 128, 192 и 256 [[бит]] (16, 24 и 32 [[байт]] соответственно). Первый подключ <math>K_1</math> представляет собой первые 16 байт входного ключа. Генерация остальных ключей производится следующим образом:
сначала исходный ключ целиком записывается в ключевой [[Регистр (цифровая техника)|регистр]] длиной на 1 байт длиннее самого ключа (то есть длина регистра равна для разных входных ключей 17, 25 или 33 байтам). Все байты ключа [[XOR|суммируются по модулю 2]] поразрядно, результат записывается в последний байт регистра. Для получения каждого следующего ключа над содержимым регистра выполняются следующие операции (для ''i'' от 2 до 2''r''+1):
# Содержимое байт ключевого регистра циклически сдвигается влево на 3 позиции (сдвиг происходит внутри байт в отдельности, а не регистра как целого);
# Из регистра выбираются 16 байт. При этом для ключа <math>K_i</math> выбираются байты регистра начиная с ''i''-го и далее по циклу.
# Отобранные 16 байт складываются по модулю 256 с байтами слова смещения <math>B_i</math> (смотри ниже). Результат сложения и будет являться подключом <math>K_i</math>.

Слова смещения <math>B_i</math> — это 16-байтные константы, вычисляемые по следующей формуле:
<math>B_{i,j} = \begin{cases} 
  45^{45^{17i+j}\mbox{ mod }257}\mbox{ mod }257,  & i\mbox{ = 2,3,... 17; }j \mbox{ = 1,3,... 16} \\
  45^{17i+j}\mbox{ mod }257, & i\mbox{ = 18,19,... 33; }j \mbox{ = 1,3,... 16} 
\end{cases}</math>

<math>B_{i,j}</math> — ''j''-й байт ''i''-го слова смещения. Если <math>B_{i,j}=256</math> то этот байт заменяется на 0.

Понятно, что поскольку для различных длин ключей количество итераций шифрования различно (и равно 8, 12 и 16 для ключей длиной 128, 192 и 256 бит соответственно), то и использованы будут не все блоки смещения. Так, при длине ключа в 128 бит будут использованы только <math>B_2</math>, … <math>B_{17}</math>, для ключа в 192 бита — <math>B_2</math>, … <math>B_{25}</math>, а для ключа в 256 бит — все слова смещения.

=== Криптоанализ ===

В связи с участием алгоритма ''SAFER+'' в конкурсе [[Advanced Encryption Standard|AES]], к его криптоанализу было обращено весьма пристальное внимание криптологов. В результате было найдено несколько атак на алгоритм. Перечислим некоторые из них:
* Атака на ''SAFER+'' с длиной входного ключа равной 256. Для её осуществления необходимо знать всего 3 открытых текста и соответствующих им шифротекста, но при этом требуется провести <math>2^{240}</math> тестовых операций шифрования. Понятно, что такое колоссальное количество операций делает атаку абсолютно непрактичной. Тем не менее, она показывает, что алгоритм ''SAFER+'' обладает недостаточным запасом прочности.<ref name="SAFER+WEAK1">{{статья
| автор         = [[:en:John Kelsey (cryptanalyst)|J. Kelsey]], [[Шнайер, Брюс|B. Schneier]], and [[:en:David A. Wagner|D. Wagner]]
| заглавие      = Key Schedule Weakness in SAFER+
| ссылка        = http://www.schneier.com/paper-safer.html
| язык          = en
| издание       = Second AES Candidate Conference
| год           = 1999
}}</ref>
* Атака на связанных ключах, требующая около <math>2^{200}</math> тестовых операций шифрования. Также является неосуществимой с практической точки зрения. Сами авторы этих двух атак предложили способ усиления алгоритма ''SAFER+'', полностью защищающий от этих атак.<ref name="SAFER+WEAK1"/> Способ заключается в усилении процедуры генерации подключей.
* Атака методами [[дифференциальный криптоанализ|дифференциального криптоанализа]] по потребляемой мощности.<ref>{{статья
| автор         = Eli Biham, Adi Shamir
| заглавие      = Power Analysis of the Key Scheduling of the AES Candidates
| оригинал      = 
| ссылка        = http://www.cs.technion.ac.il/~biham/publications.html
| язык          = en
| издание       = Second AES Candidate Conference
| год           = 1999
}}</ref><ref>{{статья
| автор         = S. Chari, C. Jutla, J.R. Rao, P. Rohatgi
| заглавие      = A Cautionary Note Regarding Evaluation of AES Candidates on Smart-Cards
| ссылка        = http://csrc.nist.gov/archive/aes/round1/conf2/aes2conf.htm
| язык          = en
| издание       = Second AES Candidate Conference
| год           = 1999
}}</ref>
* Атаки на усечённые версии ''SAFER+''.<ref name="Nakahara"/><ref name="Nakahara2"/>

В ходе конкурса AES алгоритм ''SAFER+'' был охарактеризован следующим образом:<ref name="CIO_SAFER+"/>
* Плюсы алгоритма:
*# большой запас криптостойкости (особенно с применением усиленной процедуры расширения ключей);
*# низкие требования к вычислительным ресурсам, что позволяет применять алгоритм в маломощных устройствах, таких как [[Смарт-карта|смарт-карты]];
* Недостатки алгоритма:
*# низкая скорость шифрования, достаточно медленная процедура генерации подключей;
*# уязвимость к {{Не переведено|:en:Power analysis|атакам по потребляемой мощности}}.

== SAFER++ ==

[[Алгоритм]] является дальнейшим развитием ''SAFER+'', и практически полностью наследует его структуру. Различия заключаются в основном в оптимизации (с точки зрения облегчения вычислений) некоторых участков алгоритма. Он использует меньшее число раундов: семь для 128-битного ключа и десять для 256-битного ключа. Длина блока в этом шифре равна 128 битам, но помимо этого предусматривается режим «обратной совместимости» при использовании блоков длиной 64 бита.

Алгоритм прошёл во вторую фазу конкурса ''[[NESSIE]]'', но не был выбран в набор рекомендуемых ''[[NESSIE]]'' криптографических примитивов. Эксперты сочли, что шифр слишком медленный на всех машинах, кроме [[смарт-карта|смарт-карт]], а запас безопасности шифра слишком мал.<ref>
{{статья 
|автор        = 
|заглавие     = New European Schemes for Signatures, Integrity, and Encryption
|ссылка       = https://www.cosic.esat.kuleuven.be/nessie/Bookv015.pdf
|издание      = v. 0.15
|тип          = 
|место        = 
|издательство = Final report of European project IST-1999-12324
|год          = 19 апреля, 2004 г.
|том          = 
|номер        = 
|страницы     = 476
}}
</ref>

=== Алгоритм ===

[[Файл:SAFER plus plus.jpg|thumb|right|500px|структура блока линейного преобразования алгоритма ''SAFER++'']]
Значительная часть процедуры шифрования ничем не отличается от таковой в алгоритме ''SAFER+''. Главное различие заключается в процедуре линейного преобразования, которая была значительно оптимизирована с вычислительной точки зрения (в ''SAFER+'' необходимо производить перемножение с матрицей размеров 16x16, что требует большого количества операций побайтового сложения).

[[Линейное преобразование]], как видно из схемы, состоит из следующих этапов:
# 16 входных байтов перемешиваются в следующем порядке: [9, 6, 3, 16, 1, 14, 11, 8, 5, 2, 15, 12, 13, 10, 7, 4];
# Байты в новом порядке разбиваются на группы по 4. Каждая группа подвергается 4-точечному [[Псевдопреобразование Адамара|псевдопреобразованию Адамара]];
# После преобразования байты вновь перемешиваются в том же порядке, что и в п.1;
# Аналогично п.2 байты снова проходят через [[Псевдопреобразование Адамара|псевдопреобразования Адамара]]. Результат подаётся на выход.

Псевдопреобразование Адамара заключается в умножении 4-байтовой строки на [[невырожденная матрица|невырожденную матрицу]] 4x4, которая имеет следующую структуру:
: <math>H_4=
\begin{bmatrix}
   2 & 1 &1 &1\\
   1 & 2 &1 &1\\
   1 & 1 &2 &1\\
   1 & 1 &1 &1
 \end{bmatrix}
</math>.

[[Обратная матрица]], используемая при [[шифрование|расшифровании]], имеет вид
: <math>H^{-1}_4=
\begin{bmatrix}
   1 & 0 &0 &-1\\
   0 & 1 &0 &-1\\
   0 & 0 &1 &-1\\
   -1 & -1 &-1 &4
 \end{bmatrix}
</math>

Преимущество такого подхода по сравнению с умножением на [[Матрица (математика)|матрицу]] 16x16, используемую в ''SAFER+'', состоит в том, что для линейного преобразования, в силу структуры матриц преобразования Адамара, требуется значительно меньшее количество элементарных операций. А именно, при умножении 16-байтовой строки на матрицу 16x16 в общем случае требуется 15*16 операций сложения и 16*16 операций умножения. Умножение же на матрицу Адамарова преобразования требует всего лишь 6 операций сложения:<ref name="Barichev"/>

[[Файл:Adamar matrix.jpg|thumb|right|150px|схематическое представление умножения на матрицу 4-точечного псевдопреобразования Адамара]]
Если ''a'', ''b'', ''c'', ''d'' — входные байты, ''A'', ''B'', ''C'', ''D'' — выходные байты, то вычисления представимы формулами (сложение производится [[модульная арифметика|по модулю 256]]):
: <math>D=a+b+c+d</math> (3 операции сложения),
: <math>A=D+a</math> (1 операция сложения),
: <math>B=D+b</math> (1 операция сложения),
: <math>C=D+c</math> (1 операция сложения).

Таким образом, даже принимая во внимание, что умножение на матрицу <math>H_4</math> производится 8 раз, получаем всего 6*8=48 операций, что значительно меньше, чем в ''SAFER+'' (даже с учётом всех производимых байтовых перестановок в алгоритме ''SAFER++'').

Всю структуру линейного преобразования можно, так же, как и в ''SAFER+'', представить в виде [[Невырожденная матрица|невырожденной матрицы]] 16x16. Однако, большинство элементов в этой матрице будет равно единице. В [[Обратная матрица|обратной матрице]], необходимой для совершения процедуры [[шифрование|расшифрования]], большинство элементов будет равно нулю.

=== Генерация ключей ===

Существуют также некоторые отличия от ''SAFER+'' в алгоритме генерации подключей, используемых на различных раундах шифрования. В этом плане различия между ''SAFER+'' и ''SAFER++'' подобны различиям между ''SAFER K-64'' и ''SAFER K-128'', в том смысле, что в ''SAFER++'' чётные и нечётные подключи генерируются независимо друг от друга. Рассмотрим алгоритм более детально.

Используются 2 ключевых [[Регистр (цифровая техника)|регистра]] длиной 16+1=17 байт. В случае, если длина пользовательского ключа равна 128 битам (16 байт), в оба регистра изначально записывается этот ключ. Если же длина ключа равна 256 битам (32 байта), в первый регистр вписываются байты ключа с 1-го по 16-й, а во второй — с 17-го по 32-ой. На место 17-го байта в каждый регистр вписывается байтовая контрольная сумма от первых 16-и байт. После этого для ''i'' от 1 до <math>2r+1</math> (''r'' — количество раундов шифрования) производятся следующие действия (для ''i'' = 1,3, … 2''r''+1 рассматривается первый регистр, для ''i'' = 2,4, … 2''r'' — второй регистр):
# Выбираются 16 байт из регистра, начиная с номера ''i'' и далее по циклу. Так, для ключа с номером ''i''=5 байты будут выбраны следующим образом: [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 2, 3],
# Полученные байты складываются с соответствующим словом смещения <math>B_i</math> (смотри ниже)
# Содержимое всех байт регистра циклически сдвигается на 6 бит в случае нечётного ''i'', и на 3 бита в случае чётного ''i''.

Слова смещения вычисляются практически так же, как и в ''SAFER+'', с той лишь разницей, что изменяются диапазоны изменения параметра ''i'':
<math>B_{i,j} = \begin{cases} 
  45^{45^{17i+j}\mbox{ mod }257}\mbox{ mod }257, & i\mbox{ = 2,3,... 15; } j\mbox{ = 1,2,... 16} \\
  45^{17i+j}\mbox{ mod }257, & i\mbox{ = 16,17,... 21; } j\mbox{ = 1,2,... 16}
\end{cases}</math>

=== Криптоанализ ===

В рамках конкурса [[NESSIE]] алгоритм ''SAFER++'' был тщательно исследован на криптостойкость. По заключению экспертов уязвимости предшествующего ему алгоритма ''SAFER+'' не были унаследованы. Для полнораундового алгоритма ''SAFER++'' не было найдено никаких новых атак. При этом был осуществлён ряд атак на варианты шифра с уменьшенным числом раундов шифрования.<ref name="Nakahara"/><ref>
{{статья
| автор         = Nakahara J.Jr.
| заглавие      = An Update to Linear Cryptanalysis of SAFER++
| ссылка        = 
| язык          = en
| издание       = Katholieke Universiteit Leuven, Belgium
| тип           = 
| год           = 12 марта, 2003
| том           = 
| номер         = 
| страницы      = 
}}
</ref><ref>
{{статья
| автор         = Piret G., Quisquater J.-J.
| заглавие      = Integral Cryptanalysis on reduced-round SAFER++
| ссылка        = 
| язык          = en
| издание       = Universite catolique de Louvain, Louvain-la-Neuve, Belgium
| тип           = 
| год           = 
| том           = 
| номер         = 
| страницы      = 
}}
</ref> Одна из них, будучи неосуществимой вследствие огромного числа необходимых вычислений, теоретически способна взломать ''SAFER++'' с 5,5 раундами вместо семи.<ref>
{{статья
| автор         = Biryukov A., De Canniere C., Dellkrantz G.
| заглавие      = Cryptanalysis of SAFER++
| ссылка        = http://homes.esat.kuleuven.be/~abiryuko/safer.pdf
| язык          = en
| издание       = K.U.Leuven, Belgium
| тип           = 
| год           = 2003
| том           = 
| номер         = 
| страницы      = 
}}
</ref> Эта атака послужила одной из основных причин, по которым алгоритм не победил в конкурсе. Также, по мнению некоторых экспертов, алгоритм вполне может содержать невыявленные на настоящий момент слабости. Основной же причиной явилось недостаточное быстродействие алгоритма при реализации на многоразрядных устройствах.

== Практическое использование ==

Хотя алгоритмы ''SAFER'' не получили статуса стандартов в [[США]] или [[ЕС]], они нашли весьма широкое применение. В частности, ''SAFER+'' используется в качестве основы протокола аутентификации в [[Bluetooth]]. Однако, в самом алгоритме шифрования в Bluetooth этот алгоритм не используется.<ref name="Journal"/>

Несмотря на то, что в названии алгоритма фигурирует слово «''fast''» (быстрый), по современным меркам алгоритмы семейства ''SAFER'' являются достаточно медленными.

С точки зрения криптостойкости даже самая первая версия алгоритма ''SAFER K-64'' является абсолютно устойчивой к [[дифференциальный криптоанализ|дифференциальному криптоанализу]]. Последний алгоритм семейства — ''SAFER++'', будучи значительно модифицированным с учетом множества атак, осуществленных на более ранние версии алгоритма, стал ещё более устойчивым. В настоящее время никаких реально осуществимых атак на алгоритм не найдено.<ref name="Journal"/>

Учитывая, насколько далеко продвинулись алгоритмы ''SAFER'' за время своего существования — от ''SAFER K-64'' до ''SAFER++'', можно предположить, что на этом развитие этих алгоритмов не закончено.<ref name="CIO_SAFER+"/>

== Интересные факты ==

Как известно, аббревиатура «''SK''» в алгоритмах ''SAFER SK-64/128/40'' расшифровывается как ''Strengthened Key Schedule'', что означает «Усиленное расширение ключа». Однако, существует известная шутка, что на самом деле «''SK''» означает «''Stop Knudsen''» (Остановить [[Кнудсен, Ларс|Кнудсена]]), объясняющаяся тем, что новая процедура генерации ключей делает атаку Кнудсена безуспешной. Стоит отметить, что эта процедура была разработана самим Ларсом Кнудсеном.<ref>
{{cite web 
|url=http://www.rsa.com/rsalabs/node.asp?id=2152
|title= RSA FAQ  
|lang=en 
|description=
|datepublished = 
|author = 
|accessdate = 2009-11-19
}}
</ref>

== Литература ==
* {{Книга:Шнайер Б.: Прикладная криптография|часть=Глава 14. И ещё блочные шифры|страницы=382—384}}
* {{Книга:Handbook of Applied Cryptography}}
* {{Книга:Основы современной криптографии|страницы=36-41}}

== Ссылки ==
=== На русском языке ===

* {{cite web 
|url=http://www.cio-world.ru/it-director/321325/ 
|title=Эволюция алгоритмов шифрования 
|lang=ru 
|description=Статья с подробным рассмотрением алгоритмов SAFER K-64/128 и SAFER SK-64/128
|datepublished = 2007-06-15
|author = Панасенко С.П.
|accessdate = 2009-11-12
}}

* {{cite web 
|url=http://kiev-security.org.ua/box/1/95.shtml 
|title=Сравнительный анализ симметричных шифров
|lang=ru 
|description=сравнительный анализ блочных симметричных шифров, представленных в проекте NESSIE (включая SAFER++)
|author = Горбенко И.Д., Головашич С.А., Лепеха А.Н.
|datepublished = 2004
|accessdate = 2009-11-12 
}}

=== На других языках ===

* {{cite web 
|url=https://www.cosic.esat.kuleuven.be/nessie/ 
|title=NESSIE New European Schemes for Signatures, Integrity, and Encryption 
|lang=en 
|description=Официальный сайт «NESSIE»
|accessdate = 2009-11-12 
}}

* {{cite web 
|url=http://csrc.nist.gov/ 
|title=NIST official site 
|lang=en 
|description=Официальный сайт NIST
|accessdate = 2009-11-12 
}}

* {{cite web
|url=http://www.ieee-security.org/Cipher/ConfReports/conf-rep-aes.html 
|title=first advanced encryption standsrd (AES) candidate conference
|description=перечень участников конкурса AES, включая ''SAFER+''
|lang=en
|author = Edward Roback, Morris Dworkin
|datepublished = August 20-22, 1998
|accessdate = 2009-11-12
}}

* {{cite web 
|url=http://www.quadibloc.com/crypto/co040407.htm 
|title=Towards the 128-bit Era: AES Candidates, SAFER+
|lang=en 
|description=описание алгоритма SAFER+
|author = John Savard
|accessdate = 2009-11-12 
}}

* {{cite web 
|url=http://www.quadibloc.com/crypto/co040301.htm 
|title=SAFER (Secure And Fast Encryption Routine)
|lang=en 
|description=описание алгоритмов SAFER K и SAFER SK
|author = John Savard
|accessdate = 2009-11-12 
}}

* {{cite web 
|url=http://www.users.zetnet.co.uk/hopwood/crypto/scan/cs.html#SAFER-K
|title=SCAN’s entry for SAFER K
|lang=en 
|accessdate = 2009-11-12 
}}

* {{cite web
|url=http://www.users.zetnet.co.uk/hopwood/crypto/scan/cs.html#SAFER-SK |title=SCAN’s entry for SAFER SK
|lang=en 
|accessdate = 2009-11-12 
}}

* {{cite web
|url=http://www.users.zetnet.co.uk/hopwood/crypto/scan/cs.html#SAFER+ |title=SCAN’s entry for SAFER+
|lang=en 
|accessdate = 2009-11-12 
}}

* {{cite web
|url=http://www.users.zetnet.co.uk/hopwood/crypto/scan/cs.html#SAFER++ |title=SCAN’s entry for SAFER++
|lang=en 
|accessdate = 2009-11-12 
}}

* {{cite web
|url=http://groups.google.com/groups?selm=4336pm%24e9t%40net.auckland.ac.nz |title=Announcement by James L. Massey of a strengthened key schedule for the cipher SAFER  	
|description=описание усиленного алгоритма расширения ключа для SAFER SK, примеры реализации, исходные коды
|lang=en 
|author = Lars Knudsen
|datepublished = 12 сен 1995
|accessdate = 2009-11-12 
}}

* {{cite web 
|url=http://eprint.iacr.org/2003/033.pdf 
|title=Integral Cryptoanalysis on reduced-round SAFER++ 
|lang=en 
|description=Интегральный криптоанализ SAFER++
|author = Gilles Piret and Jean-Jacques Quisquater
|accessdate = 2009-11-12 
}}

* {{cite web
|url=http://csrc.nist.gov/archive/aes/round1/conf2/papers/massey.pdf 
|title=On the Optimality of SAFER+ Diffusion. 
|lang=en 
|description=Анализ оптимальности диффузионной части алгоритма ''SAFER+''
|author = James L. Massey
|publisher = Cylink Corporation, Sunnyvale, CA, USA 
|accessdate = 2009-11-12
}}

* {{cite web
|url=http://www.nada.kth.se/utbildning/grukth/exjobb/rapportlistor/2003/rapporter03/dellkrantz_gustaf_03110.pdf 
|title=Cryptanalysis of Symmetric Block Ciphers — Breaking Reduced KHAZAD and SAFER++
|lang=en 
|description=криптоанализ урезанной версии ''SAFER++''
|author = Gustaf Dellkrantz
|accessdate = 2009-11-12
}}

* {{статья
|автор        = Gurgen Khachatrian, Melsik Kuregian, Karen Ispiryan, James Massey
|заглавие     = Differential analysis of SAFER++ algorithm
|ссылка       = 
|издание      = Second NESSIE workshop, Egham, UK
|тип          = 
|место        = 
|издательство = 
|год          = Сентябрь 12-13, (2001)
|том          = 
|номер        = 
|страницы     = 
}}

* {{cite web
|url=ftp://ftp.cs.tu-berlin.de/pub/net/security/crypto/misc/safer.V1.2.tar.Z
|title=Block-cipher algorithm SAFER
|lang=en 
|description=Реализация на языке C алгоритмов SAFER-K64, SAFER-K128, SAFER-SK64, SAFER-SK128
|author = Richard De Moliner
}}

* {{cite web
|url = http://www.cryptosoft.de/docs/Saferpls.pdf
|title = Nomination of SAFER+ as Candidate Algorithm for the Advanced Encryption Standatd (AES)
|lang = en
|description = Описание алгоритма SAFER+
|author = James L. Massey, Gurgen H. Khachatrian, Melsik K. Kuregian.
|format = pdf
|datepublished = 1998-06-12
|accessdate = 2009-12-24
}}

* Gurgen Khachatrian, Melsik Kuregian, Karen Ispiryan, James Massey, „Differential analysis of SAFER++ algorithm” – Second NESSIE workshop, Egham, UK, September 12-13, (2001)

* Karen Ispiryan “Some family of coordinate permutation for SAFER++” CSIT September 17-20, 2001 Yerevan, Armenia

== Примечания ==
{{примечания|2}}

{{симметричные криптоалгоритмы}}
{{Хорошая статья|Криптография}}


[[ca:SAFER]]
[[en:SAFER]]
[[fr:SAFER (cryptographie)]]
[[it:SAFER]]
[[pt:SAFER]]

[[Категория:Блочные шифры]]