{{HTTP}}
'''Код состояния HTTP''' ({{lang-en|HTTP status code}}) — часть первой строки ответа сервера при запросах по протоколу [[HTTP]].
Он представляет собой целое число из трёх десятичных цифр. Первая цифра указывает на '''''класс состояния'''''. За [[Код ответа|кодом ответа]] обычно следует отделённая пробелом поясняющая фраза на английском языке, которая разъясняет человеку причину именно такого ответа. Примеры:
* 201 <u>Webpage Created</u>.
* 401 <u>Access allowed only for registered users</u>.
* 507 <u>Insufficient Storage</u>.
Клиент узнаёт по коду ответа о результатах его запроса и определяет какие действия ему предпринимать дальше.
Набор кодов состояния является стандартом, и они описаны в соответствующих документах [[RFC]].
Введение новых кодов должно производиться только после согласования с [[IETF]].
Тем не менее, известно о двух используемых кодах, не упомянутых в RFC: <code>449 Retry With</code>. Также упоминается пояснительная фраза «Reply With»<ref name="MSDN_WEBDAV_2_2_6">[http://msdn.microsoft.com/en-us/library/dd891478(PROT.10).aspx ''2.2.6 449 «Retry With Status Code»'' // Web Distributed Authoring and Versioning (WebDAV) Protocol: Client Extensions.] на сайте MSDN</ref> в спецификации по ''[[WebDAV]]'' в ''[[Microsoft Developer Network]]'', введённый ''[[Microsoft]]'' и <code>509 Bandwidth Limit Exceeded</code>, введённый в ''[[cPanel]]''.

Клиент может не знать все коды состояния, но он обязан отреагировать в соответствии с классом кода. В настоящее время выделено пять классов кодов состояния.

Веб-сервер ''[[Internet Information Services]]'' в своих файлах журналов кроме стандартных кодов состояния использует подкоды, записывая их через точку после основного. При этом в ответах от сервера данный подкод не размещается — он нужен администратору сервера чтобы тот мог более точно определять источники проблем.

== Обзорный список ==
Ниже представлен обзорный список всех описанных в данной статье кодов ответа:
[[Файл:Http-headers-status.gif|thumb|upright=2|Диаграмма принятия веб-сервером решений на основе заголовков]]
[[Файл:Webalizer - Hits By Response.png|thumb|upright=2|Статистика по кодам ответа, сгенерированная анализатором логов ''[[Webalizer]]'']]
[[Файл:AWStats - HTTP Errors.png|thumb|upright=2|Статистика по ошибкам HTTP, сгенерированная лог-анализатором ''[[AWStats]]'']]
* [[#1xx|1xx: Informational]] (информационные):
** [[#100|100 Continue]] («продолжай»)<ref name="3digits">«[http://tools.ietf.org/html/rfc2068#section-6.1.1 6.1.1 Status Code and Reason Phrase]» в <nowiki>RFC 2068</nowiki></ref><ref name="rfc2616">[http://tools.ietf.org/html/rfc2616#section-10.3 RFC 2616]</ref>.
** [[#101|101 Switching Protocols]] («переключение протоколов»)<ref name="3digits"/><ref name="rfc2616"/>.
** [[#102|102 Processing]] («идёт обработка»).
* [[#2xx|2xx: Success]] (успешно):
** [[#200|200 OK]] («хорошо»)<ref name="3digits"/><ref name="rfc2616"/>.
** [[#201|201 Created]] («создано»)<ref name="3digits"/><ref name="rfc2616"/><ref name="webdav_4_2_5">[http://tools.ietf.org/html/draft-ietf-webdav-collection-protocol-04#section-4.2.5 IETF Draft ''WebDAV Advanced Collections Protocol'' — S.4.2.5]</ref>.
** [[#202|202 Accepted]] («принято»)<ref name="3digits"/><ref name="rfc2616"/>.
** [[#203|203 Non-Authoritative Information]] («информация не авторитетна»)<ref name="3digits"/><ref name="rfc2616"/>.
** [[#204|204 No Content]] («нет содержимого»)<ref name="3digits"/><ref name="rfc2616"/>.
** [[#205|205 Reset Content]] («сбросить содержимое»)<ref name="3digits"/><ref name="rfc2616"/>.
** [[#206|206 Partial Content]] («частичное содержимое»)<ref name="3digits"/><ref name="rfc2616"/>.
** [[#207|207 Multi-Status]] («многостатусный»)<ref name="webdav_10">[http://tools.ietf.org/html/draft-ietf-webdav-collection-protocol-04#section-9.13 IETF Draft ''WebDAV Advanced Collections Protocol'' — S.10]</ref>.
** [[#226|226 IM Used]] («использовано IM»).
* [[#3xx|3xx: Redirection]] (перенаправление):
** [[#300|300 Multiple Choices]] («множество выборов»)<ref name="3digits"/><ref name="rfc2616_10_3"/>.
** [[#301|301 Moved Permanently]] («перемещено навсегда»)<ref name="3digits"/><ref name="rfc2616_10_3"/>.
** [[#302|302 Moved Temporarily]] («перемещено временно»)<ref name="3digits"/><ref name="rfc2616_10_3"/>.
** [[#302|302 Found]] («найдено»)<ref name="rfc2616_10_3"/>.
** [[#303|303 See Other]] (смотреть другое)<ref name="3digits"/><ref name="rfc2616_10_3"/>.
** [[#304|304 Not Modified]] (не изменялось)<ref name="3digits"/><ref name="rfc2616_10_3"/>.
** [[#305|305 Use Proxy]] («использовать прокси»)<ref name="3digits"/><ref name="rfc2616_10_3"/>.
** [[#306|306]] — ''зарезервировано'' (код использовался только в ранних спецификациях)<ref name="rfc2616_10_3"/>.
** [[#307|307 Temporary Redirect]] («временное перенаправление»)<ref name="rfc2616_10_3"/>.
* [[#4xx|4xx: Client Error]] (ошибка клиента):
** [[#400|400 Bad Request]] («плохой, неверный запрос»)<ref name="3digits"/><ref name="rfc2616"/><ref name="webdav_4_2_5"/>.
** [[#401|401 Unauthorized]] («не авторизован»)<ref name="3digits"/><ref name="rfc2616"/>.
** [[#402|402 Payment Required]] («необходима оплата»)<ref name="3digits"/><ref name="rfc2616"/>.
** [[#403|403 Forbidden]] («запрещено»)<ref name="3digits"/><ref name="rfc2616"/>.
** [[#404|404 Not Found]] («не найдено»)<ref name="3digits"/><ref name="rfc2616"/>.
** [[#405|405 Method Not Allowed]] («метод не поддерживается»)<ref name="3digits"/><ref name="rfc2616"/>.
** [[#406|406 Not Acceptable]] («неприемлемо»)<ref name="3digits"/><ref name="rfc2616"/>.
** [[#407|407 Proxy Authentication Required]] («необходима аутентификация прокси»)<ref name="3digits"/><ref name="rfc2616"/>.
** [[#408|408 Request Timeout]] («истекло время ожидания»)<ref name="3digits"/><ref name="rfc2616"/>.
** [[#409|409 Conflict]] («конфликт»)<ref name="3digits"/><ref name="rfc2616"/><ref name="webdav_4_2_5"/>.
** [[#410|410 Gone]] («удалён»)<ref name="3digits"/><ref name="rfc2616"/>.
** [[#411|411 Length Required]] («необходима длина»)<ref name="3digits"/><ref name="rfc2616"/>.
** [[#412|412 Precondition Failed]] («условие ложно»)<ref name="3digits"/><ref name="rfc2616"/><ref name="webdav_4_3_1_1">[http://tools.ietf.org/html/draft-ietf-webdav-collection-protocol-04#section-4.3.1 IETF Draft ''WebDAV Advanced Collections Protocol'' — S.4.3.1.1]</ref>.
** [[#413|413 Request Entity Too Large]] («размер запроса слишком велик»)<ref name="3digits"/><ref name="rfc2616"/>.
** [[#414|414 Request-URI Too Large]] («запрашиваемый [[URI]] слишком длинный»)<ref name="3digits"/><ref name="rfc2616"/>.
** [[#415|415 Unsupported Media Type]] («неподдерживаемый тип данных»)<ref name="3digits"/><ref name="rfc2616"/>.
** [[#416|416 Requested Range Not Satisfiable]] («запрашиваемый диапазон не достижим»)<ref name="rfc2616"/>.
** [[Список кодов состояния HTTP#417|417 Expectation Failed]] («ожидаемое неприемлемо»)<ref name="rfc2616"/>.
** [[#422|422 Unprocessable Entity]] («необрабатываемый экземпляр»).
** [[#423|423 Locked]] («заблокировано»).
** [[#424|424 Failed Dependency]] («невыполненная зависимость»).
** [[#425|425 Unordered Collection]] («неупорядоченный набор»)<ref name="webdav_5_3_2">[http://tools.ietf.org/html/draft-ietf-webdav-collection-protocol-04#section-5.3.2 IETF Draft ''WebDAV Advanced Collections Protocol'' — S.5.3.2]</ref>.
** [[#426|426 Upgrade Required]] («необходимо обновление»).
** [[#428|428 Precondition Required]] («необходимо предусловие»)<ref name="rfc6585">RFC 6585</ref>.
** [[#429|429 Too Many Requests]] («слишком много запросов»)<ref name="rfc6585" />.
** [[#431|431 Request Header Fields Too Large]] («поля заголовка запроса слишком большие»)<ref name="rfc6585" />.
** [[Список кодов состояния HTTP#434|434 Requested host unavailable.]] («Запрашиваемый адрес недоступен»){{нет АИ|6|10|2013}}<!-- Разве этот код используется не только протоколом FTP? -->
** 444 Закрывает соединение без передачи заголовка ответа. Нестандартный код <ref>{{Cite web|url = http://nginx.org/ru/docs/http/ngx_http_rewrite_module.html#return|title = Модуль ngx_http_rewrite_module Директивы|author = |work = |date = |publisher = }}</ref>
** [[#449|449 Retry With]] («повторить с»)<ref name="MSDN_WEBDAV_2_2_6"/>.
** [[#451|451 Unavailable For Legal Reasons]] («недоступно по юридическим причинам»)<ref name="http451">[http://tools.ietf.org/html/draft-tbray-http-legally-restricted-status-02 IETF Draft ''A New HTTP Status Code to Report Legal Obstacles'']</ref>.
** 498 Ошибка Google play.
** 499 Используется Nginx, когда клиент закрывает соединение до получения ответа.
* [[#5xx|5xx: Server Error]] (ошибка сервера):
** [[#500|500 Internal Server Error]] («внутренняя ошибка сервера»)<ref name="3digits"/><ref name="rfc2616"/>.
** [[#501|501 Not Implemented]] («не реализовано»)<ref name="3digits"/><ref name="rfc2616"/>.
** [[#502|502 Bad Gateway]] («плохой, ошибочный шлюз»)<ref name="3digits"/><ref name="rfc2616"/>.
** [[#503|503 Service Unavailable]] («сервис недоступен»)<ref name="3digits"/><ref name="rfc2616"/>.
** [[#504|504 Gateway Timeout]] («шлюз не отвечает»)<ref name="3digits"/><ref name="rfc2616"/>.
** [[#505|505 HTTP Version Not Supported]] («версия HTTP не поддерживается»)<ref name="3digits"/><ref name="rfc2616"/>.
** [[#506|506 Variant Also Negotiates]] («вариант тоже проводит согласование»)<ref name="rfc2295_8_1">[http://tools.ietf.org/html/rfc2295#section-8.1 <nowiki>RFC 2295</nowiki> ''Transparent Content Negotiation in HTTP'' — S.8.1]</ref>
** [[#507|507 Insufficient Storage]] («переполнение хранилища»).
** [[#508|508 Loop Detected]] («обнаружена петля»)<ref name="webdav_7_1">[http://tools.ietf.org/html/draft-ietf-webdav-collection-protocol-04#section-7.1 IETF Draft ''WebDAV Advanced Collections Protocol'' — S.7.1]</ref>
** [[#509|509 Bandwidth Limit Exceeded]] («исчерпана пропускная ширина канала»).
** [[#510|510 Not Extended]] («не расширено»).
** [[#511|511 Network Authentication Required]] («требуется сетевая аутентификация»)<ref name="rfc6585" />.

== Описание кодов ==

=== Информационные ===
{{anchor|1xx}}
В этот класс выделены коды, информирующие о процессе передачи. При работе через протокол версии 1.0 сообщения с такими кодами должны игнорироваться. В версии 1.1 клиент должен быть готов принять этот класс сообщений как обычный ответ, но серверу отправлять что-либо не нужно. Сами сообщения от сервера содержат только стартовую строку ответа и, если требуется, несколько специфичных для ответа полей заголовка. [[Прокси-сервер]]а подобные сообщения должны отправлять дальше от сервера к клиенту.
* {{anchor|100}}100 Continue — сервер удовлетворён начальными сведениями о запросе, клиент может продолжать пересылать заголовки. Появился в HTTP/1.1.
* {{anchor|101}}101 Switching Protocols — сервер предлагает перейти на более подходящий для указанного ресурса протокол; список предлагаемых протоколов сервер обязательно указывает в поле заголовка <code>Update</code>. Если клиента это заинтересует, то он посылает новый запрос с указанием другого протокола. Появился в HTTP/1.1.
* {{anchor|102}}102 Processing — запрос принят, но на его обработку понадобится длительное время. Используется сервером, чтобы клиент не разорвал соединение из-за превышения времени ожидания. Клиент при получении такого ответа должен сбросить таймер и дожидаться следующей команды в обычном режиме. Появился в ''[[WebDAV]]''.

=== Успех ===
{{anchor|2xx}}
Сообщения данного класса информируют о случаях успешного принятия и обработки запроса клиента.
В зависимости от статуса сервер может ещё передать заголовки и тело сообщения.
* {{anchor|200}}200 OK — успешный запрос. Если клиентом были запрошены какие-либо данные, то они находятся в заголовке и/или теле сообщения. Появился в HTTP/1.0.
* {{anchor|201}}201 Created — в результате успешного выполнения запроса был создан новый ресурс. Сервер может указать адреса (их может быть несколько) созданного ресурса в теле ответа, при этом предпочтительный адрес указывается в заголовке <code>Location</code>. Серверу рекомендуется указывать в теле ответа характеристики созданного ресурса и его адреса,  формат тела ответа определяется заголовком <code>Content-Type</code>. При обработке запроса, новый ресурс должен быть создан до отправки ответа клиенту, иначе следует использовать ответ с кодом <code>[[#202|202]]</code>. Появился в HTTP/1.0.
* {{anchor|202}}202 Accepted — запрос был принят на обработку, но она не завершена. Клиенту не обязательно дожидаться окончательной передачи сообщения, так как может быть начат очень долгий процесс. Появился в HTTP/1.0.
* {{anchor|203}}203 Non-Authoritative Information — аналогично ответу <code>[[#200|200]]</code>, но в этом случае передаваемая информация была взята не из первичного источника (резервной копии, другого сервера и т. д.) и поэтому может быть неактуальной. Появился в HTTP/1.1.
* {{anchor|204}}204 No Content — сервер успешно обработал запрос, но в ответе были переданы только заголовки без тела сообщения. Клиент не должен обновлять содержимое документа, но может применить к нему полученные [[метаданные]]. Появился в HTTP/1.0.
* {{anchor|205}} 205 Reset Content — сервер обязывает клиента сбросить введённые пользователем данные. Тела сообщения сервер при этом не передаёт и документ обновлять не обязательно. Появился в HTTP/1.1.
* {{anchor|206}} 206 Partial Content — сервер удачно выполнил [[HTTP#Частичные GET|частичный GET-запрос]], возвратив только часть сообщения. В заголовке <code>Content-Range</code> сервер указывает [[Заголовки HTTP#Байтовые диапазоны|байтовые диапазоны]] содержимого. Особое внимание при работе с подобными ответами следует уделить кэшированию. Появился в HTTP/1.1. {{Подробнее|HTTP#Докачка и фрагментарное скачивание}}
* {{anchor|207}} 207 Multi-Status — сервер передаёт результаты выполнения сразу нескольких независимых операций. Они помещаются в само тело сообщения в виде [[XML]]-документа с объектом <code>multistatus</code>. Не рекомендуется размещать в этом объекте статусы из серии <code>[[#1xx|1xx]]</code> из-за бессмысленности и избыточности. Появился в ''WebDAV''.
* {{anchor|226}} 226 IM Used — заголовок <code>A-IM</code> от клиента был успешно принят и сервер возвращает содержимое с учётом указанных параметров. Введено в RFC 3229 для дополнения протокола HTTP поддержкой [[Дельта-кодирование|дельта-кодирования]].

=== Перенаправление ===
{{anchor|3xx}}
Коды этого класса сообщают клиенту, что для успешного выполнения операции необходимо сделать другой запрос, как правило, по другому [[URI]]. Из данного класса пять кодов <code>[[#301|301]]</code>, <code>[[#302|302]]</code>, <code>[[#303|303]]</code>, <code>[[#305|305]]</code> и <code>[[#307|307]]</code> относятся непосредственно к перенаправлениям. Адрес, по которому клиенту следует произвести запрос, сервер указывает в заголовке <code>Location</code>. При этом допускается использование фрагментов в целевом URI.

По последним стандартам клиент может производить перенаправление без запроса пользователя только если второй ресурс будет запрашиваться методом <code>[[HTTP#GET|GET]]</code> или <code>[[HTTP#HEAD|HEAD]]</code><ref name="rfc2616_10_3">[http://tools.ietf.org/html/rfc2616#section-10.3 RFC 2616 «10.3 Redirection 3xx» (стр. 61)]</ref>. В предыдущих спецификациях говорилось, что для избежания круговых переходов пользователя следует спрашивать после 5-го подряд перенаправления<ref>[http://tools.ietf.org/html/rfc2068#section-10.3 RFC 2068 «10.3 Redirection 3xx» (стр. 56)].</ref>. При всех перенаправлениях, если метод запроса был не <code>HEAD</code>, то в тело ответа следует включить короткое гипертекстовое сообщение с целевым адресом, чтобы в случае ошибки пользователь смог сам произвести переход.

Разработчики HTTP отмечают, что многие клиенты при перенаправлениях с кодами <code>301</code> и <code>302</code> ошибочно применяют метод <code>GET</code> ко второму ресурсу, несмотря на то, что к первому запрос был с иным методом (чаще всего PUT)<ref name="redirects-methods">RFC 2616, раздел «10.3.3 302 Found», [http://tools.ietf.org/html/rfc2616#page-63 страница 63].</ref>. Чтобы избежать недоразумений, в версии HTTP/1.1 были введены коды <code>303</code> и <code>307</code> и их рекомендовано использовать вместо <code>302</code>. Изменять метод нужно только если сервер ответил <code>303</code>. В остальных случаях следующий запрос производить с исходным методом.

Поведение клиентов при различных перенаправлениях описано в таблице:
{|class="standard"
! Статус ответа
! Кэширование
! Если метод не GET или HEAD
|-
| <code>[[#301|301 Moved Permanently]]</code>
| Можно как обычно.
|rowspan="3"| Спросить у пользователя подтверждения и запросить другой ресурс исходным методом.
|-
| <tt>[[#307|307 Temporary Redirect]]</tt>
|rowspan="2"| Можно только если указан заголовок <code>Cache-Control</code> или <code>Expires</code>.
|-
| <tt>[[#302|302 Found]]</tt> (HTTP/1.1)<br />{{nowrap|<tt>[[#302|302 Moved Temporarily]]</tt> (HTTP/1.0)}}
|-
| <tt>[[#303|303 See Other]]</tt>
| Нельзя.
| Перейти автоматически, но уже методом <code>GET</code>.
|}
* {{anchor|300}} 300 Multiple Choices — по указанному URI существует несколько вариантов предоставления ресурса по типу [[MIME]], по языку или по другим характеристикам. Сервер передаёт с сообщением список альтернатив, давая возможность сделать выбор клиенту автоматически или пользователю. Появился в HTTP/1.0.<!--
: ''См. также [[HTTP#Управляемое клиентом|управляемое клиентом согласование содержимого]] в статье по HTTP.''-->
* {{anchor|301}} [[Код состояния 301 протокола HTTP|301 Moved Permanently]] — запрошенный документ был окончательно перенесен на новый URI, указанный в поле <code>Location</code> заголовка. Некоторые клиенты некорректно ведут себя при обработке данного кода. Появился в HTTP/1.0.
* {{anchor|302}} 302 Found, 302 Moved Temporarily — запрошенный документ временно доступен по другому URI, указанному в заголовке в поле <code>Location</code>. Этот код может быть использован, например, при [[HTTP#Управляемое сервером|управляемом сервером согласовании содержимого]]. Некоторые клиенты некорректно ведут себя при обработке данного кода. Введено в HTTP/1.0.
* {{anchor|303}} 303 See Other — документ по запрошенному URI нужно запросить по адресу в поле <code>Location</code> заголовка с использованием метода <code>GET</code> несмотря даже на то, что первый запрашивался иным методом. Этот код был введён вместе с <code>307</code>-ым для избежания неоднозначности, чтобы сервер был уверен, что следующий ресурс будет запрошен методом <code>GET</code>. Например, на веб-странице есть поле ввода текста для быстрого перехода и поиска. После ввода данных браузер делает запрос методом <code>POST</code>, включая в тело сообщения введённый текст. Если обнаружен документ с введённым названием, то сервер отвечает кодом <code>303</code>, указав в заголовке <code>Location</code> его постоянный адрес. Тогда браузер гарантировано его запросит методом <code>GET</code> для получения содержимого. В противном случае сервер просто вернёт клиенту страницу с результатами поиска. Введено в HTTP/1.1.
* {{anchor|304}} 304 Not Modified — сервер возвращает такой код, если клиент запросил документ методом <code>GET</code>, использовал заголовок <code>If-Modified-Since</code> или <code>If-None-Match</code> и документ не изменился с указанного момента. При этом сообщение сервера не должно содержать тела. Появился в HTTP/1.0.
* {{anchor|305}} 305 Use Proxy — запрос к запрашиваемому ресурсу должен осуществляться через [[прокси-сервер]], URI которого указан в поле <code>Location</code> заголовка. Данный код ответа могут использовать только исходные HTTP-сервера (не прокси). Введено в HTTP/1.1.
* {{anchor|306}} 306 (зарезервировано) — использовавшийся раньше код ответа, в настоящий момент зарезервирован. Упомянут в RFC 2616 (обновление HTTP/1.1).
* {{anchor|307}} 307 Temporary Redirect — запрашиваемый ресурс на короткое время доступен по другому URI, указанный в поле <code>Location</code> заголовка. Этот код был введён вместе с 303 вместо 302-го для избежания неоднозначности. Введено в RFC 2616 (обновление HTTP/1.1).

=== Ошибка клиента ===
{{anchor|4xx}}
Класс кодов <code>4xx</code> предназначен для указания ошибок со стороны клиента. При использовании всех методов, кроме <code>HEAD</code>, сервер должен вернуть в теле сообщения гипертекстовое пояснение для пользователя.
* {{anchor|400}} 400 Bad Request — сервер обнаружил в запросе клиента синтаксическую ошибку. Появился в HTTP/1.0.
* {{anchor|401}} 401 Unauthorized — для доступа к запрашиваемому ресурсу требуется аутентификация. В заголовке ответ должен содержать поле <code>WWW-Authenticate</code> с перечнем условий аутентификации. Клиент может повторить запрос, включив в заголовок сообщения поле <code>Authorization</code> с требуемыми для аутентификации данными.
* {{anchor|402}} 402 Payment Required — предполагается использовать в будущем. В настоящий момент не используется. Этот код предусмотрен для платных пользовательских сервисов, а не для [[хостинг]]овых компаний. Имеется в виду, что эта ошибка не будет выдана хостинговым провайдером в случае просроченной оплаты его услуг. Зарезервирован, начиная с HTTP/1.1.
[[Файл:Firefox screenshot-HTTP error 403.png|thumb|300px|Сервер вернул ошибку 403 при попытке просмотра директории «cgi-bin», доступ к которой был запрещён.]]
* {{anchor|403}} 403 Forbidden<ref>[http://www.pageranker.ru/articles/troubleshooting/167--403-forbidden.html Что означает 403 Forbidden?].</ref> — сервер понял запрос, но он отказывается его выполнять из-за ограничений в доступе для клиента к указанному ресурсу. Если для доступа к ресурсу требуется аутентификация средствами HTTP, то сервер вернёт ответ <code>[[#401|401]]</code> или <code>[[#407|407]]</code> при использовании прокси. В противном случае ограничения были заданы администратором сервера или разработчиком веб-приложения и могут быть любыми в зависимости от возможностей используемого [[Программное обеспечение|программного обеспечения]]. В любом случае клиенту следует сообщить причины отказа в обработке запроса. Наиболее вероятными причинами ограничения может послужить попытка доступа к системным ресурсам веб-сервера (например, файлам <code>[[.htaccess]]</code> или <code>[[.htpasswd]]</code>) или к файлам, доступ к которым был закрыт с помощью конфигурационных файлов, требование аутентификации не средствами HTTP, например, для доступа к [[Система управления содержимым|системе управления содержимым]] или разделу для зарегистрированных пользователей либо сервер не удовлетворён [[IP-адрес]]ом клиента, например, при блокировках. Появился в HTTP/1.0.
* {{anchor|404}} [[Ошибка 404|404 Not Found]]<ref>[http://www.pageranker.ru/articles/troubleshooting/168--404-not-found.html Причины появления ошибки 404 Not Found].</ref> — самая распространенная ошибка при пользовании Интернетом, основная причина — ошибка в написании адреса Web-страницы. Сервер понял запрос, но не нашёл соответствующего ресурса по указанному URI. Если серверу известно, что по этому адресу был документ, то ему желательно использовать код [[#410|410]]. Ответ <code>404</code> может использоваться вместо <code>[[#403|403]]</code>, если требуется тщательно скрыть от посторонних глаз определённые ресурсы. Появился в HTTP/1.0.
* {{anchor|405}} 405 Method Not Allowed — указанный клиентом метод нельзя применить к текущему ресурсу. В ответе сервер должен указать доступные методы в заголовке <code>Allow</code>, разделив их запятой. Эту ошибку сервер должен возвращать, если метод ему известен, но он не применим именно к указанному в запросе ресурсу, если же указанный метод не применим на всём сервере, то клиенту нужно вернуть код [[#501|<code>501</code>]] (Not Implemented). Появился в HTTP/1.1.
* {{anchor|406}} 406 Not Acceptable — запрошенный URI не может удовлетворить переданным в заголовке характеристикам. Если метод был не <code>HEAD</code>, то сервер должен вернуть список допустимых характеристик для данного ресурса. Появился в HTTP/1.1.<!--
: ''См. также [[HTTP#Управляемое клиентом|управляемое клиентом согласование содержимого]] в статье по HTTP.''-->
* {{anchor|407}} 407 Proxy Authentication Required — ответ аналогичен коду <code>[[#401|401]]</code> за исключением того, что аутентификация производится для прокси-сервера. Механизм аналогичен идентификации на исходном сервере. Появился в HTTP/1.1.
* {{anchor|408}} 408 Request Timeout — время ожидания сервером передачи от клиента истекло. Клиент может повторить аналогичный предыдущему запрос в любое время. Например, такая ситуация может возникнуть при загрузке на сервер объёмного файла методом [[HTTP#POST|<code>POST</code>]] или [[HTTP#PUT|<code>PUT</code>]]. В какой-то момент передачи источник данных перестал отвечать, например, из-за повреждения [[компакт-диск]]а или потери связи с другим компьютером в локальной сети. Пока клиент ничего не передаёт, ожидая от него ответа, соединение с сервером держится. Через некоторое время сервер может закрыть соединение со своей стороны, чтобы дать возможность другим клиентам сделать запрос. Этот ответ не возвращается, когда клиент принудительно остановил передачу по команде пользователя или соединение прервалось по каким-то иным причинам, так как ответ уже послать невозможно. Появился в HTTP/1.1.
* {{anchor|409}} 409 Conflict — запрос не может быть выполнен из-за конфликтного обращения к ресурсу. Такое возможно, например, когда два клиента пытаются изменить ресурс с помощью метода <code>PUT</code>.Появился в HTTP/1.1.
* {{anchor|410}} 410 Gone — такой ответ сервер посылает, если ресурс раньше был по указанному URL, но был удалён и теперь недоступен. Серверу в этом случае неизвестно и местоположение альтернативного документа, например, копии). Если у сервера есть подозрение, что документ в ближайшее время может быть восстановлен, то лучше клиенту передать код <code>[[#404|404]]</code>. Появился в HTTP/1.1.
* {{anchor|411}} 411 Length Required — для указанного ресурса клиент должен указать <code>Content-Length</code> в заголовке запроса. Без указания этого поля не стоит делать повторную попытку запроса к серверу по данному URI. Такой ответ естественен для запросов типа <code>POST</code> и <code>PUT</code>. Например, если по указанному URI производится загрузка файлов, а на сервере стоит ограничение на их объём. Тогда разумней будет проверить в самом начале заголовок <code>Content-Length</code> и сразу отказать в загрузке, чем провоцировать бессмысленную нагрузку, разрывая соединение, когда клиент действительно пришлёт слишком объёмное сообщение. Появился в HTTP/1.1.
* {{anchor|412}} 412 Precondition Failed — возвращается, если ни одно из условных полей заголовка (If-Match и др., см. RFC 7232) запроса не было выполнено. Появился в HTTP/1.1.
* {{anchor|413}} 413 Request Entity Too Large — возвращается в случае, если сервер отказывается обработать запрос по причине слишком большого размера тела запроса. Сервер может закрыть соединение, чтобы прекратить дальнейшую передачу запроса. Если проблема временная, то рекомендуется в ответ сервера включить заголовок <code>Retry-After</code> с указанием времени, по истечении которого можно повторить аналогичный запрос. Появился в HTTP/1.1.
* {{anchor|414}} 414 Request-URL Too Long — сервер не может обработать запрос из-за слишком длинного указанного URL. Такую ошибку можно спровоцировать, например, когда клиент пытается передать длинные параметры через метод <code>GET</code>, а не <code>POST</code>. Появился в HTTP/1.1.
* {{anchor|415}} 415 Unsupported Media Type — по каким-то причинам сервер отказывается работать с указанным типом данных при данном методе. Появился в HTTP/1.1.
* {{anchor|416}} 416 Requested Range Not Satisfiable — в поле <code>Range</code> заголовка запроса был указан диапазон за пределами ресурса и отсутствует поле <code>If-Range</code>. Если клиент передал байтовый диапазон, то сервер может вернуть реальный размер в поле <code>Content-Range</code> заголовка. Данный ответ не следует использовать при передаче типа <code>multipart/byteranges</code>{{нет АИ|22|03|2012}}. Введено в RFC 2616 (обновление HTTP/1.1).
* {{anchor|417}} 417 Expectation Failed — по каким-то причинам сервер не может удовлетворить значению поля <code>Expect</code> заголовка запроса. Введено в RFC 2616 (обновление HTTP/1.1).
* {{anchor|418}} 418 I'm a teapot — Этот код был введен в 1998 году как одна из традиционных первоапрельских шуток IETF в RFC 2324, [[HTCPCP|Hyper Text Coffee Pot Control Protocol]]. Не ожидается, что данный код будет поддерживаться реальными серверами.<ref name=":0">[[rfc:2324|RFC 2324 - Hyper Text Coffee Pot Control Protocol (HTCPCP/1.0)<!-- Заголовок добавлен ботом -->]]</ref>
* {{anchor|422}} 422 Unprocessable Entity — сервер успешно принял запрос, может работать с указанным видом данных, в теле запроса [[XML]]-документ имеет верный синтаксис, но имеется какая-то логическая ошибка, из-за которой невозможно произвести операцию над ресурсом. Введено в ''WebDAV''.
* {{anchor|423}} 423 Locked — целевой ресурс из запроса заблокирован от применения к нему указанного метода. Введено в [[WebDAV]].
* {{anchor|424}} 424 Failed Dependency — реализация текущего запроса может зависеть от успешности выполнения другой операции. Если она не выполнена и из-за этого нельзя выполнить текущий запрос, то сервер вернёт этот код. Введено в ''WebDAV''.
* {{anchor|425}} 425 Unordered Collection — используется в расширении ''WebDAV Advanced Collections Protocol''<ref name=autogenerated1>[http://tools.ietf.org/html/draft-ietf-webdav-collection-protocol-04#section-5.3.2 ''WebDAV Advanced Collections Protocol'' S.5.3.2]</ref>. Посылается, если клиент указал номер элемента в неупорядоченном списке, или запросил несколько элементов в порядке, отличающемся от серверного.
* {{anchor|426}} 426 Upgrade Required — сервер указывает клиенту на необходимость обновить протокол. Заголовок ответа должен содержать правильно сформированные поля <code>Upgrade</code> и <code>Connection</code>. Введено в RFC 2817 для возможности перехода к [[TLS]] посредством HTTP.
* {{anchor|428}} 428 Precondition Required — сервер указывает клиенту на необходимость использования в запросе заголовков условий, наподобие <code>If-Match</code>. Введено в черновике стандарта RFC 6585.
* {{anchor|429}} 429 Too Many Requests — клиент попытался отправить слишком много запросов за короткое время, что может указывать, например, на попытку DoS-атаки. Может сопровождаться заголовком Retry-After, указывающим, через какое время можно повторить запрос. Введено в черновике стандарта RFC 6585.
* {{anchor|431}} 431 Request Header Fields Too Large — Превышена допустимая длина заголовков. Сервер не обязан отвечать этим кодом, вместо этого он может просто сбросить соединение. Введено в черновике стандарта RFC 6585.
* 434 Requested host unavailable - Запрашиваемый адрес недоступен{{нет АИ|6|10|2013}}<!-- Разве этот код используется не только протоколом FTP? -->.
* {{anchor|449}} 449 Retry With — возвращается сервером, если для обработки запроса от клиента поступило недостаточно информации. При этом в заголовок ответа помещается поле <code>Ms-Echo-Request</code>. Введено корпорацией ''Microsoft'' для ''WebDAV''. В настоящий момент как минимум используется программой ''[[Microsoft Money]]''.
* {{anchor|451}} 451 Unavailable For Legal Reasons — доступ к ресурсу закрыт по юридическим причинам, например, по требованию органов государственной власти или по требованию правообладателя в случае нарушения авторских прав. Введено в черновике IETF за авторством [[Google]]<ref name="http451" />, при этом код ошибки является отсылкой к роману Рэя Брэдбери «[[451 градус по Фаренгейту]]». Был добавлен в стандарт 21 декабря 2015.<ref>{{Cite web|accessdate = 2015-12-22|title = draft-ietf-httpbis-legally-restricted-status-04|url = https://datatracker.ietf.org/doc/draft-ietf-httpbis-legally-restricted-status/?include_text=1|publisher = datatracker.ietf.org}}</ref>
<references />

=== Ошибка сервера ===
{{anchor|5xx}}
Коды <code>5xx</code> выделены под случаи неудачного выполнения операции по вине сервера. Для всех ситуаций, кроме использования метода <code>HEAD</code>, сервер должен включать в тело сообщения объяснение, которое клиент отобразит пользователю.
* {{anchor|500}} 500 Internal Server Error<ref>[http://www.pageranker.ru/articles/troubleshooting/941-chto-oznachaet-oshibka-500-internal-server-error.html Описание ошибки 500 Internal Server Error].</ref> — любая внутренняя ошибка сервера, которая не входит в рамки остальных ошибок класса. Появился в HTTP/1.0.
* {{anchor|501}} 501 Not Implemented — сервер не поддерживает возможностей, необходимых для обработки запроса. Типичный ответ для случаев, когда сервер не понимает указанный в запросе метод. Если же метод серверу известен, но он не применим к данному ресурсу, то нужно вернуть ответ [[#405|<code>405</code>]]. Появился в HTTP/1.0.
* {{anchor|502}} 502 Bad Gateway — сервер, выступая в роли шлюза или прокси-сервера, получил недействительное ответное сообщение от вышестоящего сервера. Появился в HTTP/1.0.
* {{anchor|503}} 503 Service Unavailable — сервер временно не имеет возможности обрабатывать запросы по техническим причинам (обслуживание, перегрузка и прочее). В поле <code>Retry-After</code> заголовка сервер может указать время, через которое клиенту рекомендуется повторить запрос. Хотя во время перегрузки очевидным кажется сразу разрывать соединение, эффективней может оказаться установка большого значения поля <code>Retry-After</code> для уменьшения частоты избыточных запросов. Появился в HTTP/1.0.
* {{anchor|504}} 504 Gateway Timeout — сервер в роли шлюза или прокси-сервера не дождался ответа от вышестоящего сервера для завершения текущего запроса. Появился в HTTP/1.1.
* {{anchor|505}} 505 HTTP Version Not Supported — сервер не поддерживает или отказывается поддерживать указанную в запросе версию протокола HTTP. Появился в HTTP/1.1.
* {{anchor|506}} 506 Variant Also Negotiates — в результате ошибочной конфигурации выбранный вариант указывает сам на себя, из-за чего процесс связывания прерывается. Экспериментальное. Введено в RFC 2295 для дополнения протокола HTTP технологией ''[[Transparent Content Negotiation]]''.
* {{anchor|507}} 507 Insufficient Storage — не хватает места для выполнения текущего запроса. Проблема может быть временной. Введено в ''WebDAV''.
* {{anchor|509}} 509 Bandwidth Limit Exceeded — используется при превышении веб-площадкой отведённого ей ограничения на потребление трафика. В данном случае владельцу площадки следует обратиться к своему хостинг-провайдеру. В настоящий момент данный код не описан ни в одном [[RFC]] и используется только модулем «bw/limited», входящим в панель управления хостингом ''[[cPanel]]'', где и был введён.
* {{anchor|510}} 510 Not Extended — на сервере отсутствует расширение, которое желает использовать клиент. Сервер может дополнительно передать информацию о доступных ему расширениях. Введено в RFC 2774 для дополнения протокола HTTP поддержкой расширений.
* {{anchor|511}} 511 Network Authentication Required — этот ответ посылается не сервером, которому был предназначен запрос, а сервером-посредником — например, сервером провайдера — в случае, если клиент должен сначала авторизоваться в сети, например, ввести пароль для платной точки доступа к Интернету. Предполагается, что в теле ответа будет возвращена Web-форма авторизации или перенаправление на неё. Введено в черновике стандарта RFC 6585.

== См. также ==
* [[Список заголовков HTTP]]
* [[Код ответа]]

== Примечания ==
{{примечания}}

== Ссылки ==
{{навигация|Тема=Файлы о коде 404}}

Основные документы по протоколу HTTP (по убыванию даты публикации):
* {{cite web
 | datepublished = 17 октября 2007
 | url           = http://www.iana.org/assignments/http-status-codes
 | title         = Hypertext Transfer Protocol (HTTP) Status Code Registry
 | publisher     = [[IANA]]
 | accessdate    = 2009-07-30
 | lang          = en
 | description   = реестр кодов состояния HTTP
 | archiveurl    = http://www.webcitation.org/65WVlNQ6v
 | archivedate   = 2012-02-17}}
* <nowiki>RFC 2616</nowiki> Draft standard «[http://tools.ietf.org/html/rfc2068 Hypertext Transfer Protocol — HTTP/1.1]»{{ref-en}} (русск. ''«Протокол передачи гипертекста — HTTP/1.1»''); [[IETF]], июнь 1999; ''{{не переведено 3|Roy Fielding|Fielding Roy|en}} ({{не переведено 3|University of California, Irvine|UC Irvine|en}}), {{не переведено 3|Jim Gettys|Gettys Jim|en}} ([[Compaq]]/[[Консорциум Всемирной паутины|W3C]]), Mogul J. ([[Compaq]]), {{не переведено 3|Henrik Frystyk Nielsen|Frystyk Henrik|en}} ([[Массачусетский технологический институт|MIT]]/[[Консорциум Всемирной паутины|W3C]]), Masinter L. ([[Xerox]]), Leach P. ([[Microsoft]]), [[Бернерс-Ли, Тим|Berners-Lee Tim]] ([[Консорциум Всемирной паутины|W3C]]/[[Массачусетский технологический институт|MIT]]) '' — обновление протокола HTTP версии 1.1.
* <nowiki>RFC 2068</nowiki> Proposed standard «[http://tools.ietf.org/html/rfc2068 Hypertext Transfer Protocol — HTTP/1.1]»{{ref-en}} (русск. ''«Протокол передачи гипертекста — HTTP/1.1»''); [[IETF]], январь 1997; ''{{не переведено 3|Roy Fielding|Fielding Roy|en}} ({{не переведено 3|University of California, Irvine|UC Irvine|en}}), {{не переведено 3|Jim Gettys|Gettys Jim|en}} ([[Digital Equipment Corporation|DEC]]), Mogul J. ([[Digital Equipment Corporation|DEC]]), {{не переведено 3|Henrik Frystyk Nielsen|Frystyk Henrik|en}} ([[Массачусетский технологический институт|MIT]]/LCS), [[Бернерс-Ли, Тим|Berners-Lee Tim]] ([[Массачусетский технологический институт|MIT]]/LCS)'' — ранняя спецификация по HTTP версии 1.1.
* <nowiki>RFC 1945</nowiki> Informational «[http://tools.ietf.org/html/rfc1945 Hypertext Transfer Protocol — HTTP/1.0]»{{ref-en}} (русск. ''«Протокол передачи гипертекста — HTTP/1.0»''); [[IETF]], май 1996; ''[[Бернерс-Ли, Тим|Berners-Lee Tim]] ([[Массачусетский технологический институт|MIT]]/LCS), {{не переведено 3|Roy Fielding|Fielding Roy|en}} ({{не переведено 3|University of California, Irvine|UC Irvine|en}}), {{не переведено 3|Henrik Frystyk Nielsen|Frystyk Henrik|en}} ([[Массачусетский технологический институт|MIT]]/LCS)'' — самая первая спецификация по протоколу HTTP. Так же включает в себя описание HTTP/0.9.

Документы по расширениям и обновлениям протокола HTTP (по убыванию даты публикации):
* <nowiki>RFC 4918</nowiki> Proposed Standard «[http://tools.ietf.org/html/rfc4918 HTTP Extensions for Web Distributed Authoring and Versioning (WebDAV)]»{{ref-en}} (русск. ''«Расширения HTTP для распределённой авторской работы и управления версиями через веб (WEBDAV)»''); [[IETF]], июнь 2007; ''Dusseault Ed. L. ({{не переведено 3|CommerceNet|CommerceNet|en}})'' — поздняя спецификация по протоколу WebDAV, заместившая RFC 2518.
* <nowiki>RFC 3229</nowiki> Proposed standard «[http://tools.ietf.org/html/rfc3229 Delta encoding in HTTP]»{{ref-en}} (русск. ''«Дельта-кодирование в HTTP»''); [[IETF]], январь 2002; ''Mogul J. ([[Compaq]] WRL), Krishnamurthy B. ([[AT&T]]), Douglis F. ([[AT&T]]), Feldmann A. ({{не переведено 3|Saarland University|Univ. of Saarbrücken|en}}), Goland Y. (Marimba), van Hoff A. (Marimba), Hellerstein D. (ERS/USDA)''.
* <nowiki>RFC 2817</nowiki> Proposed Standard «[http://tools.ietf.org/html/rfc2817 Upgrading to TLS Within HTTP/1.1]»{{ref-en}} (русск. ''«Обновление к TLS совместно с HTTP/1.1»''); [[IETF]], май 2000; ''{{не переведено 3|Rohit Khare|Khare Rohit|en}} (4K Associates/{{не переведено 3|University of California, Irvine|UC Irvine|en}}), Lawrence S. (Agranat Systems, Inc.)'' — обновление к RFC 2616 для описания работы HTTP и [[TLS]].
* <nowiki>RFC 2774</nowiki> Experimental «[http://tools.ietf.org/html/rfc2774 An HTTP Extension Framework]»{{ref-en}} (русск. ''«Каркас расширений HTTP»''); [[IETF]], февраль 2000; ''Nielsen H. ([[Microsoft]]), Leach P. ([[Microsoft]]), Lawrence S. (Agranat Systems)''.
* Internet Draft «[http://tools.ietf.org/html/draft-ietf-webdav-collection-protocol-04 WebDAV Advanced Collections Protocol]» (русск. ''«Протокол продвинутых коллекций WebDAV»''); [[IETF]], 18 июня 1999; ''Slein J. ([[Xerox]]), Whitehead Jr. E. J. ({{не переведено 3|University of California, Irvine|UC Irvine|en}}), Davis J. (CourseNet), Clemm G. ([[Rational Software|Rational]]), Fay C. ({{не переведено 3|FileNet|FileNet|en}}), Crawford J. ([[IBM]]), Chihaya T. (DataChannel) '' — управление коллекциями в WebDAV; просрочился 18 декабря 1999 года.
* <nowiki>RFC 2518</nowiki> Proposed Standard «[http://tools.ietf.org/html/rfc2518 HTTP Extensions for Distributed Authoring — WEBDAV]»{{ref-en}} (русск. ''«Расширения HTTP для распределённой авторской работы — WEBDAV»''); [[IETF]], февраль 1999; ''Goland Y. ([[Microsoft]]), Whitehead E. ({{не переведено 3|University of California, Irvine|UC Irvine|en}}), Faizi A. ([[Netscape Communications|Netscape]]), Carter S. ([[Novell]]), Jensen D. ([[Novell]])'' — первая спецификация по протоколу WebDAV (замещена RFC 4918).
* <nowiki>RFC 2295</nowiki> Experimental «[http://tools.ietf.org/html/rfc2295 Transparent Content Negotiation in HTTP]»{{ref-en}} (русск. ''«Прозрачное согласование содержимого в HTTP»''); [[IETF]], март 1998; ''Holtman K. (TUE), Mutz A. ([[Hewlett-Packard]])''.

Дополнительные материалы:
* {{cite web
 | datepublished = 14 марта 2007
 | url           = http://msdn.microsoft.com/en-us/library/cc250046%28PROT.13%29.aspx
 | title         = Web Distributed Authoring and Versioning (WebDAV) Protocol: Client Extensions
 | publisher     = [[Microsoft]]
 | accessdate    = 2009-07-30
 | lang          = en
 | description   = описание поддержки клиентских расширений в протоколе WebDAV
 | archiveurl    = http://www.webcitation.org/65WVloxS1
 | archivedate   = 2012-02-17}}
* <nowiki>RFC 2324</nowiki> Informational «[http://tools.ietf.org/html/rfc2774 Hyper Text Coffee Pot Control Protocol (HTCPCP/1.0)]»{{ref-en}} (русск. ''«Гипертекстовый протокол управления кофеваркой (HTCPCP/1.0)»''); [[IETF]], 1 апреля 1998; ''Masinter L.''.
* KB 318380 {{cite web
 | datepublished = 4 декабря 2007
 | url           = http://support.microsoft.com/kb/318380/
 | title         = Коды состояния служб IIS
 | publisher     = [[Microsoft]]
 | accessdate    = 2010-01-16
 | lang          = ru
 | description   = список расширенных кодов состояния для протоколов HTTP и FTP
 | archiveurl    = http://www.webcitation.org/65WVmPE8h
 | archivedate   = 2012-02-17}}
* {{cite web
 | author        = Koford Adam.
 | datepublished = 23 ноября 2006
 | url           = http://www.flickr.com/photos/apelad/sets/72157594388426362/detail/
 | title         = HTTP errors
 | publisher     = [[Flickr]]
 | accessdate    = 2010-01-16
 | lang          = en
 | description   = иллюстрации кодов ошибок с <tt>400</tt> по <tt>417</tt> для облегчения запоминания посредством [[Мнемотехника|мнемотехники]]
 | archiveurl    = http://www.webcitation.org/65WVnkGcv
 | archivedate   = 2012-02-17}}


{{Веб и веб-сайты}}
{{Избранный список и портал|тип=список}}

[[Категория:Протокол HTTP]]
[[Категория:Списки кодов|HTTP]]