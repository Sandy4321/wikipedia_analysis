beta2
delta
beta1
0.9 * delta + 0.1 * beta1
(0.9 * delta) + (0.1 * beta1)
0.9 * delta
0.1 * beta1
curve(x*x)
curve(x*x, xlim = c(-10,10))
curve(x*x, xlim = c(-10,10), col = "red")
curve(x*x, xlim = c(0,1), col = "red")
curve(x*x, xlim = c(0,1), col = "blue")
curve(x*x, xlim = c(0,1), col = "blue", lty = 1)
curve(x*x, xlim = c(0,1), col = "blue", lty = 2)
curve(x*x, xlim = c(0,1), col = "blue", lty = 3)
curve(x*x, xlim = c(0,1), col = "blue", lty = 4)
curve(x*x, xlim = c(0,1), col = "blue", lty = 5)
curve(x*x, xlim = c(0,1), col = "blue", lty = 16)
curve(x*x, xlim = c(0,1), col = "blue", pch = "o")
curve(x*x, xlim = c(0,1), col = "blue", pch = "x")
curve(x*x, xlim = c(0,1), col = "blue", pch = 1)
curve(x*x, xlim = c(0,1), col = "blue", pch = 2)
curve(x*x, xlim = c(0,1), col = "blue", pch = 8)
curve(x, xlim = c(0,1), lty = 1, xlab = "send_proportion", ylab = "current_trust")
curve(x * 1, xlim = c(0,1), lty = 1, xlab = "send_proportion", ylab = "current_trust")
curve (log (x * (exp(1) - 1) + 1), lty = 2)
curve(x * 1, xlim = c(0,1), lty = 1, xlab = "send_proportion", ylab = "current_trust")
curve (log (x * (exp(1) - 1) + 1), lty = 2, add = TRUE)
curve ((exp(x) - 1)/(exp(1) - 1), add = TRUE)
curve ((exp(x) - 1)/(exp(1) - 1), add = TRUE, lty = 3)
curve (log(x * (exp(1) - 1) + 1), xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value")
curve (x * 1, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value")
legend(2000,9.5, # places a legend at the appropriate place c(“Health”,”Defense”), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),col=c(“blue”,”red”)) # gives the legend lines the correct color and width
legend (c("A","B"), lty = c(1,1), col = c("blue","red"))
legend (legend = c("A","B"), lty = c(1,1), col = c("blue","red"))
legend (1,1,legend = c("A","B"), lty = c(1,1), col = c("blue","red"))
curve (x * 1, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 4)
curve (x * 1, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 10)
curve (x * 1, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 1)
curve (x * 1, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 1, lty = 1)
curve (x * x, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 2, lty = 1, add = TRUE)
curve (x * x * x, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 3, lty = 1, add = TRUE)
curve (sqrt(x), xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 4, lty = 1, add = TRUE)
curve (x ^ (1/3), xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 1, lty = 2, add = TRUE)
?abline
abline (a = 0, b = 3/4, xlim = c(0,1), add = TRUE, lwd = 2, lty =)
abline (a = 0, b = 3/4, xlim = c(0,1), add = TRUE, lwd = 2, lty =2)
curve (x * 1, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 1, lty = 1)
curve (x * 1, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 1, lty = 1)
dev.off()
curve (x * 1, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 1, lty = 1)
curve (x * x, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 2, lty = 1, add = TRUE)
curve (x * x * x, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 3, lty = 1, add = TRUE)
curve (sqrt(x), xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 4, lty = 1, add = TRUE)
curve (x ^ (1/3), xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 5, lty = 1, add = TRUE)
segments(x0 = 0, y0 = 0, x1 = 2/3,y1=1/2, lwd = 1, lty = 2, add = TRUE)
segments(x0 = 1, y0 = 1, x1 = 2/3,y1=1/2, lwd = 1, lty = 2)
segments(x0 = 0, y0 = 0, x1 = 1/3,y1=1/2, lwd = 2, lty = 2, add = TRUE)
segments(x0 = 01, y0 = 01, x1 = 1/3,y1=1/2, lwd = 2, lty = 2, add = TRUE)
curve ((exp(x) - 1)/(exp(1) - 1), xlim = c(0,1), lwd = 1, lty = 3)
curve (x * 1, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 1, lty = 1)
curve (x * x, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 2, lty = 1, add = TRUE)
curve (x * x * x, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 3, lty = 1, add = TRUE)
curve (x * 1, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 3, lty = 1)
curve (x * x, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 3, lty = 1, add = TRUE)
curve (x * x, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 1, lty = 3, add = TRUE)
curve (x * 1, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 1, lty = 3)
curve (x * x, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 2, lty = 3, add = TRUE)
curve (x * x * x, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 3, lty = 3, add = TRUE)
curve (sqrt(x), xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 4, lty = 3, add = TRUE)
curve (x ^ (1/3), xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 5, lty = 3, add = TRUE)
segments(x0 = 0, y0 = 0, x1 = 2/3,y1=1/2, lwd = 1, lty = 2, add = TRUE)
segments(x0 = 1, y0 = 1, x1 = 2/3,y1=1/2, lwd = 1, lty = 2)
segments(x0 = 01, y0 = 01, x1 = 1/3,y1=1/2, lwd = 2, lty = 2, add = TRUE)
segments(x0 = 0, y0 = 0, x1 = 1/3,y1=1/2, lwd = 2, lty = 2, add = TRUE)
curve ((exp(x) - 1)/(exp(1) - 1), xlim = c(0,1), lwd = 1, lty = 1, add = TRUE)
curve(log(x*(e-1) + 1), xlim = c(0,1), lwd = 2, lty = 1, add = TRUE)
curve(log(x*(exp(1)-1) + 1), xlim = c(0,1), lwd = 2, lty = 1, add = TRUE)
legend(legend = c("f1","f2","f3","f4","f5","f6","f7","f8","f9"), x = 0.8, y = 0.5, lty = c(3,3,3,3,3,2,2,1,1), lwd = c(1,2,3,4,5,1,2,1,2))
legend(legend = c("f1","f2","f3","f4","f5","f6","f7","f8","f9"), x = 0.8, y = 0.5, lty = c(3,3,3,3,3,2,2,1,1), lwd = c(1,2,3,4,5,1,2,1,2), ccex = 0.5)
legend(legend = c("f1","f2","f3","f4","f5","f6","f7","f8","f9"), x = 0.8, y = 0.5, lty = c(3,3,3,3,3,2,2,1,1), lwd = c(1,2,3,4,5,1,2,1,2), cex = 0.5)
legend(legend = c("f1","f2","f3","f4","f5","f6","f7","f8","f9"), x = 0.8, y = 0.5, lty = c(3,3,3,3,3,2,2,1,1), lwd = c(1,2,3,4,5,1,2,1,2), cex = 0.7)
curve (x * 1, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 1, lty = 3)
> curve (x * x, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 2, lty = 3, add = TRUE)
> curve (x * x * x, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 3, lty = 3, add = TRUE)
> curve (sqrt(x), xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 4, lty = 3, add = TRUE)
> curve (x ^ (1/3), xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 5, lty = 3, add = TRUE)
> segments(x0 = 0, y0 = 0, x1 = 2/3,y1=1/2, lwd = 1, lty = 2, add = TRUE)
Warning message:
In segments(x0 = 0, y0 = 0, x1 = 2/3, y1 = 1/2, lwd = 1, lty = 2,  :
"add" is not a graphical parameter
> segments(x0 = 1, y0 = 1, x1 = 2/3,y1=1/2, lwd = 1, lty = 2)
Warning messages:
1: "add" is not a graphical parameter
2: "add" is not a graphical parameter
> segments(x0 = 01, y0 = 01, x1 = 1/3,y1=1/2, lwd = 2, lty = 2, add = TRUE)
Warning messages:
1: "add" is not a graphical parameter
2: "add" is not a graphical parameter
3: In segments(x0 = 1, y0 = 1, x1 = 1/3, y1 = 1/2, lwd = 2, lty = 2,  :
"add" is not a graphical parameter
> segments(x0 = 0, y0 = 0, x1 = 1/3,y1=1/2, lwd = 2, lty = 2, add = TRUE)
Warning messages:
1: "add" is not a graphical parameter
2: "add" is not a graphical parameter
3: "add" is not a graphical parameter
4: "add" is not a graphical parameter
5: In segments(x0 = 0, y0 = 0, x1 = 1/3, y1 = 1/2, lwd = 2, lty = 2,  :
"add" is not a graphical parameter
> curve ((exp(x) - 1)/(exp(1) - 1), xlim = c(0,1), lwd = 1, lty = 1, add = TRUE)
Warning messages:
1: "add" is not a graphical parameter
2: "add" is not a graphical parameter
3: "add" is not a graphical parameter
4: "add" is not a graphical parameter
5: "add" is not a graphical parameter
6: "add" is not a graphical parameter
> curve(log(x*(e-1) + 1), xlim = c(0,1), lwd = 2, lty = 1, add = TRUE)
Error in eval(expr, envir, enclos) : object 'e' not found
In addition: Warning messages:
1: "add" is not a graphical parameter
2: "add" is not a graphical parameter
3: "add" is not a graphical parameter
4: "add" is not a graphical parameter
5: "add" is not a graphical parameter
6: "add" is not a graphical parameter
> curve(log(x*(exp(1)-1) + 1), xlim = c(0,1), lwd = 2, lty = 1, add = TRUE)
curve (x * 1, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 1, lty = 3)
curve (x * x, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 2, lty = 3, add = TRUE)
curve (x * x * x, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 3, lty = 3, add = TRUE)
curve (sqrt(x), xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 4, lty = 3, add = TRUE)
curve (x ^ (1/3), xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 5, lty = 3, add = TRUE)
segments(x0 = 0, y0 = 0, x1 = 2/3,y1=1/2, lwd = 1, lty = 2)
segments(x0 = 1, y0 = 1, x1 = 2/3,y1=1/2, lwd = 1, lty = 2)
segments(x0 = 01, y0 = 01, x1 = 1/3,y1=1/2, lwd = 2, lty = 2)
segments(x0 = 0, y0 = 0, x1 = 1/3,y1=1/2, lwd = 2, lty = 2, add = TRUE)
curve ((exp(x) - 1)/(exp(1) - 1), xlim = c(0,1), lwd = 1, lty = 1, add = TRUE)
curve(log(x*(e-1) + 1), xlim = c(0,1), lwd = 2, lty = 1, add = TRUE)
curve(log(x*(exp(1)-1) + 1), xlim = c(0,1), lwd = 2, lty = 1, add = TRUE)
legend(legend = c("f1","f2","f3","f4","f5","f6","f7","f8","f9"), x = 0.8, y = 0.5, lty = c(3,3,3,3,3,2,2,1,1), lwd = c(1,2,3,4,5,1,2,1,2), cex = 0.7)
curve (x * 1, xlim = c(0,1), xlab = "Send proportion", ylab = "current_trust", lwd = 1, lty = 3)
curve (x * x, xlim = c(0,1), lwd = 2, lty = 3, add = TRUE)
curve (x * x * x, xlim = c(0,1), lwd = 3, lty = 3, add = TRUE)
curve (sqrt(x), xlim = c(0,1),  lwd = 4, lty = 3, add = TRUE)
curve (x ^ (1/3), xlim = c(0,1),  lwd = 5, lty = 3, add = TRUE)
segments(x0 = 0, y0 = 0, x1 = 2/3,y1=1/2, lwd = 1, lty = 2)
segments(x0 = 1, y0 = 1, x1 = 2/3,y1=1/2, lwd = 1, lty = 2)
segments(x0 = 01, y0 = 01, x1 = 1/3,y1=1/2, lwd = 2, lty = 2)
segments(x0 = 0, y0 = 0, x1 = 1/3,y1=1/2, lwd = 2, lty = 2, add = TRUE)
curve ((exp(x) - 1)/(exp(1) - 1), xlim = c(0,1), lwd = 1, lty = 1, add = TRUE)
curve(log(x*(e-1) + 1), xlim = c(0,1), lwd = 2, lty = 1, add = TRUE)
curve(log(x*(exp(1)-1) + 1), xlim = c(0,1), lwd = 2, lty = 1, add = TRUE)
legend(legend = c("f1","f2","f3","f4","f5","f6","f7","f8","f9"), x = 0.8, y = 0.5, lty = c(3,3,3,3,3,2,2,1,1), lwd = c(1,2,3,4,5,1,2,1,2), cex = 0.7)
x <- seq (0,1,length=10000)
y <- dnorm(x, mean = 0.2, sd = 0.15)
plot(x, y, xlim = (0,1))
plot(x, y, xlim = c(0,1))
plot(x, y, xlim = c(0,1), type = "l", lwd = 1)
hist(y)
barplot(y)
barplot(y, density = 1)
barplot(y, density = 20)
plot(dnorm(x))
memory.limit()
.Random.seed
install.packages("deepnet")
library(deepnet)
Var1 <- c(rnorm(50, 1, 0.5), rnorm(50, -0.6, 0.2))
Var2 <- c(rnorm(50, -0.8, 0.2), rnorm(50, 2, 1))
x <- matrix(c(Var1, Var2), nrow = 100, ncol = 2)
y <- c(rep(1, 50), rep(0, 50))
x
y
dnn <- sae.dnn.train(x, y, hidden = c(5, 5))
test_Var1 <- c(rnorm(50, 1, 0.5), rnorm(50, -0.6, 0.2))
test_Var2 <- c(rnorm(50, -0.8, 0.2), rnorm(50, 2, 1))
test_x <- matrix(c(test_Var1, test_Var2), nrow = 100, ncol = 2)
test_x
nn.test(dnn, test_x, y)
y = c(rep(1,30),rep(2,30),rep(0,40))
nn.test(dnn, test_x, y)
Var1 <- c(rep(1, 50), rep(0, 50))
Var2 <- c(rep(0, 50), rep(1, 50))
x3 <- matrix(c(Var1, Var2), nrow = 100, ncol = 2)
r1 <- rbm.train(x3, 3, numepochs = 20, cd = 10)
h <- c(0.2, 0.8, 0.1)
v <- rbm.down(r1, h)
v
Var1 <- c(rnorm(50, 1, 0.5), rnorm(50, -0.6, 0.2))
Var2 <- c(rnorm(50, -0.8, 0.2), rnorm(50, 2, 1))
x <- matrix(c(Var1, Var2), nrow = 100, ncol = 2)
y <- c(rep(1, 50), rep(0, 50))
nn <- nn.train(x, y, hidden = c(5))
test_Var1 <- c(rnorm(50, 1, 0.5), rnorm(50, -0.6, 0.2))
test_Var2 <- c(rnorm(50, -0.8, 0.2), rnorm(50, 2, 1))
test_x <- matrix(c(test_Var1, test_Var2), nrow = 100, ncol = 2)
err <- nn.test(nn, test_x, y)
err
test_x
y
nn
nn.predict(test_x)
nn.predict(nn,test_x)
nn.test(nn, test_x, y)
nn.test(nn, test_x, y, t = 0.3)
y = c (rep(0,20),rep(1,20),rep(2,60))
length(y)
y = as.factor(y)
y
y = as.character(y)
y
y = as.factor(y)
y
dnn <- dbn.dnn.train(x, y, hidden = c(5, 5))
class(y)
y = data.matrix(y)
y
dnn <- dbn.dnn.train(x, y, hidden = c(5, 5))
x
y
dnn <- dbn.dnn.train(x, y, hidden = c(5, 5))
dnn <- nn.train(x, y, hidden = c(5, 5))
y = as.vector(y)
y
dnn <- nn.train(x, y, hidden = c(5, 5))
y = c (rep(0,20),rep(1,20),rep(2,60))
dnn <- dbn.dnn.train(x, y, hidden = c(5, 5))
nn.predict(nn, test_x)
?l
?I
data ("AirPassengers")
AP = AirPassengers
class (AP)
plot (AP)
plot (aggregate(AP))
x = c(rep(0,400),rep(1,560))
library(BSDA)
z.test(x, sigma.x = 6.8)
install.packages("OCI")
install.packages("ROracle")
install.packages("ROracle")
install.packages("OCI")
install.packages("ROracle")
y = c(1,1,1,1,rep(0,6))
y
x = 1:10
plot (y ~ x)
plot (y ~ x, ylab = "Sending behavior", xlab = "Round number")
lines(y)
install.packages("h2o")
package_df <- as.data.frame(installed.packages("/Users/qdang/Rlibs"))
package_list <- as.character(package_df$Package)
package_list
install.packages(package_list)
y=c(0.58,0.59929717,0.6053492,0.61310947,0.61657476,0.6257016,0.62706816,0.6289228,0.63116795,0.63546294)
y=c(0.58,0.59929717,0.6053492,0.61310947,0.61657476,0.6257016,0.62706816,0.6289228,0.63116795,0.63546294)
names = c("Base feature set","flesch_reading_ease","flesch_kincaid_grade","smog_index","coleman_liau_index","automated_readability_index",
"dale_chall_readability_score","linsear_write_formula","gunning_fog")
plot (y, xaxt = "n")
plot (y, xaxt = "n",type = "l")
plot (y, xaxt = "n",type = "lo")
plot (y, xaxt = "n",type = "s")
?plot
plot (y, xaxt = "n",type = "b")
axis(1, at=1:10,labels = names)
names = c("Base feature set","flesch_reading_ease","flesch_kincaid_grade","smog_index","coleman_liau_index","automated_readability_index",
"difficult_words","dale_chall_readability_score","linsear_write_formula","gunning_fog")
axis(1, at=1:10,labels = names)
axis(1, at=seq(1, 10, by=1), labels = FALSE)
plot (y, xaxt = "n",type = "b")
axis(1, at=seq(1, 10, by=1), labels = FALSE)
text(seq(1, 10, by=1), par("usr")[3] - 0.2, labels = names, srt = 45, pos = 1, xpd = TRUE)
?axis
plot (y, xaxt = "n",type = "b")
axis(1, at=seq(1, 10, by=1), labels = FALSE)
text(seq(1, 10, by=1), par("usr")[3] - 0.2, labels = names, srt = 45, pos = 1, xpd = TRUE)
axis(1, at=1:10, labels=names)
axis(1, at=1:10, labels=names,las=2)
axis(1, at=1:10, labels=names,las=1)
axis(1, at=1:10, labels=names,las=0)
axis(1, at=1:10, labels=names,las=2)
plot (y, xaxt = "n",type = "b")
axis(1, at=1:10, labels=names,las=1)
axis(1, at=1:10, labels=names,las=3)
y=c(0.58,0.59929717,0.6053492,0.61310947,0.61657476,0.6257016,0.62706816,0.6289228,0.63116795,0.63546294)
x_labels = c("Base feature set","flesch_reading_ease","flesch_kincaid_grade","smog_index","coleman_liau_index","automated_readability_index",
"difficult_words","dale_chall_readability_score","linsear_write_formula","gunning_fog")
plot (y, xaxt = "n",type = "b")
axis(1, at=1:10, labels=names,las=2)
y=c(0.58,0.59929717,0.6053492,0.61310947,0.61657476,0.6257016,0.62706816,0.6289228,0.63116795,0.63546294)
x_labels = c("Base feature set","flesch_reading_ease","flesch_kincaid_grade","smog_index","coleman_liau_index","automated_readability_index",
"difficult_words","dale_chall_readability_score","linsear_write_formula","gunning_fog")
plot (y, xaxt = "n",type = "b", xlab = "",ylab="Accuracy")
axis(1, at=1:10, labels=names,las=2)
text(seq(1.5,end_point,by=2), par("usr")[3]-0.25,
srt = 60, adj= 1, xpd = TRUE,
labels = x_labels, cex=0.65)
text(1:10, par("usr")[3]-0.25,
srt = 60, adj= 1, xpd = TRUE,
labels = x_labels, cex=0.65)
y=c(0.58,0.59929717,0.6053492,0.61310947,0.61657476,0.6257016,0.62706816,0.6289228,0.63116795,0.63546294)
x_labels = c("Base feature set","flesch_reading_ease","flesch_kincaid_grade","smog_index","coleman_liau_index","automated_readability_index",
"difficult_words","dale_chall_readability_score","linsear_write_formula","gunning_fog")
plot (y, xaxt = "n",type = "b", xlab = "",ylab="Accuracy",las=2)
y=c(0.58,0.59929717,0.6053492,0.61310947,0.61657476,0.6257016,0.62706816,0.6289228,0.63116795,0.63546294)
x_labels = c("Base feature set","flesch_reading_ease","flesch_kincaid_grade","smog_index","coleman_liau_index","automated_readability_index",
"difficult_words","dale_chall_readability_score","linsear_write_formula","gunning_fog")
plot (y, xaxt = "n",type = "b", xlab = "",ylab="Accuracy",las=2)
axis(1, at=1:10, labels=x_labels,las=2)
par(mar=c(8,8,1,1))
y=c(0.58,0.59929717,0.6053492,0.61310947,0.61657476,0.6257016,0.62706816,0.6289228,0.63116795,0.63546294)
x_labels = c("Base feature set","flesch_reading_ease","flesch_kincaid_grade","smog_index","coleman_liau_index","automated_readability_index",
"difficult_words","dale_chall_readability_score","linsear_write_formula","gunning_fog")
plot (y, xaxt = "n",type = "b", xlab = "",ylab="Accuracy",las=2)
axis(1, at=1:10, labels=x_labels,las=2)
par(mar=c(8,10,1,1))
y=c(0.58,0.59929717,0.6053492,0.61310947,0.61657476,0.6257016,0.62706816,0.6289228,0.63116795,0.63546294)
x_labels = c("Base feature set","flesch_reading_ease","flesch_kincaid_grade","smog_index","coleman_liau_index","automated_readability_index",
"difficult_words","dale_chall_readability_score","linsear_write_formula","gunning_fog")
plot (y, xaxt = "n",type = "b", xlab = "",ylab="Accuracy",las=2)
axis(1, at=1:10, labels=x_labels,las=2)
par(mar=c(8,1,1,1))
y=c(0.58,0.59929717,0.6053492,0.61310947,0.61657476,0.6257016,0.62706816,0.6289228,0.63116795,0.63546294)
x_labels = c("Base feature set","flesch_reading_ease","flesch_kincaid_grade","smog_index","coleman_liau_index","automated_readability_index",
"difficult_words","dale_chall_readability_score","linsear_write_formula","gunning_fog")
plot (y, xaxt = "n",type = "b", xlab = "",ylab="Accuracy",las=2)
axis(1, at=1:10, labels=x_labels,las=2)
par(mar=c(8,5,1,1))
y=c(0.58,0.59929717,0.6053492,0.61310947,0.61657476,0.6257016,0.62706816,0.6289228,0.63116795,0.63546294)
x_labels = c("Base feature set","flesch_reading_ease","flesch_kincaid_grade","smog_index","coleman_liau_index","automated_readability_index",
"difficult_words","dale_chall_readability_score","linsear_write_formula","gunning_fog")
plot (y, xaxt = "n",type = "b", xlab = "",ylab="Accuracy",las=2)
axis(1, at=1:10, labels=x_labels,las=2)
par(mar=c(10,5,1,1))
y=c(0.58,0.59929717,0.6053492,0.61310947,0.61657476,0.6257016,0.62706816,0.6289228,0.63116795,0.63546294)
x_labels = c("Base feature set","flesch_reading_ease","flesch_kincaid_grade","smog_index","coleman_liau_index","automated_readability_index",
"difficult_words","dale_chall_readability_score","linsear_write_formula","gunning_fog")
plot (y, xaxt = "n",type = "b", xlab = "",ylab="Accuracy",las=2)
axis(1, at=1:10, labels=x_labels,las=2)
par(mar=c(15,5,1,1))
y=c(0.58,0.59929717,0.6053492,0.61310947,0.61657476,0.6257016,0.62706816,0.6289228,0.63116795,0.63546294)
x_labels = c("Base feature set","flesch_reading_ease","flesch_kincaid_grade","smog_index","coleman_liau_index","automated_readability_index",
"difficult_words","dale_chall_readability_score","linsear_write_formula","gunning_fog")
plot (y, xaxt = "n",type = "b", xlab = "",ylab="Accuracy",las=2)
axis(1, at=1:10, labels=x_labels,las=2)
par(mar=c(12,5,1,1))
y=c(0.58,0.59929717,0.6053492,0.61310947,0.61657476,0.6257016,0.62706816,0.6289228,0.63116795,0.63546294)
x_labels = c("Base feature set","flesch_reading_ease","flesch_kincaid_grade","smog_index","coleman_liau_index","automated_readability_index",
"difficult_words","dale_chall_readability_score","linsear_write_formula","gunning_fog")
plot (y, xaxt = "n",type = "b", xlab = "",ylab="Accuracy",las=2)
axis(1, at=1:10, labels=x_labels,las=2)
par(mar=c(12,5,1,1))
y=c(0.58,0.58929717,0.5953492,0.60310947,0.61057476,0.6157016,0.62106816,0.6289228,0.63116795,0.63546294)
x_labels = c("Base feature set","flesch_reading_ease","flesch_kincaid_grade","smog_index","coleman_liau_index","automated_readability_index",
"difficult_words","dale_chall_readability_score","linsear_write_formula","gunning_fog")
plot (y, xaxt = "n",type = "b", xlab = "",ylab="Accuracy",las=2)
axis(1, at=1:10, labels=x_labels,las=2)
par(mar=c(12,5,1,1))
y=c(0.58,0.58929717,0.5953492,0.60310947,0.60857476,0.6157016,0.62106816,0.6289228,0.63116795,0.63546294)
x_labels = c("Base feature set","flesch_reading_ease","flesch_kincaid_grade","smog_index","coleman_liau_index","automated_readability_index",
"difficult_words","dale_chall_readability_score","linsear_write_formula","gunning_fog")
plot (y, xaxt = "n",type = "b", xlab = "",ylab="Accuracy",las=2)
axis(1, at=1:10, labels=x_labels,las=2)
par(mar=c(12,5,1,1))
y=c(0.58,0.58629717,0.5973492,0.60310947,0.60857476,0.6157016,0.62106816,0.6289228,0.63116795,0.63546294)
x_labels = c("Base feature set","flesch_reading_ease","flesch_kincaid_grade","smog_index","coleman_liau_index","automated_readability_index",
"difficult_words","dale_chall_readability_score","linsear_write_formula","gunning_fog")
plot (y, xaxt = "n",type = "b", xlab = "",ylab="Accuracy",las=2)
axis(1, at=1:10, labels=x_labels,las=2)
par(mar=c(12,5,1,1))
y=c(0.58,0.58629717,0.5973492,0.60310947,0.60857476,0.6157016,0.62106816,0.6289228,0.63416795,0.63746294)
x_labels = c("Base feature set","flesch_reading_ease","flesch_kincaid_grade","smog_index","coleman_liau_index","automated_readability_index",
"difficult_words","dale_chall_readability_score","linsear_write_formula","gunning_fog")
plot (y, xaxt = "n",type = "b", xlab = "",ylab="Accuracy",las=2)
axis(1, at=1:10, labels=x_labels,las=2)
par(mar=c(12,5,1,1))
y=c(0.58,0.58629717,0.5923492,0.59810947,0.60857476,0.6157016,0.62106816,0.6289228,0.63416795,0.63746294)
x_labels = c("Base feature set","flesch_reading_ease","flesch_kincaid_grade","smog_index","coleman_liau_index","automated_readability_index",
"difficult_words","dale_chall_readability_score","linsear_write_formula","gunning_fog")
plot (y, xaxt = "n",type = "b", xlab = "",ylab="Accuracy",las=2)
axis(1, at=1:10, labels=x_labels,las=2)
par(mar=c(12,5,1,1))
y=c(0.58,0.58629717,0.5903492,0.59410947,0.59857476,0.6157016,0.62106816,0.6289228,0.63416795,0.63746294)
x_labels = c("Base feature set","flesch_reading_ease","flesch_kincaid_grade","smog_index","coleman_liau_index","automated_readability_index",
"difficult_words","dale_chall_readability_score","linsear_write_formula","gunning_fog")
plot (y, xaxt = "n",type = "b", xlab = "",ylab="Accuracy",las=2)
axis(1, at=1:10, labels=x_labels,las=2)
par(mar=c(12,5,1,1))
y=c(0.58,0.58629717,0.5903492,0.59410947,0.59857476,0.6057016,0.62106816,0.6289228,0.63416795,0.63746294)
x_labels = c("Base feature set","flesch_reading_ease","flesch_kincaid_grade","smog_index","coleman_liau_index","automated_readability_index",
"difficult_words","dale_chall_readability_score","linsear_write_formula","gunning_fog")
plot (y, xaxt = "n",type = "b", xlab = "",ylab="Accuracy",las=2)
axis(1, at=1:10, labels=x_labels,las=2)
par(mar=c(12,5,1,1))
y=c(0.58,0.58629717,0.5903492,0.59410947,0.59857476,0.6057016,0.62106816,0.6289228,0.63416795,0.63746294)
x_labels = c("Base feature set","flesch_reading_ease","flesch_kincaid_grade","smog_index","coleman_liau_index","automated_readability_index",
"difficult_words","dale_chall_readability_score","linsear_write_formula","gunning_fog")
plot (y, xaxt = "n",type = "b", xlab = "",ylab="Accuracy",las=2, ylim = c(0.58,0.64))
axis(1, at=1:10, labels=x_labels,las=2)
par(mar=c(12,5,1,1))
y=c(0.578,0.58629717,0.5903492,0.59410947,0.59857476,0.6057016,0.62106816,0.6289228,0.63416795,0.63746294)
x_labels = c("Base feature set","flesch_reading_ease","flesch_kincaid_grade","smog_index","coleman_liau_index","automated_readability_index",
"difficult_words","dale_chall_readability_score","linsear_write_formula","gunning_fog")
plot (y, xaxt = "n",type = "b", xlab = "",ylab="Accuracy",las=2, ylim = c(0.57,0.64))
axis(1, at=1:10, labels=x_labels,las=2)
par(mar=c(12,5,1,1))
y=c(0.578,0.58629717,0.5903492,0.59410947,0.59857476,0.6057016,0.62106816,0.6289228,0.63416795,0.63746294)
x_labels = c("Base feature set","flesch_reading_ease","flesch_kincaid_grade","smog_index","coleman_liau_index","automated_readability_index",
"difficult_words","dale_chall_readability_score","linsear_write_formula","gunning_fog")
plot (y, xaxt = "n",type = "b", xlab = "",ylab="Accuracy",las=2, ylim = c(0.57,0.64))
axis(1, at=1:10, labels=x_labels,las=2)
par(mar=c(12,5,1,1))
y=c(0.578,0.58629717,0.5903492,0.59410947,0.59857476,0.6057016,0.62106816,0.6289228,0.63416795,0.63746294)
x_labels = c("Base feature set","flesch_reading_ease","flesch_kincaid_grade","smog_index","coleman_liau_index","automated_readability_index",
"difficult_words","dale_chall_readability_score","linsear_write_formula","gunning_fog")
plot (y, xaxt = "n",type = "b", xlab = "",ylab="Accuracy",las=2, ylim = c(0.57,0.64))
axis(1, at=seq(1, 10, by=1), labels = FALSE)
text(seq(1, 10, by=1), par("usr")[3] - 0.2, labels = x_labels, srt = 45, pos = 1, xpd = TRUE)
original.parameters<-par()
par(xaxt="n")
text(seq(1, 10, by=1), par("usr")[3] - 0.2, labels = x_labels, srt = 45, pos = 1, xpd = TRUE)
setwd("~/workspace/wikipedia_analysis/analyis")
set.seed(2015)
all_data <-  read.csv ("all_data.csv", header = FALSE)
all_data$V1 = NULL
all_data$V2 = NULL
str(all_data)
all_data$V13 = NULL
ncol(all_data)
require(caTools)
sample = sample.split(all_data$revid, SplitRatio = 0.8)
require(caTools)
sample = sample.split(all_data$V3, SplitRatio = 0.8)
train = subset (all_data, sample==TRUE)
test = subset (all_data, sample == FALSE)
colnames(all_data) = c("Class","content_length","num_references","num_page_links","num_cite_templates",
"num_non_cite_templates","num_categories","num_images_length","info_noise_score",
"has_infobox","num_lv2_headings","num_lv3_headings",
"flesch_reading_ease","flesch_kincaid_grade","smog_index",
"coleman_liau_index","automated_readability_index",
"difficult_words","dale_chall_readability_score","linsear_write_formula",
"gunning_fog")
str(all_data)
model = train (user_rating ~ flesch_reading_ease + flesch_kincaid_grade + smog_index + coleman_liau_index + automated_readability_index + dale_chall_readability_score + difficult_words + linsear_write_formula + gunning_fog + infonoisescore + logcontentlength + logreferences + logpagelinks + numimageslength + num_citetemplates + lognoncitetemplates + num_categories + hasinfobox + lvl2headings + lvl3heading, data = train, method = "lvq", preProcess="scale")
importance <- varImp(model, scale=FALSE)
plot (importance)
library (caret)
model = train (user_rating ~ flesch_reading_ease + flesch_kincaid_grade + smog_index + coleman_liau_index + automated_readability_index + dale_chall_readability_score + difficult_words + linsear_write_formula + gunning_fog + infonoisescore + logcontentlength + logreferences + logpagelinks + numimageslength + num_citetemplates + lognoncitetemplates + num_categories + hasinfobox + lvl2headings + lvl3heading, data = train, method = "lvq", preProcess="scale")
importance <- varImp(model, scale=FALSE)
plot (importance)
model = train (Class ~ content_length + num_references + num_page_links + num_cite_templates + num_non_cite_templates
+ num_categories + num_images_length + info_noise_score + has_infobox + num_lv2_headings
+ num_lv3_headings
+ flesch_reading_ease + flesch_kincaid_grade + smog_index
+ coleman_liau_index + automated_readability_index + difficult_words
+ dale_chall_readability_score + linsear_write_formula + gunning_fog, data = train, method = "lvq", preProcess="scale")
importance <- varImp(model, scale=FALSE)
plot (importance)
colnames(all_data) = c("quality_class","content_length","num_references","num_page_links","num_cite_templates",
"num_non_cite_templates","num_categories","num_images_length","info_noise_score",
"has_infobox","num_lv2_headings","num_lv3_headings",
"flesch_reading_ease","flesch_kincaid_grade","smog_index",
"coleman_liau_index","automated_readability_index",
"difficult_words","dale_chall_readability_score","linsear_write_formula",
"gunning_fog")
model = train (quality_class ~ content_length + num_references + num_page_links + num_cite_templates + num_non_cite_templates
+ num_categories + num_images_length + info_noise_score + has_infobox + num_lv2_headings
+ num_lv3_headings
+ flesch_reading_ease + flesch_kincaid_grade + smog_index
+ coleman_liau_index + automated_readability_index + difficult_words
+ dale_chall_readability_score + linsear_write_formula + gunning_fog,
data = train, method = "lvq", preProcess="scale")
library (randomForest)
model = randomForest (quality_class ~ content_length + num_references + num_page_links
+ num_cite_templates + num_non_cite_templates
+ num_categories + num_images_length + info_noise_score + has_infobox + num_lv2_headings
+ num_lv3_headings
+ flesch_reading_ease + flesch_kincaid_grade + smog_index
+ coleman_liau_index + automated_readability_index + difficult_words
+ dale_chall_readability_score + linsear_write_formula + gunning_fog,
data = train, ntree = 450)
model = randomForest (quality_class ~ .,
data = train, ntree = 450)
set.seed(2015)
all_data <-  read.csv ("all_data.csv", header = FALSE)
all_data$V1 = NULL
all_data$V2 = NULL
all_data$V13 = NULL
require(caTools)
sample = sample.split(all_data$V3, SplitRatio = 0.8)
colnames(all_data) = c("quality_class","content_length","num_references","num_page_links","num_cite_templates",
"num_non_cite_templates","num_categories","num_images_length","info_noise_score",
"has_infobox","num_lv2_headings","num_lv3_headings",
"flesch_reading_ease","flesch_kincaid_grade","smog_index",
"coleman_liau_index","automated_readability_index",
"difficult_words","dale_chall_readability_score","linsear_write_formula",
"gunning_fog")
train = subset (all_data, sample==TRUE)
test = subset (all_data, sample == FALSE)
library (caret)
model = train (quality_class ~ content_length + num_references + num_page_links
+ num_cite_templates + num_non_cite_templates
+ num_categories + num_images_length + info_noise_score + has_infobox + num_lv2_headings
+ num_lv3_headings
+ flesch_reading_ease + flesch_kincaid_grade + smog_index
+ coleman_liau_index + automated_readability_index + difficult_words
+ dale_chall_readability_score + linsear_write_formula + gunning_fog,
data = train, method = "lvq", preProcess="scale")
importance <- varImp(model, scale=FALSE)
plot (importance)
